

    ↑Build 59679 API Documentation

    BuildsTour

6233 entries across 313 systems in documentation.

58945 (11.1.0) 59679 (11.1.0)

Everything Global API Events Widget API
AccountInfo ✪
C_AccountInfo.GetIDFromBattleNetAccountGUID(battleNetAccountGUID)
C_AccountInfo.IsGUIDBattleNetAccountType(guid)
C_AccountInfo.IsGUIDRelatedToLocalAccount(guid)
AccountStore ✪
C_AccountStore.BeginPurchase(itemID)
C_AccountStore.GetCategories(storeFrontID)
C_AccountStore.GetCategoryInfo(categoryID)
C_AccountStore.GetCategoryItems(categoryID)
C_AccountStore.GetCurrencyAvailable(currencyID)
C_AccountStore.GetCurrencyIDForStore(storeFrontID)
C_AccountStore.GetCurrencyInfo(currencyID)
C_AccountStore.GetItemInfo(itemID)
C_AccountStore.GetStoreFrontState(storeFrontID)
C_AccountStore.RefundItem(itemID)
C_AccountStore.RequestStoreFrontInfoUpdate(storeFrontID)
ACCOUNT_STORE_CURRENCY_AVAILABLE_UPDATED: currencyID
ACCOUNT_STORE_ITEM_INFO_UPDATED: itemID
STORE_FRONT_STATE_UPDATED: storeFrontID
AchievementInfo ✪
C_AchievementInfo.AreGuildAchievementsEnabled()
C_AchievementInfo.GetRewardItemID(achievementID)
C_AchievementInfo.GetSupercedingAchievements(achievementID)
C_AchievementInfo.IsGuildAchievement(achievementId)
C_AchievementInfo.IsValidAchievement(achievementId)
C_AchievementInfo.SetPortraitTexture(textureObject)
ACHIEVEMENT_EARNED: achievementID, alreadyEarned
ACHIEVEMENT_PLAYER_NAME: achievementID
ACHIEVEMENT_SEARCH_UPDATED
CRITERIA_COMPLETE: criteriaID
CRITERIA_EARNED: achievementID, "description", achievementAlreadyEarnedOnAccount
CRITERIA_UPDATE
INSPECT_ACHIEVEMENT_READY: guid
RECEIVED_ACHIEVEMENT_LIST
RECEIVED_ACHIEVEMENT_MEMBER_LIST: achievementID
TRACKED_ACHIEVEMENT_LIST_CHANGED: achievementID, added
TRACKED_ACHIEVEMENT_UPDATE: achievementID, criteriaID, elapsed, duration
AchievementTelemetry ✪
C_AchievementTelemetry.LinkAchievementInClub(achievementID)
C_AchievementTelemetry.LinkAchievementInWhisper(achievementID)
C_AchievementTelemetry.ShowAchievements()
ActionBar ✪
C_ActionBar.EnableActionRangeCheck(actionID, enable)
C_ActionBar.FindFlyoutActionButtons(flyoutID)
C_ActionBar.FindPetActionButtons(petActionID)
C_ActionBar.FindSpellActionButtons(spellID)
C_ActionBar.GetBonusBarIndexForSlot(slotID)
C_ActionBar.GetItemActionOnEquipSpellID(actionID)
C_ActionBar.GetPetActionPetBarIndices(petActionID)
C_ActionBar.GetProfessionQuality(actionID)
C_ActionBar.GetSpell(actionID)
C_ActionBar.HasFlyoutActionButtons(flyoutID)
C_ActionBar.HasPetActionButtons(petActionID)
C_ActionBar.HasPetActionPetBarIndices(petActionID)
C_ActionBar.HasSpellActionButtons(spellID)
C_ActionBar.IsAutoCastPetAction(slotID)
C_ActionBar.IsEnabledAutoCastPetAction(slotID)
C_ActionBar.IsHarmfulAction(actionID, useNeutral)
C_ActionBar.IsHelpfulAction(actionID, useNeutral)
C_ActionBar.IsOnBarOrSpecialBar(spellID)
C_ActionBar.PutActionInSlot(slotID)
C_ActionBar.ShouldOverrideBarShowHealthBar()
C_ActionBar.ShouldOverrideBarShowManaBar()
C_ActionBar.ToggleAutoCastPetAction(slotID)
ACTION_RANGE_CHECK_UPDATE: slot, isInRange, checksRange
ACTION_USABLE_CHANGED: changes
ACTIONBAR_HIDEGRID
ACTIONBAR_PAGE_CHANGED
ACTIONBAR_SHOW_BOTTOMLEFT
ACTIONBAR_SHOWGRID
ACTIONBAR_SLOT_CHANGED: slot
ACTIONBAR_UPDATE_COOLDOWN
ACTIONBAR_UPDATE_STATE
ACTIONBAR_UPDATE_USABLE
PET_BAR_UPDATE
UPDATE_BONUS_ACTIONBAR
UPDATE_EXTRA_ACTIONBAR
UPDATE_MULTI_CAST_ACTIONBAR
UPDATE_OVERRIDE_ACTIONBAR
AddOnProfiler ✪
C_AddOnProfiler.AddPerformanceMessageShown(msg)
C_AddOnProfiler.CheckForPerformanceMessage()
C_AddOnProfiler.GetAddOnMetric("name", metric)
C_AddOnProfiler.GetApplicationMetric(metric)
C_AddOnProfiler.GetOverallMetric(metric)
C_AddOnProfiler.GetTopKAddOnsForMetric(metric, k)
C_AddOnProfiler.IsEnabled()
AddOns ✪
C_AddOns.DisableAddOn(name, "character")
C_AddOns.DisableAllAddOns("character")
C_AddOns.DoesAddOnExist(name)
C_AddOns.DoesAddOnHaveLoadError(name)
C_AddOns.EnableAddOn(name, "character")
C_AddOns.EnableAllAddOns("character")
C_AddOns.GetAddOnDependencies(name)
C_AddOns.GetAddOnEnableState(name, "character")
C_AddOns.GetAddOnInfo(name)
C_AddOns.GetAddOnMetadata(name, "variable")
C_AddOns.GetAddOnOptionalDependencies(name)
C_AddOns.GetNumAddOns()
C_AddOns.GetScriptsDisallowedForBeta()
C_AddOns.IsAddOnDefaultEnabled(name)
C_AddOns.IsAddOnLoadOnDemand(name)
C_AddOns.IsAddOnLoadable(name, "character", demandLoaded)
C_AddOns.IsAddOnLoaded(name)
C_AddOns.IsAddonVersionCheckEnabled()
C_AddOns.LoadAddOn(name)
C_AddOns.ResetAddOns()
C_AddOns.ResetDisabledAddOns()
C_AddOns.SaveAddOns()
C_AddOns.SetAddonVersionCheck(enabled)
ADDON_LOADED: "addOnName", containsBindings
ADDONS_UNLOADING: closingClient
SAVED_VARIABLES_TOO_LARGE: "addOnName"
AdventureJournal ✪
AJ_DUNGEON_ACTION: lfgDungeonID
AJ_OPEN
AJ_OPEN_COLLECTIONS_ACTION
AJ_PVE_LFG_ACTION
AJ_PVP_ACTION: battleMasterListID
AJ_PVP_LFG_ACTION
AJ_PVP_RBG_ACTION
AJ_PVP_SKIRMISH_ACTION
AJ_PVP_SPECIAL_BG_ACTION
AJ_QUEST_LOG_OPEN: questID, uiMapID
AJ_RAID_ACTION: lfgDungeonID
AJ_REFRESH_DISPLAY: newAdventureNotice
AJ_REWARD_DATA_RECEIVED
AdventureMap ✪
C_AdventureMap.GetAdventureMapTextureKit()
ADVENTURE_MAP_CLOSE
ADVENTURE_MAP_OPEN: followerTypeID
ADVENTURE_MAP_QUEST_UPDATE: questID
ADVENTURE_MAP_UPDATE_INSETS
ADVENTURE_MAP_UPDATE_POIS
AlliedRaces ✪
C_AlliedRaces.GetAllRacialAbilitiesFromID(raceID)
C_AlliedRaces.GetRaceInfoByID(raceID)
ALLIED_RACE_CLOSE
ALLIED_RACE_OPEN: raceID
AnimaDiversionInfo ✪
C_AnimaDiversion.CloseUI()
C_AnimaDiversion.GetAnimaDiversionNodes()
C_AnimaDiversion.GetOriginPosition()
C_AnimaDiversion.GetReinforceProgress()
C_AnimaDiversion.GetTextureKit()
C_AnimaDiversion.OpenAnimaDiversionUI()
C_AnimaDiversion.SelectAnimaNode(talentID, temporary)
ANIMA_DIVERSION_CLOSE
ANIMA_DIVERSION_OPEN: info
ANIMA_DIVERSION_TALENT_UPDATED
ArdenwealdGardening ✪
C_ArdenwealdGardening.GetGardenData()
C_ArdenwealdGardening.IsGardenAccessible()
AreaPoiInfo ✪
C_AreaPoiInfo.GetAreaPOIForMap(uiMapID)
C_AreaPoiInfo.GetAreaPOIInfo(uiMapID, areaPoiID)
C_AreaPoiInfo.GetAreaPOISecondsLeft(areaPoiID)
C_AreaPoiInfo.GetDelvesForMap(uiMapID)
C_AreaPoiInfo.GetDragonridingRacesForMap(uiMapID)
C_AreaPoiInfo.GetEventsForMap(uiMapID)
C_AreaPoiInfo.GetQuestHubsForMap(uiMapID)
C_AreaPoiInfo.IsAreaPOITimed(areaPoiID)
AREA_POIS_UPDATED
ArenaTeam ✪
AcceptArenaTeam()
ArenaTeamDisband(index)
ArenaTeamInviteByName(index, "target")
ArenaTeamLeave(index)
ArenaTeamSetLeaderByName(index, "target")
ArenaTeamUninviteByName(index, "target")
DeclineArenaTeam()
ArtifactUI ✪
C_ArtifactUI.AddPower(powerID)
C_ArtifactUI.ApplyCursorRelicToSlot(relicSlotIndex)
C_ArtifactUI.CanApplyArtifactRelic(relicItemID, onlyUnlocked)
C_ArtifactUI.CanApplyCursorRelicToSlot(relicSlotIndex)
C_ArtifactUI.CanApplyRelicItemIDToEquippedArtifactSlot(relicItemID, relicSlotIndex)
C_ArtifactUI.CanApplyRelicItemIDToSlot(relicItemID, relicSlotIndex)
C_ArtifactUI.CheckRespecNPC()
C_ArtifactUI.Clear()
C_ArtifactUI.ClearForgeCamera()
C_ArtifactUI.ConfirmRespec()
C_ArtifactUI.DoesEquippedArtifactHaveAnyRelicsSlotted()
C_ArtifactUI.GetAppearanceInfo(appearanceSetIndex, appearanceIndex)
C_ArtifactUI.GetAppearanceInfoByID(artifactAppearanceID)
C_ArtifactUI.GetAppearanceSetInfo(appearanceSetIndex)
C_ArtifactUI.GetArtifactArtInfo()
C_ArtifactUI.GetArtifactInfo()
C_ArtifactUI.GetArtifactItemID()
C_ArtifactUI.GetArtifactTier()
C_ArtifactUI.GetArtifactXPRewardTargetInfo(artifactCategoryID)
C_ArtifactUI.GetCostForPointAtRank(rank, tier)
C_ArtifactUI.GetEquippedArtifactArtInfo()
C_ArtifactUI.GetEquippedArtifactInfo()
C_ArtifactUI.GetEquippedArtifactItemID()
C_ArtifactUI.GetEquippedArtifactNumRelicSlots(onlyUnlocked)
C_ArtifactUI.GetEquippedArtifactRelicInfo(relicSlotIndex)
C_ArtifactUI.GetEquippedRelicLockedReason(relicSlotIndex)
C_ArtifactUI.GetForgeRotation()
C_ArtifactUI.GetItemLevelIncreaseProvidedByRelic(itemLinkOrID)
C_ArtifactUI.GetMetaPowerInfo()
C_ArtifactUI.GetNumAppearanceSets()
C_ArtifactUI.GetNumObtainedArtifacts()
C_ArtifactUI.GetNumRelicSlots(onlyUnlocked)
C_ArtifactUI.GetPointsRemaining()
C_ArtifactUI.GetPowerHyperlink(powerID)
C_ArtifactUI.GetPowerInfo(powerID)
C_ArtifactUI.GetPowerLinks(powerID)
C_ArtifactUI.GetPowers()
C_ArtifactUI.GetPowersAffectedByRelic(relicSlotIndex)
C_ArtifactUI.GetPowersAffectedByRelicItemLink(relicItemInfo)
C_ArtifactUI.GetPreviewAppearance()
C_ArtifactUI.GetRelicInfo(relicSlotIndex)
C_ArtifactUI.GetRelicInfoByItemID(itemID)
C_ArtifactUI.GetRelicLockedReason(relicSlotIndex)
C_ArtifactUI.GetRelicSlotType(relicSlotIndex)
C_ArtifactUI.GetRespecArtifactArtInfo()
C_ArtifactUI.GetRespecArtifactInfo()
C_ArtifactUI.GetRespecCost()
C_ArtifactUI.GetTotalPowerCost(startingTrait, numTraits, artifactTier)
C_ArtifactUI.GetTotalPurchasedRanks()
C_ArtifactUI.IsArtifactDisabled()
C_ArtifactUI.IsArtifactItem(itemLocation)
C_ArtifactUI.IsAtForge()
C_ArtifactUI.IsEquippedArtifactDisabled()
C_ArtifactUI.IsEquippedArtifactMaxed()
C_ArtifactUI.IsMaxedByRulesOrEffect()
C_ArtifactUI.IsPowerKnown(powerID)
C_ArtifactUI.IsViewedArtifactEquipped()
C_ArtifactUI.SetAppearance(artifactAppearanceID)
C_ArtifactUI.SetForgeCamera()
C_ArtifactUI.SetForgeRotation(forgeRotationX, forgeRotationY, forgeRotationZ)
C_ArtifactUI.SetPreviewAppearance(artifactAppearanceID)
C_ArtifactUI.ShouldSuppressForgeRotation()
ARTIFACT_CLOSE
ARTIFACT_ENDGAME_REFUND: numRefundedPowers, refundedTier, bagOrSlotIndex, slotIndex
ARTIFACT_RELIC_FORGE_CLOSE
ARTIFACT_RELIC_FORGE_PREVIEW_RELIC_CHANGED
ARTIFACT_RELIC_FORGE_UPDATE
ARTIFACT_RELIC_INFO_RECEIVED
ARTIFACT_RESPEC_PROMPT
ARTIFACT_TIER_CHANGED: newTier, bagOrSlotIndex, slotIndex
ARTIFACT_UPDATE: newItem
ARTIFACT_XP_UPDATE
AuctionHouse ✪
C_AuctionHouse.CalculateCommodityDeposit(itemID, duration, quantity)
C_AuctionHouse.CalculateItemDeposit(item, duration, quantity)
C_AuctionHouse.CanCancelAuction(ownedAuctionID)
C_AuctionHouse.CancelAuction(ownedAuctionID)
C_AuctionHouse.CancelCommoditiesPurchase()
C_AuctionHouse.CancelSell()
C_AuctionHouse.CloseAuctionHouse()
C_AuctionHouse.ConfirmCommoditiesPurchase(itemID, quantity)
C_AuctionHouse.ConfirmPostCommodity(item, duration, quantity, unitPrice)
C_AuctionHouse.ConfirmPostItem(item, duration, quantity, bid, buyout)
C_AuctionHouse.FavoritesAreAvailable()
C_AuctionHouse.GetAuctionInfoByID(auctionID)
C_AuctionHouse.GetAuctionItemSubClasses(classID)
C_AuctionHouse.GetAvailablePostCount(item)
C_AuctionHouse.GetBidInfo(bidIndex)
C_AuctionHouse.GetBidType(bidTypeIndex)
C_AuctionHouse.GetBids()
C_AuctionHouse.GetBrowseResults()
C_AuctionHouse.GetCancelCost(ownedAuctionID)
C_AuctionHouse.GetCommoditySearchResultInfo(itemID, commoditySearchResultIndex)
C_AuctionHouse.GetCommoditySearchResultsQuantity(itemID)
C_AuctionHouse.GetExtraBrowseInfo(itemKey)
C_AuctionHouse.GetFilterGroups()
C_AuctionHouse.GetItemCommodityStatus(item)
C_AuctionHouse.GetItemKeyFromItem(item)
C_AuctionHouse.GetItemKeyInfo(itemKey, restrictQualityToFilter)
C_AuctionHouse.GetItemKeyRequiredLevel(itemKey)
C_AuctionHouse.GetItemSearchResultInfo(itemKey, itemSearchResultIndex)
C_AuctionHouse.GetItemSearchResultsQuantity(itemKey)
C_AuctionHouse.GetMaxBidItemBid()
C_AuctionHouse.GetMaxBidItemBuyout()
C_AuctionHouse.GetMaxCommoditySearchResultPrice(itemID)
C_AuctionHouse.GetMaxItemSearchResultBid(itemKey)
C_AuctionHouse.GetMaxItemSearchResultBuyout(itemKey)
C_AuctionHouse.GetMaxOwnedAuctionBid()
C_AuctionHouse.GetMaxOwnedAuctionBuyout()
C_AuctionHouse.GetNumBidTypes()
C_AuctionHouse.GetNumBids()
C_AuctionHouse.GetNumCommoditySearchResults(itemID)
C_AuctionHouse.GetNumItemSearchResults(itemKey)
C_AuctionHouse.GetNumOwnedAuctionTypes()
C_AuctionHouse.GetNumOwnedAuctions()
C_AuctionHouse.GetNumReplicateItems()
C_AuctionHouse.GetOwnedAuctionInfo(ownedAuctionIndex)
C_AuctionHouse.GetOwnedAuctionType(ownedAuctionTypeIndex)
C_AuctionHouse.GetOwnedAuctions()
C_AuctionHouse.GetQuoteDurationRemaining()
C_AuctionHouse.GetReplicateItemBattlePetInfo(index)
C_AuctionHouse.GetReplicateItemInfo(index)
C_AuctionHouse.GetReplicateItemLink(index)
C_AuctionHouse.GetReplicateItemTimeLeft(index)
C_AuctionHouse.GetTimeLeftBandInfo(timeLeftBand)
C_AuctionHouse.HasFavorites()
C_AuctionHouse.HasFullBidResults()
C_AuctionHouse.HasFullBrowseResults()
C_AuctionHouse.HasFullCommoditySearchResults(itemID)
C_AuctionHouse.HasFullItemSearchResults(itemKey)
C_AuctionHouse.HasFullOwnedAuctionResults()
C_AuctionHouse.HasMaxFavorites()
C_AuctionHouse.HasSearchResults(itemKey)
C_AuctionHouse.IsFavoriteItem(itemKey)
C_AuctionHouse.IsSellItemValid(item, displayError)
C_AuctionHouse.IsThrottledMessageSystemReady()
C_AuctionHouse.MakeItemKey(itemID, itemLevel, itemSuffix, battlePetSpeciesID)
C_AuctionHouse.PlaceBid(auctionID, bidAmount)
C_AuctionHouse.PostCommodity(item, duration, quantity, unitPrice)
C_AuctionHouse.PostItem(item, duration, quantity, bid, buyout)
C_AuctionHouse.QueryBids(sorts, auctionIDs)
C_AuctionHouse.QueryOwnedAuctions(sorts)
C_AuctionHouse.RefreshCommoditySearchResults(itemID)
C_AuctionHouse.RefreshItemSearchResults(itemKey, minLevelFilter, maxLevelFilter)
C_AuctionHouse.ReplicateItems()
C_AuctionHouse.RequestMoreBrowseResults()
C_AuctionHouse.RequestMoreCommoditySearchResults(itemID)
C_AuctionHouse.RequestMoreItemSearchResults(itemKey)
C_AuctionHouse.RequestOwnedAuctionBidderInfo(auctionID)
C_AuctionHouse.SearchForFavorites(sorts)
C_AuctionHouse.SearchForItemKeys(itemKeys, sorts)
C_AuctionHouse.SendBrowseQuery(query)
C_AuctionHouse.SendSearchQuery(itemKey, sorts, separateOwnerItems, minLevelFilter, maxLevelFilter)
C_AuctionHouse.SendSellSearchQuery(itemKey, sorts, separateOwnerItems)
C_AuctionHouse.SetFavoriteItem(itemKey, setFavorite)
C_AuctionHouse.ShouldAutoPopulatePrice()
C_AuctionHouse.StartCommoditiesPurchase(itemID, quantity)
C_AuctionHouse.SupportsCopperValues()
AUCTION_CANCELED: auctionID
AUCTION_HOUSE_AUCTION_CREATED: auctionID
AUCTION_HOUSE_AUCTIONS_EXPIRED: auctionID
AUCTION_HOUSE_BROWSE_FAILURE
AUCTION_HOUSE_BROWSE_RESULTS_ADDED: addedBrowseResults
AUCTION_HOUSE_BROWSE_RESULTS_UPDATED
AUCTION_HOUSE_CLOSED
AUCTION_HOUSE_DISABLED
AUCTION_HOUSE_FAVORITES_UPDATED
AUCTION_HOUSE_ITEM_DELIVERY_DELAY_UPDATE: purchasedItemDeliveryDelay, cancelledItemDeliveryDelay
AUCTION_HOUSE_NEW_BID_RECEIVED: auctionID
AUCTION_HOUSE_NEW_RESULTS_RECEIVED: itemKey
AUCTION_HOUSE_POST_ERROR
AUCTION_HOUSE_POST_WARNING
AUCTION_HOUSE_PURCHASE_COMPLETED: auctionID
AUCTION_HOUSE_SCRIPT_DEPRECATED
AUCTION_HOUSE_SHOW
AUCTION_HOUSE_SHOW_COMMODITY_WON_NOTIFICATION: "commodityName", commodityQuantity
AUCTION_HOUSE_SHOW_ERROR: error
AUCTION_HOUSE_SHOW_FORMATTED_NOTIFICATION: notification, "text", auctionID
AUCTION_HOUSE_SHOW_NOTIFICATION: notification
AUCTION_HOUSE_THROTTLED_MESSAGE_DROPPED
AUCTION_HOUSE_THROTTLED_MESSAGE_QUEUED
AUCTION_HOUSE_THROTTLED_MESSAGE_RESPONSE_RECEIVED
AUCTION_HOUSE_THROTTLED_MESSAGE_SENT
AUCTION_HOUSE_THROTTLED_SYSTEM_READY
AUCTION_MULTISELL_FAILURE
AUCTION_MULTISELL_START: numRepetitions
AUCTION_MULTISELL_UPDATE: createdCount, totalToCreate
BID_ADDED: bidID
BIDS_UPDATED
COMMODITY_PRICE_UNAVAILABLE
COMMODITY_PRICE_UPDATED: updatedUnitPrice, updatedTotalPrice
COMMODITY_PURCHASE_FAILED
COMMODITY_PURCHASE_SUCCEEDED
COMMODITY_PURCHASED: itemID, quantity
COMMODITY_SEARCH_RESULTS_ADDED: itemID
COMMODITY_SEARCH_RESULTS_RECEIVED
COMMODITY_SEARCH_RESULTS_UPDATED: itemID
EXTRA_BROWSE_INFO_RECEIVED: itemID
ITEM_KEY_ITEM_INFO_RECEIVED: itemID
ITEM_PURCHASED: itemID
ITEM_SEARCH_RESULTS_ADDED: itemKey
ITEM_SEARCH_RESULTS_UPDATED: itemKey, newAuctionID
OWNED_AUCTION_BIDDER_INFO_RECEIVED: auctionID, "bidderName"
OWNED_AUCTIONS_UPDATED
REPLICATE_ITEM_LIST_UPDATE
AzeriteEmpoweredItem ✪
C_AzeriteEmpoweredItem.CanSelectPower(azeriteEmpoweredItemLocation, powerID)
C_AzeriteEmpoweredItem.ConfirmAzeriteEmpoweredItemRespec(azeriteEmpoweredItemLocation)
C_AzeriteEmpoweredItem.GetAllTierInfo(azeriteEmpoweredItemLocation)
C_AzeriteEmpoweredItem.GetAllTierInfoByItemID(itemInfo, classID)
C_AzeriteEmpoweredItem.GetAzeriteEmpoweredItemRespecCost()
C_AzeriteEmpoweredItem.GetPowerInfo(powerID)
C_AzeriteEmpoweredItem.GetPowerText(azeriteEmpoweredItemLocation, powerID, level)
C_AzeriteEmpoweredItem.GetSpecsForPower(powerID)
C_AzeriteEmpoweredItem.HasAnyUnselectedPowers(azeriteEmpoweredItemLocation)
C_AzeriteEmpoweredItem.HasBeenViewed(azeriteEmpoweredItemLocation)
C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItem(itemLocation)
C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItemByID(itemInfo)
C_AzeriteEmpoweredItem.IsAzeritePreviewSourceDisplayable(itemInfo, classID)
C_AzeriteEmpoweredItem.IsHeartOfAzerothEquipped()
C_AzeriteEmpoweredItem.IsPowerAvailableForSpec(powerID, specID)
C_AzeriteEmpoweredItem.IsPowerSelected(azeriteEmpoweredItemLocation, powerID)
C_AzeriteEmpoweredItem.SelectPower(azeriteEmpoweredItemLocation, powerID)
C_AzeriteEmpoweredItem.SetHasBeenViewed(azeriteEmpoweredItemLocation)
AZERITE_EMPOWERED_ITEM_EQUIPPED_STATUS_CHANGED: isHeartEquipped
AZERITE_EMPOWERED_ITEM_SELECTION_UPDATED: azeriteEmpoweredItemLocation
AzeriteEssence ✪
C_AzeriteEssence.ActivateEssence(essenceID, milestoneID)
C_AzeriteEssence.CanActivateEssence(essenceID, milestoneID)
C_AzeriteEssence.CanDeactivateEssence(milestoneID)
C_AzeriteEssence.CanOpenUI()
C_AzeriteEssence.ClearPendingActivationEssence()
C_AzeriteEssence.CloseForge()
C_AzeriteEssence.GetEssenceHyperlink(essenceID, rank)
C_AzeriteEssence.GetEssenceInfo(essenceID)
C_AzeriteEssence.GetEssences()
C_AzeriteEssence.GetMilestoneEssence(milestoneID)
C_AzeriteEssence.GetMilestoneInfo(milestoneID)
C_AzeriteEssence.GetMilestoneSpell(milestoneID)
C_AzeriteEssence.GetMilestones()
C_AzeriteEssence.GetNumUnlockedEssences()
C_AzeriteEssence.GetNumUsableEssences()
C_AzeriteEssence.GetPendingActivationEssence()
C_AzeriteEssence.HasNeverActivatedAnyEssences()
C_AzeriteEssence.HasPendingActivationEssence()
C_AzeriteEssence.IsAtForge()
C_AzeriteEssence.SetPendingActivationEssence(essenceID)
C_AzeriteEssence.UnlockMilestone(milestoneID)
AZERITE_ESSENCE_ACTIVATED: slot, essenceID
AZERITE_ESSENCE_ACTIVATION_FAILED: slot, essenceID
AZERITE_ESSENCE_CHANGED: essenceID, newRank
AZERITE_ESSENCE_FORGE_CLOSE
AZERITE_ESSENCE_FORGE_OPEN
AZERITE_ESSENCE_MILESTONE_UNLOCKED: milestoneID
AZERITE_ESSENCE_UPDATE
PENDING_AZERITE_ESSENCE_CHANGED: essenceID
AzeriteItem ✪
C_AzeriteItem.FindActiveAzeriteItem()
C_AzeriteItem.GetAzeriteItemXPInfo(azeriteItemLocation)
C_AzeriteItem.GetPowerLevel(azeriteItemLocation)
C_AzeriteItem.GetUnlimitedPowerLevel(azeriteItemLocation)
C_AzeriteItem.HasActiveAzeriteItem()
C_AzeriteItem.IsAzeriteItem(itemLocation)
C_AzeriteItem.IsAzeriteItemAtMaxLevel()
C_AzeriteItem.IsAzeriteItemByID(itemInfo)
C_AzeriteItem.IsAzeriteItemEnabled(azeriteItemLocation)
C_AzeriteItem.IsUnlimitedLevelingUnlocked()
AZERITE_ITEM_ENABLED_STATE_CHANGED: enabled
AZERITE_ITEM_EXPERIENCE_CHANGED: azeriteItemLocation, oldExperienceAmount, newExperienceAmount
AZERITE_ITEM_POWER_LEVEL_CHANGED: azeriteItemLocation, oldPowerLevel, newPowerLevel, unlockedEmpoweredItemsInfo, azeriteItemID
Bank ✪
C_Bank.AutoDepositItemsIntoBank(bankType)
C_Bank.CanDepositMoney(bankType)
C_Bank.CanPurchaseBankTab(bankType)
C_Bank.CanUseBank(bankType)
C_Bank.CanViewBank(bankType)
C_Bank.CanWithdrawMoney(bankType)
C_Bank.CloseBankFrame()
C_Bank.DepositMoney(bankType, amount)
C_Bank.FetchDepositedMoney(bankType)
C_Bank.FetchNextPurchasableBankTabCost(bankType)
C_Bank.FetchNumPurchasedBankTabs(bankType)
C_Bank.FetchPurchasedBankTabData(bankType)
C_Bank.FetchPurchasedBankTabIDs(bankType)
C_Bank.HasMaxBankTabs(bankType)
C_Bank.IsItemAllowedInBankType(bankType, itemLocation)
C_Bank.PurchaseBankTab(bankType)
C_Bank.UpdateBankTabSettings(bankType, tabID, "tabName", "tabIcon", depositFlags)
C_Bank.WithdrawMoney(bankType, amount)
BANK_BAG_SLOT_FLAGS_UPDATED: slot
BANK_TAB_SETTINGS_UPDATED: bankType
BANK_TABS_CHANGED: bankType
BANKFRAME_CLOSED
BANKFRAME_OPENED
PLAYER_ACCOUNT_BANK_TAB_SLOTS_CHANGED: slot
PLAYERBANKBAGSLOTS_CHANGED
PLAYERBANKSLOTS_CHANGED: slot
PLAYERREAGENTBANKSLOTS_CHANGED: slot
REAGENTBANK_PURCHASED
REAGENTBANK_UPDATE
BarberShop ✪
C_BarberShop.ApplyCustomizationChoices()
C_BarberShop.Cancel()
C_BarberShop.ClearPreviewChoices(clearSavedChoices)
C_BarberShop.GetAvailableCustomizations()
C_BarberShop.GetCurrentCameraZoom()
C_BarberShop.GetCurrentCharacterData()
C_BarberShop.GetCurrentCost()
C_BarberShop.GetViewingChrModel()
C_BarberShop.HasAlteredForm()
C_BarberShop.HasAnyChanges()
C_BarberShop.HasCustomizationFeature(featureMask)
C_BarberShop.IsViewingAlteredForm()
C_BarberShop.MarkCustomizationChoiceAsSeen(choiceID)
C_BarberShop.MarkCustomizationOptionAsSeen(optionID)
C_BarberShop.PreviewCustomizationChoice(optionID, choiceID)
C_BarberShop.RandomizeCustomizationChoices()
C_BarberShop.ResetCameraRotation()
C_BarberShop.ResetCustomizationChoices()
C_BarberShop.RotateCamera(diffDegrees)
C_BarberShop.SaveSeenChoices()
C_BarberShop.SetCameraDistanceOffset(offset)
C_BarberShop.SetCameraZoomLevel(zoomLevel, keepCustomZoom)
C_BarberShop.SetCustomizationChoice(optionID, choiceID)
C_BarberShop.SetModelDressState(dressedState)
C_BarberShop.SetSelectedSex(sex)
C_BarberShop.SetViewingAlteredForm(isViewingAlteredForm)
C_BarberShop.SetViewingChrModel(chrModelID, spellShapeshiftFormID)
C_BarberShop.SetViewingShapeshiftForm(shapeshiftFormID)
C_BarberShop.ZoomCamera(zoomAmount)
BARBER_SHOP_APPEARANCE_APPLIED
BARBER_SHOP_CAMERA_VALUES_UPDATED
BARBER_SHOP_CLOSE
BARBER_SHOP_COST_UPDATE
BARBER_SHOP_FORCE_CUSTOMIZATIONS_UPDATE
BARBER_SHOP_OPEN
BARBER_SHOP_RESULT: success
BarberShop ✪
C_BarberShopInternal.SetQAMode(qaModeEnabled)
BattleNet ✪
C_BattleNet.GetAccountInfoByGUID(guid)
C_BattleNet.GetAccountInfoByID(id, wowAccountGUID)
C_BattleNet.GetFriendAccountInfo(friendIndex, wowAccountGUID)
C_BattleNet.GetFriendGameAccountInfo(friendIndex, accountIndex)
C_BattleNet.GetFriendNumGameAccounts(friendIndex)
C_BattleNet.GetGameAccountInfoByGUID(guid)
C_BattleNet.GetGameAccountInfoByID(id)
C_BattleNet.InstallHighResTextures()
BattlePet ✪
PET_BATTLE_ABILITY_CHANGED: owner, petIndex, abilityID
PET_BATTLE_ACTION_SELECTED
PET_BATTLE_AURA_APPLIED: owner, petIndex, auraInstanceID
PET_BATTLE_AURA_CANCELED: owner, petIndex, auraInstanceID
PET_BATTLE_AURA_CHANGED: owner, petIndex, auraInstanceID
PET_BATTLE_CAPTURED: owner, petIndex
PET_BATTLE_CLOSE
PET_BATTLE_FINAL_ROUND: owner
PET_BATTLE_HEALTH_CHANGED: owner, petIndex, healthChange
PET_BATTLE_LEVEL_CHANGED: owner, petIndex, newLevel
PET_BATTLE_MAX_HEALTH_CHANGED: owner, petIndex, healthChange
PET_BATTLE_OPENING_DONE
PET_BATTLE_OPENING_START
PET_BATTLE_OVER
PET_BATTLE_OVERRIDE_ABILITY: abilityIndex
PET_BATTLE_PET_CHANGED: owner
PET_BATTLE_PET_ROUND_PLAYBACK_COMPLETE: roundNumber
PET_BATTLE_PET_ROUND_RESULTS: roundNumber
PET_BATTLE_PET_TYPE_CHANGED: owner, petIndex, stateValue
PET_BATTLE_PVP_DUEL_REQUEST_CANCEL
PET_BATTLE_PVP_DUEL_REQUESTED: "fullName"
PET_BATTLE_QUEUE_PROPOSAL_ACCEPTED
PET_BATTLE_QUEUE_PROPOSAL_DECLINED
PET_BATTLE_QUEUE_PROPOSE_MATCH
PET_BATTLE_QUEUE_STATUS
PET_BATTLE_XP_CHANGED: owner, petIndex, xpChange
BehavioralMessaging ✪
C_BehavioralMessaging.SendNotificationReceipt(dbId, openTimeSeconds, readTimeSeconds)
BEHAVIORAL_NOTIFICATION: "notificationType", dbId
BlackMarketInfo ✪
BLACK_MARKET_BID_RESULT: marketID, resultCode
BLACK_MARKET_CLOSE
BLACK_MARKET_ITEM_UPDATE
BLACK_MARKET_OPEN
BLACK_MARKET_OUTBID: marketID, itemID
BLACK_MARKET_UNAVAILABLE
BLACK_MARKET_WON: marketID, itemID
Browser ✪
SIMPLE_BROWSER_WEB_ERROR: errorCode
SIMPLE_BROWSER_WEB_PROXY_FAILED
SIMPLE_CHECKOUT_CLOSED
Build ✪
GetBuildInfo()
Is64BitClient()
IsBetaBuild()
IsDebugBuild()
IsLinuxClient()
IsMacClient()
IsPublicBuild()
IsTestBuild()
IsWindowsClient()
SupportsClipCursor()
Calendar ✪
C_Calendar.AddEvent()
C_Calendar.AreNamesReady()
C_Calendar.CanAddEvent()
C_Calendar.CanSendInvite()
C_Calendar.CloseEvent()
C_Calendar.ContextMenuEventCanComplain(offsetMonths, monthDay, eventIndex)
C_Calendar.ContextMenuEventCanEdit(offsetMonths, monthDay, eventIndex)
C_Calendar.ContextMenuEventCanRemove(offsetMonths, monthDay, eventIndex)
C_Calendar.ContextMenuEventClipboard()
C_Calendar.ContextMenuEventCopy()
C_Calendar.ContextMenuEventGetCalendarType()
C_Calendar.ContextMenuEventPaste(offsetMonths, monthDay)
C_Calendar.ContextMenuEventRemove()
C_Calendar.ContextMenuEventSignUp()
C_Calendar.ContextMenuGetEventIndex()
C_Calendar.ContextMenuInviteAvailable()
C_Calendar.ContextMenuInviteDecline()
C_Calendar.ContextMenuInviteRemove()
C_Calendar.ContextMenuInviteTentative()
C_Calendar.ContextMenuSelectEvent(offsetMonths, monthDay, eventIndex)
C_Calendar.CreateCommunitySignUpEvent()
C_Calendar.CreateGuildAnnouncementEvent()
C_Calendar.CreateGuildSignUpEvent()
C_Calendar.CreatePlayerEvent()
C_Calendar.EventAvailable()
C_Calendar.EventCanEdit()
C_Calendar.EventClearAutoApprove()
C_Calendar.EventClearLocked()
C_Calendar.EventClearModerator(inviteIndex)
C_Calendar.EventDecline()
C_Calendar.EventGetCalendarType()
C_Calendar.EventGetClubId()
C_Calendar.EventGetInvite(eventIndex)
C_Calendar.EventGetInviteResponseTime(eventIndex)
C_Calendar.EventGetInviteSortCriterion()
C_Calendar.EventGetSelectedInvite()
C_Calendar.EventGetStatusOptions(eventIndex)
C_Calendar.EventGetTextures(eventType)
C_Calendar.EventGetTypes()
C_Calendar.EventGetTypesDisplayOrdered()
C_Calendar.EventHasPendingInvite()
C_Calendar.EventHaveSettingsChanged()
C_Calendar.EventInvite("name")
C_Calendar.EventRemoveInvite(inviteIndex)
C_Calendar.EventRemoveInviteByGuid(guid)
C_Calendar.EventSelectInvite(inviteIndex)
C_Calendar.EventSetAutoApprove()
C_Calendar.EventSetClubId(clubId)
C_Calendar.EventSetDate(month, monthDay, year)
C_Calendar.EventSetDescription("description")
C_Calendar.EventSetInviteStatus(eventIndex, status)
C_Calendar.EventSetLocked()
C_Calendar.EventSetModerator(inviteIndex)
C_Calendar.EventSetTextureID(textureIndex)
C_Calendar.EventSetTime(hour, minute)
C_Calendar.EventSetTitle("title")
C_Calendar.EventSetType(typeIndex)
C_Calendar.EventSignUp()
C_Calendar.EventSortInvites("criterion", reverse)
C_Calendar.EventTentative()
C_Calendar.GetClubCalendarEvents(clubId, startTime, endTime)
C_Calendar.GetDayEvent(monthOffset, monthDay, index)
C_Calendar.GetDefaultGuildFilter()
C_Calendar.GetEventIndex()
C_Calendar.GetEventIndexInfo(eventID, monthOffset, monthDay)
C_Calendar.GetEventInfo()
C_Calendar.GetFirstPendingInvite(offsetMonths, monthDay)
C_Calendar.GetGuildEventInfo(index)
C_Calendar.GetGuildEventSelectionInfo(index)
C_Calendar.GetHolidayInfo(monthOffset, monthDay, index)
C_Calendar.GetMaxCreateDate()
C_Calendar.GetMinDate()
C_Calendar.GetMonthInfo(offsetMonths)
C_Calendar.GetNextClubId()
C_Calendar.GetNumDayEvents(offsetMonths, monthDay)
C_Calendar.GetNumGuildEvents()
C_Calendar.GetNumInvites()
C_Calendar.GetNumPendingInvites()
C_Calendar.GetRaidInfo(offsetMonths, monthDay, eventIndex)
C_Calendar.IsActionPending()
C_Calendar.IsEventOpen()
C_Calendar.MassInviteCommunity(clubId, minLevel, maxLevel, maxRankOrder)
C_Calendar.MassInviteGuild(minLevel, maxLevel, maxRankOrder)
C_Calendar.OpenCalendar()
C_Calendar.OpenEvent(offsetMonths, monthDay, index)
C_Calendar.RemoveEvent()
C_Calendar.SetAbsMonth(month, year)
C_Calendar.SetMonth(offsetMonths)
C_Calendar.SetNextClubId(clubId)
C_Calendar.UpdateEvent()
CALENDAR_ACTION_PENDING: pending
CALENDAR_CLOSE_EVENT
CALENDAR_EVENT_ALARM: "title", hour, minute
CALENDAR_NEW_EVENT: isCopy
CALENDAR_OPEN_EVENT: "calendarType"
CALENDAR_UPDATE_ERROR: "errorReason"
CALENDAR_UPDATE_ERROR_WITH_COUNT: "errorReason", count
CALENDAR_UPDATE_ERROR_WITH_PLAYER_NAME: "errorReason", "playerName"
CALENDAR_UPDATE_EVENT
CALENDAR_UPDATE_EVENT_LIST
CALENDAR_UPDATE_GUILD_EVENTS
CALENDAR_UPDATE_INVITE_LIST: hasCompleteList
CALENDAR_UPDATE_PENDING_INVITES
Camera ✪
GetCameraFOVDefaults()
GetUICameraInfo(uiCameraID)
ChallengeModeInfo ✪
C_ChallengeMode.CanUseKeystoneInCurrentMap(itemLocation)
C_ChallengeMode.ClearKeystone()
C_ChallengeMode.CloseKeystoneFrame()
C_ChallengeMode.GetActiveChallengeMapID()
C_ChallengeMode.GetActiveKeystoneInfo()
C_ChallengeMode.GetAffixInfo(affixID)
C_ChallengeMode.GetChallengeCompletionInfo()
C_ChallengeMode.GetDeathCount()
C_ChallengeMode.GetDungeonScoreRarityColor(dungeonScore)
C_ChallengeMode.GetGuildLeaders()
C_ChallengeMode.GetKeystoneLevelRarityColor(level)
C_ChallengeMode.GetMapScoreInfo()
C_ChallengeMode.GetMapTable()
C_ChallengeMode.GetMapUIInfo(mapChallengeModeID)
C_ChallengeMode.GetOverallDungeonScore()
C_ChallengeMode.GetPowerLevelDamageHealthMod(powerLevel)
C_ChallengeMode.GetSlottedKeystoneInfo()
C_ChallengeMode.GetSpecificDungeonOverallScoreRarityColor(specificDungeonOverallScore)
C_ChallengeMode.GetSpecificDungeonScoreRarityColor(specificDungeonScore)
C_ChallengeMode.HasSlottedKeystone()
C_ChallengeMode.IsChallengeModeActive()
C_ChallengeMode.RemoveKeystone()
C_ChallengeMode.RequestLeaders(mapChallengeModeID)
C_ChallengeMode.Reset()
C_ChallengeMode.SlotKeystone()
C_ChallengeMode.StartChallengeMode()
CHALLENGE_MODE_COMPLETED
CHALLENGE_MODE_DEATH_COUNT_UPDATED
CHALLENGE_MODE_KEYSTONE_RECEPTABLE_OPEN
CHALLENGE_MODE_KEYSTONE_SLOTTED: keystoneID
CHALLENGE_MODE_LEADERS_UPDATE
CHALLENGE_MODE_MAPS_UPDATE
CHALLENGE_MODE_MEMBER_INFO_UPDATED
CHALLENGE_MODE_RESET: mapID
CHALLENGE_MODE_START: mapID
ChatBubbles ✪
C_ChatBubbles.GetAllChatBubbles(includeForbidden)
ChatInfo ✪
C_ChatInfo.CanPlayerSpeakLanguage(languageId)
C_ChatInfo.GetChannelInfoFromIdentifier("channelIdentifier")
C_ChatInfo.GetChannelRosterInfo(channelIndex, rosterIndex)
C_ChatInfo.GetChannelRuleset(channelIndex)
C_ChatInfo.GetChannelRulesetForChannelID(channelID)
C_ChatInfo.GetChannelShortcut(channelIndex)
C_ChatInfo.GetChannelShortcutForChannelID(channelID)
C_ChatInfo.GetChatLineSenderGUID(chatLine)
C_ChatInfo.GetChatLineSenderName(chatLine)
C_ChatInfo.GetChatLineText(chatLine)
C_ChatInfo.GetChatTypeName(typeID)
C_ChatInfo.GetClubStreamIDs(clubID)
C_ChatInfo.GetColorForChatType("chatType")
C_ChatInfo.GetGeneralChannelID()
C_ChatInfo.GetGeneralChannelLocalID()
C_ChatInfo.GetMentorChannelID()
C_ChatInfo.GetNumActiveChannels()
C_ChatInfo.GetNumReservedChatWindows()
C_ChatInfo.GetRegisteredAddonMessagePrefixes()
C_ChatInfo.IsAddonMessagePrefixRegistered("prefix")
C_ChatInfo.IsChannelRegional(channelIndex)
C_ChatInfo.IsChannelRegionalForChannelID(channelID)
C_ChatInfo.IsChatLineCensored(chatLine)
C_ChatInfo.IsLoggingChat()
C_ChatInfo.IsLoggingCombat()
C_ChatInfo.IsPartyChannelType(channelType)
C_ChatInfo.IsRegionalServiceAvailable()
C_ChatInfo.IsTimerunningPlayer(playerGUID)
C_ChatInfo.IsValidChatLine(chatLine)
C_ChatInfo.IsValidCombatFilterName("name")
C_ChatInfo.RegisterAddonMessagePrefix("prefix")
C_ChatInfo.ReplaceIconAndGroupExpressions("input", noIconReplacement, noGroupReplacement)
C_ChatInfo.RequestCanLocalWhisperTarget(whisperTarget)
C_ChatInfo.ResetDefaultZoneChannels()
C_ChatInfo.SendAddonMessage("prefix", "message", "chatType", "target")
C_ChatInfo.SendAddonMessageLogged("prefix", "message", "chatType", "target")
C_ChatInfo.SwapChatChannelsByChannelIndex(firstChannelIndex, secondChannelIndex)
C_ChatInfo.UncensorChatLine(chatLine)
ALTERNATIVE_DEFAULT_LANGUAGE_CHANGED
BN_CHAT_MSG_ADDON: "prefix", "text", "channel", senderID
CAN_LOCAL_WHISPER_TARGET_RESPONSE: whisperTarget, status
CAN_PLAYER_SPEAK_LANGUAGE_CHANGED: languageId, canSpeakLanguage
CHANNEL_COUNT_UPDATE: displayIndex, count
CHANNEL_FLAGS_UPDATED: displayIndex
CHANNEL_INVITE_REQUEST: "channelID", "name"
CHANNEL_LEFT: chatChannelID, "name"
CHANNEL_PASSWORD_REQUEST: "channelID"
CHANNEL_ROSTER_UPDATE: displayIndex, count
CHANNEL_UI_UPDATE
CHAT_COMBAT_MSG_ARENA_POINTS_GAIN: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_LOGGING_CHANGED: whichLog, isEnabled
CHAT_MSG_ACHIEVEMENT: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_ADDON: "prefix", "text", "channel", "sender", "target", zoneChannelID, localID, "name", instanceID
CHAT_MSG_ADDON_LOGGED: "prefix", "text", "channel", "sender", "target", zoneChannelID, localID, "name", instanceID
CHAT_MSG_AFK: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_BG_SYSTEM_ALLIANCE: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_BG_SYSTEM_HORDE: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_BG_SYSTEM_NEUTRAL: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_BN: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_BN_INLINE_TOAST_ALERT: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_BN_INLINE_TOAST_BROADCAST: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_BN_INLINE_TOAST_BROADCAST_INFORM: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_BN_INLINE_TOAST_CONVERSATION: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_BN_WHISPER: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_BN_WHISPER_INFORM: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_BN_WHISPER_PLAYER_OFFLINE: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_CHANNEL: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_CHANNEL_JOIN: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_CHANNEL_LEAVE: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_CHANNEL_LEAVE_PREVENTED: "channelName"
CHAT_MSG_CHANNEL_LIST: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_CHANNEL_NOTICE: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_CHANNEL_NOTICE_USER: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_COMBAT_FACTION_CHANGE: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_COMBAT_HONOR_GAIN: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_COMBAT_MISC_INFO: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_COMBAT_XP_GAIN: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_COMMUNITIES_CHANNEL: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_CURRENCY: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_DND: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_EMOTE: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_FILTERED: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_GUILD: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_GUILD_ACHIEVEMENT: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_GUILD_ITEM_LOOTED: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_IGNORED: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_INSTANCE_CHAT: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_INSTANCE_CHAT_LEADER: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_LOOT: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_MONEY: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_MONSTER_EMOTE: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_MONSTER_PARTY: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_MONSTER_SAY: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_MONSTER_WHISPER: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_MONSTER_YELL: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_OFFICER: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_OPENING: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_PARTY: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_PARTY_LEADER: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_PET_BATTLE_COMBAT_LOG: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_PET_BATTLE_INFO: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_PET_INFO: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_PING: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_RAID: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_RAID_BOSS_EMOTE: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_RAID_BOSS_WHISPER: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_RAID_LEADER: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_RAID_WARNING: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_RESTRICTED: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_SAY: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_SKILL: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_SYSTEM: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_TARGETICONS: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_TEXT_EMOTE: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_TRADESKILLS: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_VOICE_TEXT: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_WHISPER: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_WHISPER_INFORM: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_MSG_YELL: "text", "playerName", "languageName", "channelName", "playerName2", "specialFlags", zoneChannelID, channelIndex, "channelBaseName", languageID, lineID, guid, bnSenderID, isMobile, isSubtitle, hideSenderInLetterbox, supressRaidIcons
CHAT_REGIONAL_SEND_FAILED
CHAT_REGIONAL_STATUS_CHANGED: isServiceAvailable
CHAT_SERVER_DISCONNECTED: isInitialMessage
CHAT_SERVER_RECONNECTED
CLEAR_BOSS_EMOTES
DAILY_RESET_INSTANCE_WELCOME: "mapname", timeLeft
INSTANCE_RESET_WARNING: "warningMessage", timeLeft
LANGUAGE_LIST_CHANGED
NOTIFY_CHAT_SUPPRESSED
QUEST_BOSS_EMOTE: "text", "playerName", displayTime, enableBossEmoteWarningSound
RAID_BOSS_EMOTE: "text", "playerName", displayTime, enableBossEmoteWarningSound
RAID_BOSS_WHISPER: "text", "playerName", displayTime, enableBossEmoteWarningSound
RAID_INSTANCE_WELCOME: "mapname", timeLeft, locked, extended
UPDATE_CHAT_COLOR: "name", r, g, b
UPDATE_CHAT_COLOR_NAME_BY_CLASS: "name", colorNameByClass
UPDATE_CHAT_WINDOWS
UPDATE_FLOATING_CHAT_WINDOWS
ChromieTimeInfo ✪
C_ChromieTime.CloseUI()
C_ChromieTime.GetChromieTimeExpansionOption(expansionRecID)
C_ChromieTime.GetChromieTimeExpansionOptions()
C_ChromieTime.SelectChromieTimeOption(chromieTimeExpansionInfoId)
Cinematic ✪
CinematicFinished(movieType, userCanceled, didError)
CinematicStarted(movieType, movieID, canCancel)
InCinematic()
MouseOverrideCinematicDisable(doOverride)
OpeningCinematic()
StopCinematic()
CINEMATIC_START: canBeCancelled, forcedAspectRatio
CINEMATIC_STOP
HIDE_SUBTITLE
PLAY_MOVIE: movieID
SHOW_SUBTITLE: "subtitle", "sender"
STOP_MOVIE
CinematicList ✪
C_CinematicList.GetUICinematicList()
ClassColor ✪
C_ClassColor.GetClassColor("className")
ClassTalents ✪
C_ClassTalents.CanChangeTalents()
C_ClassTalents.CanCreateNewConfig()
C_ClassTalents.CanEditTalents()
C_ClassTalents.CommitConfig(savedConfigID)
C_ClassTalents.DeleteConfig(configID)
C_ClassTalents.GetActiveConfigID()
C_ClassTalents.GetActiveHeroTalentSpec()
C_ClassTalents.GetConfigIDsBySpecID(specID)
C_ClassTalents.GetHasStarterBuild()
C_ClassTalents.GetHeroTalentSpecsForClassSpec(configID, classSpecID)
C_ClassTalents.GetLastSelectedSavedConfigID(specID)
C_ClassTalents.GetNextStarterBuildPurchase()
C_ClassTalents.GetStarterBuildActive()
C_ClassTalents.GetTraitTreeForSpec(specID)
C_ClassTalents.HasUnspentHeroTalentPoints()
C_ClassTalents.HasUnspentTalentPoints()
C_ClassTalents.ImportLoadout(configID, entries, "name")
C_ClassTalents.InitializeViewLoadout(specID, level)
C_ClassTalents.IsConfigPopulated(configID)
C_ClassTalents.LoadConfig(configID, autoApply)
C_ClassTalents.RenameConfig(configID, "name")
C_ClassTalents.RequestNewConfig("name")
C_ClassTalents.SaveConfig(configID)
C_ClassTalents.SetStarterBuildActive(active)
C_ClassTalents.SetUsesSharedActionBars(configID, usesShared)
C_ClassTalents.UpdateLastSelectedSavedConfigID(specID, configID)
C_ClassTalents.ViewLoadout(entries)
ACTIVE_COMBAT_CONFIG_CHANGED: configID
SELECTED_LOADOUT_CHANGED
SPECIALIZATION_CHANGE_CAST_FAILED
STARTER_BUILD_ACTIVATION_FAILED
ClassTrial ✪
CLASS_TRIAL_TIMER_START
CLASS_TRIAL_UPGRADE_COMPLETE
ClickBindings ✪
C_ClickBindings.CanSpellBeClickBound(spellID)
C_ClickBindings.ExecuteBinding("targetToken", "button", modifiers)
C_ClickBindings.GetBindingType("button", modifiers)
C_ClickBindings.GetEffectiveInteractionButton("button", modifiers)
C_ClickBindings.GetProfileInfo()
C_ClickBindings.GetStringFromModifiers(modifiers)
C_ClickBindings.GetTutorialShown()
C_ClickBindings.MakeModifiers()
C_ClickBindings.ResetCurrentProfile()
C_ClickBindings.SetProfileByInfo(infoVec)
C_ClickBindings.SetTutorialShown()
CLICKBINDINGS_SET_HIGHLIGHTS_SHOWN: showHighlights
Client ✪
FlashClientIcon()
GetBillingTimeRested()
GetFileIDFromPath("filePath")
GetFramerate()
IsCpuBound()
ReportBug("description")
ReportSuggestion("description")
RestartGx()
Screenshot()
UpdateWindow()
ClientScene ✪
CLIENT_SCENE_CLOSED
CLIENT_SCENE_OPENED: sceneType
Club ✪
C_Club.AcceptInvitation(clubId)
C_Club.AddClubStreamChatChannel(clubId, streamId)
C_Club.AdvanceStreamViewMarker(clubId, streamId)
C_Club.AssignMemberRole(clubId, memberId, roleId)
C_Club.CanResolvePlayerLocationFromClubMessageData(clubId, streamId, epoch, position)
C_Club.ClearAutoAdvanceStreamViewMarker()
C_Club.ClearClubPresenceSubscription()
C_Club.CompareBattleNetDisplayName(clubId, lhsMemberId, rhsMemberId)
C_Club.CreateClub("name", "shortName", "description", clubType, avatarId, isCrossFaction)
C_Club.CreateStream(clubId, "name", "subject", leadersAndModeratorsOnly)
C_Club.CreateTicket(clubId, allowedRedeemCount, duration, defaultStreamId, isCrossFaction)
C_Club.DeclineInvitation(clubId)
C_Club.DestroyClub(clubId)
C_Club.DestroyMessage(clubId, streamId, messageId)
C_Club.DestroyStream(clubId, streamId)
C_Club.DestroyTicket(clubId, "ticketId")
C_Club.DoesAnyCommunityHaveUnreadMessages()
C_Club.DoesCommunityHaveMembersOfTheOppositeFaction(clubId)
C_Club.EditClub(clubId, "name", "shortName", "description", avatarId, "broadcast", crossFaction)
C_Club.EditMessage(clubId, streamId, messageId, "message")
C_Club.EditStream(clubId, streamId, "name", "subject", leadersAndModeratorsOnly)
C_Club.Flush()
C_Club.FocusCommunityStreams()
C_Club.FocusStream(clubId, streamId)
C_Club.GetAssignableRoles(clubId, memberId)
C_Club.GetAvatarIdList(clubType)
C_Club.GetClubCapacity()
C_Club.GetClubInfo(clubId)
C_Club.GetClubLimits(clubType)
C_Club.GetClubMembers(clubId, streamId)
C_Club.GetClubPrivileges(clubId)
C_Club.GetClubStreamNotificationSettings(clubId)
C_Club.GetCommunityNameResultText(result)
C_Club.GetGuildClubId()
C_Club.GetInfoFromLastCommunityChatLine()
C_Club.GetInvitationCandidates("filter", maxResults, cursorPosition, allowFullMatch, clubId)
C_Club.GetInvitationInfo(clubId)
C_Club.GetInvitationsForClub(clubId)
C_Club.GetInvitationsForSelf()
C_Club.GetLastTicketResponse("ticket")
C_Club.GetMemberInfo(clubId, memberId)
C_Club.GetMemberInfoForSelf(clubId)
C_Club.GetMessageInfo(clubId, streamId, messageId)
C_Club.GetMessageRanges(clubId, streamId)
C_Club.GetMessagesBefore(clubId, streamId, newest, count)
C_Club.GetMessagesInRange(clubId, streamId, oldest, newest)
C_Club.GetStreamInfo(clubId, streamId)
C_Club.GetStreamViewMarker(clubId, streamId)
C_Club.GetStreams(clubId)
C_Club.GetSubscribedClubs()
C_Club.GetTickets(clubId)
C_Club.IsAccountMuted(clubId)
C_Club.IsBeginningOfStream(clubId, streamId, messageId)
C_Club.IsEnabled()
C_Club.IsRestricted()
C_Club.IsSubscribedToStream(clubId, streamId)
C_Club.KickMember(clubId, memberId)
C_Club.LeaveClub(clubId)
C_Club.RedeemTicket("ticketId")
C_Club.RequestInvitationsForClub(clubId)
C_Club.RequestMoreMessagesBefore(clubId, streamId, messageId, count)
C_Club.RequestTicket("ticketId")
C_Club.RequestTickets(clubId)
C_Club.RevokeInvitation(clubId, memberId)
C_Club.SendBattleTagFriendRequest(guildClubId, memberId)
C_Club.SendCharacterInvitation(clubId, "character")
C_Club.SendInvitation(clubId, memberId)
C_Club.SendMessage(clubId, streamId, "message")
C_Club.SetAutoAdvanceStreamViewMarker(clubId, streamId)
C_Club.SetAvatarTexture(texture, avatarId, clubType)
C_Club.SetClubMemberNote(clubId, memberId, "note")
C_Club.SetClubPresenceSubscription(clubId)
C_Club.SetClubStreamNotificationSettings(clubId, settings)
C_Club.SetCommunityID(communityID)
C_Club.SetFavorite(clubId, isFavorite)
C_Club.SetSocialQueueingEnabled(clubId, enabled)
C_Club.ShouldAllowClubType(clubType)
C_Club.UnfocusAllStreams(unsubscribe)
C_Club.UnfocusStream(clubId, streamId)
C_Club.ValidateText(clubType, "text", clubFieldType)
AVATAR_LIST_UPDATED: clubType
CLUB_ADDED: clubId
CLUB_ERROR: action, error, clubType
CLUB_INVITATION_ADDED_FOR_SELF: invitation
CLUB_INVITATION_REMOVED_FOR_SELF: invitationId
CLUB_INVITATIONS_RECEIVED_FOR_CLUB: clubId
CLUB_MEMBER_ADDED: clubId, memberId
CLUB_MEMBER_PRESENCE_UPDATED: clubId, memberId, presence
CLUB_MEMBER_REMOVED: clubId, memberId
CLUB_MEMBER_ROLE_UPDATED: clubId, memberId, roleId
CLUB_MEMBER_UPDATED: clubId, memberId
CLUB_MESSAGE_ADDED: clubId, streamId, messageId
CLUB_MESSAGE_HISTORY_RECEIVED: clubId, streamId, downloadedRange, contiguousRange
CLUB_MESSAGE_UPDATED: clubId, streamId, messageId
CLUB_REMOVED: clubId
CLUB_REMOVED_MESSAGE: "clubName", clubRemovedReason
CLUB_SELF_MEMBER_ROLE_UPDATED: clubId, roleId
CLUB_STREAM_ADDED: clubId, streamId
CLUB_STREAM_REMOVED: clubId, streamId
CLUB_STREAM_SUBSCRIBED: clubId, streamId
CLUB_STREAM_UNSUBSCRIBED: clubId, streamId
CLUB_STREAM_UPDATED: clubId, streamId
CLUB_STREAMS_LOADED: clubId
CLUB_TICKET_CREATED: clubId, ticketInfo
CLUB_TICKET_RECEIVED: "ticket"
CLUB_TICKETS_RECEIVED: clubId
CLUB_UPDATED: clubId
INITIAL_CLUBS_LOADED
STREAM_VIEW_MARKER_UPDATED: clubId, streamId, lastReadTime
ClubFinderInfo ✪
C_ClubFinder.ApplicantAcceptClubInvite(clubFinderGUID)
C_ClubFinder.ApplicantDeclineClubInvite(clubFinderGUID)
C_ClubFinder.CancelMembershipRequest(clubFinderGUID)
C_ClubFinder.CheckAllPlayerApplicantSettings()
C_ClubFinder.ClearAllFinderCache()
C_ClubFinder.ClearClubApplicantsCache()
C_ClubFinder.ClearClubFinderPostingsCache()
C_ClubFinder.DoesPlayerBelongToClubFromClubGUID(clubFinderGUID)
C_ClubFinder.GetClubFinderDisableReason()
C_ClubFinder.GetClubRecruitmentSettings()
C_ClubFinder.GetClubTypeFromFinderGUID(clubFinderGUID)
C_ClubFinder.GetFocusIndexFromFlag(flags)
C_ClubFinder.GetPlayerApplicantLocaleFlags()
C_ClubFinder.GetPlayerApplicantSettings()
C_ClubFinder.GetPlayerClubApplicationStatus(clubFinderGUID)
C_ClubFinder.GetPlayerSettingsFocusFlagsSelectedCount()
C_ClubFinder.GetPostingIDFromClubFinderGUID(clubFinderGUID)
C_ClubFinder.GetRecruitingClubInfoFromClubID(clubId)
C_ClubFinder.GetRecruitingClubInfoFromFinderGUID(clubFinderGUID)
C_ClubFinder.GetStatusOfPostingFromClubId(postingID)
C_ClubFinder.GetTotalMatchingCommunityListSize()
C_ClubFinder.GetTotalMatchingGuildListSize()
C_ClubFinder.HasAlreadyAppliedToLinkedPosting(clubFinderGUID)
C_ClubFinder.HasPostingBeenDelisted(postingID)
C_ClubFinder.IsCommunityFinderEnabled()
C_ClubFinder.IsEnabled()
C_ClubFinder.IsListingEnabledFromFlags(flags)
C_ClubFinder.IsPostingBanned(postingID)
C_ClubFinder.IsValidSearchString("name")
C_ClubFinder.LookupClubPostingFromClubFinderGUID(clubFinderGUID, isLinkedPosting)
C_ClubFinder.PlayerGetClubInvitationList()
C_ClubFinder.PlayerRequestPendingClubsList(type)
C_ClubFinder.PlayerReturnPendingCommunitiesList()
C_ClubFinder.PlayerReturnPendingGuildsList()
C_ClubFinder.PostClub(clubId, itemLevelRequirement, "name", "description", avatarId, specs, type, crossFaction)
C_ClubFinder.RequestApplicantList(type)
C_ClubFinder.RequestClubsList(guildListRequested, "searchString", specIDs)
C_ClubFinder.RequestMembershipToClub(clubFinderGUID, "comment", specIDs)
C_ClubFinder.RequestNextCommunityPage(startingIndex, pageSize)
C_ClubFinder.RequestNextGuildPage(startingIndex, pageSize)
C_ClubFinder.RequestPostingInformationFromClubId(clubId)
C_ClubFinder.RequestSubscribedClubPostingIDs()
C_ClubFinder.ResetClubPostingMapCache()
C_ClubFinder.RespondToApplicant(clubFinderGUID, playerGUID, shouldAccept, requestType, "playerName", forceAccept, reported)
C_ClubFinder.ReturnClubApplicantList(clubId)
C_ClubFinder.ReturnMatchingCommunityList()
C_ClubFinder.ReturnMatchingGuildList()
C_ClubFinder.ReturnPendingClubApplicantList(clubId)
C_ClubFinder.SendChatWhisper(clubFinderGUID, playerGUID, applicantType, "name")
C_ClubFinder.SetAllRecruitmentSettings(value)
C_ClubFinder.SetPlayerApplicantLocaleFlags(localeFlags)
C_ClubFinder.SetPlayerApplicantSettings(index, checked)
C_ClubFinder.SetRecruitmentLocale(locale)
C_ClubFinder.SetRecruitmentSettings(index, checked)
C_ClubFinder.ShouldShowClubFinder()
CLUB_FINDER_APPLICANT_INVITE_RECIEVED: clubFinderGUIDs
CLUB_FINDER_APPLICATIONS_UPDATED: type, clubFinderGUIDs
CLUB_FINDER_CAN_WHISPER_APPLICANT: applicant
CLUB_FINDER_CLUB_LIST_RETURNED: type
CLUB_FINDER_CLUB_REPORTED: type, clubFinderGUID
CLUB_FINDER_COMMUNITY_OFFLINE_JOIN: clubId
CLUB_FINDER_ENABLED_OR_DISABLED
CLUB_FINDER_GUILD_REALM_NAME_UPDATED: clubFinderGUID, "realmName"
CLUB_FINDER_LINKED_CLUB_RETURNED: clubInfo
CLUB_FINDER_MEMBERSHIP_LIST_CHANGED
CLUB_FINDER_PLAYER_PENDING_LIST_RECIEVED: type
CLUB_FINDER_POST_UPDATED: clubFinderGUIDs
CLUB_FINDER_RECRUIT_LIST_CHANGED
CLUB_FINDER_RECRUITMENT_POST_RETURNED: type
CLUB_FINDER_RECRUITS_UPDATED: type
CombatLog ✪
COMBAT_LOG_EVENT
COMBAT_LOG_EVENT_UNFILTERED
COMBAT_TEXT_UPDATE: "combatTextType"
CommentatorFrame ✪
C_Commentator.AddPlayerOverrideName("playerName", "overrideName")
C_Commentator.AddTrackedDefensiveAuras(spellIDs)
C_Commentator.AddTrackedOffensiveAuras(spellIDs)
C_Commentator.AreTeamsSwapped()
C_Commentator.AssignPlayerToTeam("playerName", "teamName")
C_Commentator.AssignPlayersToTeam("playerName", "teamName")
C_Commentator.AssignPlayersToTeamInCurrentInstance(teamIndex, "teamName")
C_Commentator.CanUseCommentatorCheats()
C_Commentator.ClearCameraTarget()
C_Commentator.ClearFollowTarget()
C_Commentator.ClearLookAtTarget(lookAtIndex)
C_Commentator.EnterInstance()
C_Commentator.ExitInstance()
C_Commentator.FindSpectatedUnit(unitToken)
C_Commentator.FindTeamNameInCurrentInstance(teamIndex)
C_Commentator.FindTeamNameInDirectory("playerNames")
C_Commentator.FlushCommentatorHistory()
C_Commentator.FollowPlayer(factionIndex, playerIndex, forceInstantTransition)
C_Commentator.FollowUnit("token")
C_Commentator.ForceFollowTransition()
C_Commentator.GetAdditionalCameraWeight()
C_Commentator.GetAdditionalCameraWeightByToken(unitToken)
C_Commentator.GetAllPlayerOverrideNames()
C_Commentator.GetCamera()
C_Commentator.GetCameraCollision()
C_Commentator.GetCameraPosition()
C_Commentator.GetCommentatorHistory()
C_Commentator.GetCurrentMapID()
C_Commentator.GetDampeningPercent()
C_Commentator.GetDistanceBeforeForcedHorizontalConvergence()
C_Commentator.GetDurationToForceHorizontalConvergence()
C_Commentator.GetExcludeDistance()
C_Commentator.GetHardlockWeight()
C_Commentator.GetHorizontalAngleThresholdToSmooth()
C_Commentator.GetIndirectSpellID(trackedSpellID)
C_Commentator.GetInstanceInfo(mapIndex, instanceIndex)
C_Commentator.GetLookAtLerpAmount()
C_Commentator.GetMapInfo(mapIndex)
C_Commentator.GetMatchDuration()
C_Commentator.GetMaxNumPlayersPerTeam()
C_Commentator.GetMaxNumTeams()
C_Commentator.GetMode()
C_Commentator.GetMsToHoldForHorizontalMovement()
C_Commentator.GetMsToHoldForVerticalMovement()
C_Commentator.GetMsToSmoothHorizontalChange()
C_Commentator.GetMsToSmoothVerticalChange()
C_Commentator.GetNumMaps()
C_Commentator.GetNumPlayers(factionIndex)
C_Commentator.GetOrCreateSeries("teamName1", "teamName2")
C_Commentator.GetPlayerAuraInfo(teamIndex, playerIndex, spellID)
C_Commentator.GetPlayerAuraInfoByUnit(token, spellID)
C_Commentator.GetPlayerCooldownInfo(teamIndex, playerIndex, spellID)
C_Commentator.GetPlayerCooldownInfoByUnit(unitToken, spellID)
C_Commentator.GetPlayerCrowdControlInfo(teamIndex, playerIndex)
C_Commentator.GetPlayerCrowdControlInfoByUnit(token)
C_Commentator.GetPlayerData(teamIndex, playerIndex)
C_Commentator.GetPlayerFlagInfo(teamIndex, playerIndex)
C_Commentator.GetPlayerFlagInfoByUnit(unitToken)
C_Commentator.GetPlayerItemCooldownInfo(teamIndex, playerIndex, itemID)
C_Commentator.GetPlayerItemCooldownInfoByUnit(unitToken, itemID)
C_Commentator.GetPlayerOverrideName("originalName")
C_Commentator.GetPlayerSpellCharges(teamIndex, playerIndex, spellID)
C_Commentator.GetPlayerSpellChargesByUnit(unitToken, spellID)
C_Commentator.GetPositionLerpAmount()
C_Commentator.GetSmoothFollowTransitioning()
C_Commentator.GetSoftlockWeight()
C_Commentator.GetSpeedFactor()
C_Commentator.GetStartLocation(mapID)
C_Commentator.GetTeamColor(teamIndex)
C_Commentator.GetTeamColorByUnit(unitToken)
C_Commentator.GetTimeLeftInMatch()
C_Commentator.GetTrackedSpellID(indirectSpellID)
C_Commentator.GetTrackedSpells(teamIndex, playerIndex, category)
C_Commentator.GetTrackedSpellsByUnit(unitToken, category)
C_Commentator.GetUnitData(unitToken)
C_Commentator.GetWargameInfo(listID)
C_Commentator.HasTrackedAuras(token)
C_Commentator.IsSmartCameraLocked()
C_Commentator.IsSpectating()
C_Commentator.IsTrackedDefensiveAura(spellID)
C_Commentator.IsTrackedOffensiveAura(spellID)
C_Commentator.IsTrackedSpell(teamIndex, playerIndex, spellID, category)
C_Commentator.IsTrackedSpellByUnit(unitToken, spellID, category)
C_Commentator.IsUsingSmartCamera()
C_Commentator.LookAtPlayer(factionIndex, playerIndex, lookAtIndex)
C_Commentator.RemoveAllOverrideNames()
C_Commentator.RemovePlayerOverrideName("originalPlayerName")
C_Commentator.RequestPlayerCooldownInfo(teamIndex, playerIndex)
C_Commentator.ResetFoVTarget()
C_Commentator.ResetSeriesScores("teamName1", "teamName2")
C_Commentator.ResetSettings()
C_Commentator.ResetTrackedAuras()
C_Commentator.SetAdditionalCameraWeight(teamIndex, playerIndex, weight)
C_Commentator.SetAdditionalCameraWeightByToken(unitToken, weight)
C_Commentator.SetBlocklistedAuras(spellIDs)
C_Commentator.SetBlocklistedCooldowns(specID, spellIDs)
C_Commentator.SetBlocklistedItemCooldowns(itemIDs)
C_Commentator.SetCamera(xPos, yPos, zPos, yaw, pitch, roll, fov)
C_Commentator.SetCameraCollision(collide)
C_Commentator.SetCameraPosition(xPos, yPos, zPos, snapToLocation)
C_Commentator.SetCheatsEnabled(enableCheats)
C_Commentator.SetCommentatorHistory(history)
C_Commentator.SetDistanceBeforeForcedHorizontalConvergence(distance)
C_Commentator.SetDurationToForceHorizontalConvergence(ms)
C_Commentator.SetExcludeDistance(excludeDistance)
C_Commentator.SetFollowCameraSpeeds(elasticSpeed, minSpeed)
C_Commentator.SetHardlockWeight(weight)
C_Commentator.SetHorizontalAngleThresholdToSmooth(angle)
C_Commentator.SetLookAtLerpAmount(amount)
C_Commentator.SetMapAndInstanceIndex(mapIndex, instanceIndex)
C_Commentator.SetMouseDisabled(disabled)
C_Commentator.SetMoveSpeed(newSpeed)
C_Commentator.SetMsToHoldForHorizontalMovement(ms)
C_Commentator.SetMsToHoldForVerticalMovement(ms)
C_Commentator.SetMsToSmoothHorizontalChange(ms)
C_Commentator.SetMsToSmoothVerticalChange(ms)
C_Commentator.SetPositionLerpAmount(amount)
C_Commentator.SetRequestedDebuffCooldowns(specID, spellIDs)
C_Commentator.SetRequestedDefensiveCooldowns(specID, spellIDs)
C_Commentator.SetRequestedItemCooldowns(itemIDs)
C_Commentator.SetRequestedOffensiveCooldowns(specID, spellIDs)
C_Commentator.SetSeriesScore("teamName1", "teamName2", "scoringTeamName", score)
C_Commentator.SetSeriesScores("teamName1", "teamName2", score1, score2)
C_Commentator.SetSmartCameraLocked(locked)
C_Commentator.SetSmoothFollowTransitioning(enabled)
C_Commentator.SetSoftlockWeight(weight)
C_Commentator.SetSpeedFactor(factor)
C_Commentator.SetTargetHeightOffset(offset)
C_Commentator.SetUseSmartCamera(useSmartCamera)
C_Commentator.SnapCameraLookAtPoint()
C_Commentator.SpellUsesItemCharges(spellID)
C_Commentator.StartWargame(listID, teamSize, tournamentRules, "teamOneCaptain", "teamTwoCaptain")
C_Commentator.SwapTeamSides()
C_Commentator.ToggleCheats()
C_Commentator.UpdateMapInfo("targetPlayer")
C_Commentator.UpdatePlayerInfo()
C_Commentator.ZoomIn()
C_Commentator.ZoomIn_Position(zoomAmount)
C_Commentator.ZoomOut()
C_Commentator.ZoomOut_Position(zoomAmount)
COMMENTATOR_ENTER_WORLD
COMMENTATOR_HISTORY_FLUSHED
COMMENTATOR_IMMEDIATE_FOV_UPDATE: fov
COMMENTATOR_MAP_UPDATE
COMMENTATOR_PLAYER_NAME_OVERRIDE_UPDATE: "nameToOverride", "overrideName"
COMMENTATOR_PLAYER_UPDATE
COMMENTATOR_RESET_SETTINGS
COMMENTATOR_TEAM_NAME_UPDATE: "teamName"
COMMENTATOR_TEAMS_SWAPPED: swapped
CompactUnitFrames ✪
COMPACT_UNIT_FRAME_PROFILES_LOADED
ConfigurationWarnings ✪
C_ConfigurationWarnings.GetConfigurationWarningSeen(configurationWarning)
C_ConfigurationWarnings.GetConfigurationWarningString(configurationWarning)
C_ConfigurationWarnings.GetConfigurationWarnings(includeSeenWarnings)
C_ConfigurationWarnings.SetConfigurationWarningSeen(configurationWarning)
ConnectionScript ✪
CancelLogout()
ForceLogout()
ForceQuit()
GetNativeRealmID()
GetNetIpTypes()
GetNetStats()
GetRealmID()
GetRealmName()
IsOnTournamentRealm()
Logout()
Quit()
SelectedRealmName()
Console ✪
CalculateStringEditDistance(firstString, secondString)
ConsoleEcho("command", addToHistory, "prefix")
ConsoleExec("command", addToHistory)
ConsoleGetAllCommands()
ConsoleGetColorFromType(colorType)
ConsoleGetFontHeight()
ConsoleIsActive()
ConsolePrintAllMatchingCommands("partialCommandText")
ConsoleSetFontHeight(fontHeightInPixels)
SetConsoleKey("keystring")
CONSOLE_CLEAR
CONSOLE_COLORS_CHANGED
CONSOLE_FONT_SIZE_CHANGED
CONSOLE_LOG: "message"
CONSOLE_MESSAGE: "message", colorType
CVAR_UPDATE: "eventName", "value"
TOGGLE_CONSOLE: showConsole
ConsoleScriptCollection ✪
C_ConsoleScriptCollection.GetCollectionDataByID(collectionID)
C_ConsoleScriptCollection.GetCollectionDataByTag("collectionTag")
C_ConsoleScriptCollection.GetElements(collectionID)
C_ConsoleScriptCollection.GetScriptData(consoleScriptID)
Container ✪
C_Container.ContainerIDToInventoryID(containerID)
C_Container.ContainerRefundItemPurchase(containerIndex, slotIndex, isEquipped)
C_Container.GetBackpackAutosortDisabled()
C_Container.GetBackpackSellJunkDisabled()
C_Container.GetBagName(bagIndex)
C_Container.GetBagSlotFlag(bagIndex, flag)
C_Container.GetBankAutosortDisabled()
C_Container.GetContainerFreeSlots(containerIndex)
C_Container.GetContainerItemCooldown(containerIndex, slotIndex)
C_Container.GetContainerItemDurability(containerIndex, slotIndex)
C_Container.GetContainerItemEquipmentSetInfo(containerIndex, slotIndex)
C_Container.GetContainerItemID(containerIndex, slotIndex)
C_Container.GetContainerItemInfo(containerIndex, slotIndex)
C_Container.GetContainerItemLink(containerIndex, slotIndex)
C_Container.GetContainerItemPurchaseCurrency(containerIndex, slotIndex, itemIndex, isEquipped)
C_Container.GetContainerItemPurchaseInfo(containerIndex, slotIndex, isEquipped)
C_Container.GetContainerItemPurchaseItem(containerIndex, slotIndex, itemIndex, isEquipped)
C_Container.GetContainerItemQuestInfo(containerIndex, slotIndex)
C_Container.GetContainerNumFreeSlots(bagIndex)
C_Container.GetContainerNumSlots(containerIndex)
C_Container.GetInsertItemsLeftToRight()
C_Container.GetItemCooldown(itemID)
C_Container.GetMaxArenaCurrency()
C_Container.GetSortBagsRightToLeft()
C_Container.IsBattlePayItem(containerIndex, slotIndex)
C_Container.IsContainerFiltered(containerIndex)
C_Container.PickupContainerItem(containerIndex, slotIndex)
C_Container.PlayerHasHearthstone()
C_Container.SetBackpackAutosortDisabled(disable)
C_Container.SetBackpackSellJunkDisabled(disable)
C_Container.SetBagPortraitTexture(texture, bagIndex)
C_Container.SetBagSlotFlag(bagIndex, flag, isSet)
C_Container.SetBankAutosortDisabled(disable)
C_Container.SetInsertItemsLeftToRight(enable)
C_Container.SetItemSearch("searchString")
C_Container.SetSortBagsRightToLeft(enable)
C_Container.ShowContainerSellCursor(containerIndex, slotIndex)
C_Container.SocketContainerItem(containerIndex, slotIndex)
C_Container.SortAccountBankBags()
C_Container.SortBags()
C_Container.SortBankBags()
C_Container.SortReagentBankBags()
C_Container.SplitContainerItem(containerIndex, slotIndex, amount)
C_Container.UseContainerItem(containerIndex, slotIndex, unitToken, bankType, reagentBankOpen)
C_Container.UseHearthstone()
BAG_CLOSED: bagID
BAG_CONTAINER_UPDATE
BAG_NEW_ITEMS_UPDATED
BAG_OPEN: bagID
BAG_OVERFLOW_WITH_FULL_INVENTORY
BAG_SLOT_FLAGS_UPDATED: slot
BAG_UPDATE: bagID
BAG_UPDATE_COOLDOWN
BAG_UPDATE_DELAYED
EQUIP_BIND_REFUNDABLE_CONFIRM: slot, itemLocation
EQUIP_BIND_TRADEABLE_CONFIRM: slot, itemLocation
EXPAND_BAG_BAR_CHANGED: expandBagBar
INVENTORY_SEARCH_UPDATE
ITEM_LOCK_CHANGED: bagOrSlotIndex, slotIndex
ITEM_LOCKED: bagOrSlotIndex, slotIndex
ITEM_UNLOCKED: bagOrSlotIndex, slotIndex
USE_COMBINED_BAGS_CHANGED: useCombinedBags
ContentTracking ✪
C_ContentTracking.GetBestMapForTrackable(trackableType, trackableID, ignoreWaypoint)
C_ContentTracking.GetCollectableSourceTrackingEnabled()
C_ContentTracking.GetCollectableSourceTypes()
C_ContentTracking.GetCurrentTrackingTarget(type, id)
C_ContentTracking.GetEncounterTrackingInfo(journalEncounterID)
C_ContentTracking.GetNextWaypointForTrackable(trackableType, trackableID, uiMapID)
C_ContentTracking.GetObjectiveText(targetType, targetID, includeHyperlinks)
C_ContentTracking.GetTitle(trackableType, trackableID)
C_ContentTracking.GetTrackablesOnMap(trackableType, uiMapID)
C_ContentTracking.GetTrackedIDs(trackableType)
C_ContentTracking.GetVendorTrackingInfo(collectableEntryID)
C_ContentTracking.GetWaypointText(trackableType, trackableID)
C_ContentTracking.IsNavigable(trackableType, trackableID)
C_ContentTracking.IsTrackable(type, id)
C_ContentTracking.IsTracking(type, id)
C_ContentTracking.StartTracking(type, id)
C_ContentTracking.StopTracking(type, id, stopType)
C_ContentTracking.ToggleTracking(type, id, stopType)
CONTENT_TRACKING_IS_ENABLED_UPDATE: isEnabled
CONTENT_TRACKING_LIST_UPDATE
CONTENT_TRACKING_UPDATE: type, id, isTracked
TRACKABLE_INFO_UPDATE: type, id
TRACKING_TARGET_INFO_UPDATE: targetType, targetID
ContributionCollector ✪
C_ContributionCollector.Close()
C_ContributionCollector.Contribute(contributionID)
C_ContributionCollector.GetActive()
C_ContributionCollector.GetAtlases(contributionID)
C_ContributionCollector.GetBuffs(contributionID)
C_ContributionCollector.GetContributionAppearance(contributionID, contributionState)
C_ContributionCollector.GetContributionCollectorsForMap(uiMapID)
C_ContributionCollector.GetContributionResult(contributionID)
C_ContributionCollector.GetDescription(contributionID)
C_ContributionCollector.GetManagedContributionsForCreatureID(creatureID)
C_ContributionCollector.GetName(contributionID)
C_ContributionCollector.GetOrderIndex(contributionID)
C_ContributionCollector.GetRequiredContributionCurrency(contributionID)
C_ContributionCollector.GetRequiredContributionItem(contributionID)
C_ContributionCollector.GetRewardQuestID(contributionID)
C_ContributionCollector.GetState(contributionID)
C_ContributionCollector.HasPendingContribution(contributionID)
C_ContributionCollector.IsAwaitingRewardQuestData(contributionID)
CONTRIBUTION_CHANGED: state, result, "name", contributionID
CONTRIBUTION_COLLECTOR_PENDING: contributionID, isPending, result
CONTRIBUTION_COLLECTOR_UPDATE
CONTRIBUTION_COLLECTOR_UPDATE_SINGLE: contributionID
Covenant ✪
C_Covenants.GetActiveCovenantID()
C_Covenants.GetCovenantData(covenantID)
C_Covenants.GetCovenantIDs()
COVENANT_CHOSEN: covenantID
CovenantCallings ✪
C_CovenantCallings.AreCallingsUnlocked()
C_CovenantCallings.RequestCallings()
COVENANT_CALLINGS_UPDATED: callings
CovenantPreview ✪
C_CovenantPreview.CloseFromUI()
C_CovenantPreview.GetCovenantInfoForPlayerChoiceResponseID(playerChoiceResponseID)
COVENANT_PREVIEW_CLOSE
COVENANT_PREVIEW_OPEN: previewInfo
CovenantSanctumUI ✪
C_CovenantSanctumUI.CanAccessReservoir()
C_CovenantSanctumUI.CanDepositAnima()
C_CovenantSanctumUI.DepositAnima()
C_CovenantSanctumUI.EndInteraction()
C_CovenantSanctumUI.GetAnimaInfo()
C_CovenantSanctumUI.GetCurrentTalentTreeID()
C_CovenantSanctumUI.GetFeatures()
C_CovenantSanctumUI.GetRenownLevel()
C_CovenantSanctumUI.GetRenownLevels(covenantID)
C_CovenantSanctumUI.GetRenownRewardsForLevel(covenantID, renownLevel)
C_CovenantSanctumUI.GetSanctumType()
C_CovenantSanctumUI.GetSoulCurrencies()
C_CovenantSanctumUI.HasMaximumRenown()
C_CovenantSanctumUI.IsPlayerInRenownCatchUpMode()
C_CovenantSanctumUI.IsWeeklyRenownCapped()
C_CovenantSanctumUI.RequestCatchUpState()
COVENANT_RENOWN_CATCH_UP_STATE_UPDATE
COVENANT_SANCTUM_RENOWN_LEVEL_CHANGED: newRenownLevel, oldRenownLevel
CraftingOrderUI ✪
C_CraftingOrders.AreOrderNotesDisabled()
C_CraftingOrders.CalculateCraftingOrderPostingFee(skillLineAbilityID, orderType, orderDuration)
C_CraftingOrders.CanOrderSkillAbility(skillLineAbilityID)
C_CraftingOrders.CancelOrder(orderID)
C_CraftingOrders.ClaimOrder(orderID, profession)
C_CraftingOrders.CloseCrafterCraftingOrders()
C_CraftingOrders.CloseCustomerCraftingOrders()
C_CraftingOrders.FulfillOrder(orderID, "crafterNote", profession)
C_CraftingOrders.GetClaimedOrder()
C_CraftingOrders.GetCrafterBuckets()
C_CraftingOrders.GetCrafterOrders()
C_CraftingOrders.GetCraftingOrderTime()
C_CraftingOrders.GetCustomerCategories()
C_CraftingOrders.GetCustomerOptions(params)
C_CraftingOrders.GetCustomerOrders()
C_CraftingOrders.GetDefaultOrdersSkillLine()
C_CraftingOrders.GetMyOrders()
C_CraftingOrders.GetNumFavoriteCustomerOptions()
C_CraftingOrders.GetOrderClaimInfo(profession)
C_CraftingOrders.GetPersonalOrdersInfo()
C_CraftingOrders.HasFavoriteCustomerOptions()
C_CraftingOrders.IsCustomerOptionFavorited(recipeID)
C_CraftingOrders.ListMyOrders(request)
C_CraftingOrders.OpenCrafterCraftingOrders()
C_CraftingOrders.OpenCustomerCraftingOrders()
C_CraftingOrders.OrderCanBeRecrafted(orderID)
C_CraftingOrders.ParseCustomerOptions()
C_CraftingOrders.PlaceNewOrder(orderInfo)
C_CraftingOrders.RejectOrder(orderID, "crafterNote", profession)
C_CraftingOrders.ReleaseOrder(orderID, profession)
C_CraftingOrders.RequestCrafterOrders(request)
C_CraftingOrders.RequestCustomerOrders(request)
C_CraftingOrders.SetCustomerOptionFavorited(recipeID, favorited)
C_CraftingOrders.ShouldShowCraftingOrderTab()
C_CraftingOrders.SkillLineHasOrders(skillLineID)
C_CraftingOrders.UpdateIgnoreList()
CRAFTING_HOUSE_DISABLED
CRAFTINGORDERS_CAN_REQUEST
CRAFTINGORDERS_CLAIM_ORDER_RESPONSE: result, orderID
CRAFTINGORDERS_CLAIMED_ORDER_ADDED
CRAFTINGORDERS_CLAIMED_ORDER_REMOVED
CRAFTINGORDERS_CLAIMED_ORDER_UPDATED: orderID
CRAFTINGORDERS_CRAFT_ORDER_RESPONSE: result, orderID
CRAFTINGORDERS_CUSTOMER_FAVORITES_CHANGED
CRAFTINGORDERS_CUSTOMER_OPTIONS_PARSED
CRAFTINGORDERS_DISPLAY_CRAFTER_FULFILLED_MSG: "orderTypeString", "itemNameString", "playerNameString", tipAmount, quantityCrafted
CRAFTINGORDERS_FULFILL_ORDER_RESPONSE: result, orderID
CRAFTINGORDERS_HIDE_CRAFTER
CRAFTINGORDERS_HIDE_CUSTOMER
CRAFTINGORDERS_ORDER_CANCEL_RESPONSE: result
CRAFTINGORDERS_ORDER_PLACEMENT_RESPONSE: result
CRAFTINGORDERS_REJECT_ORDER_RESPONSE: result, orderID
CRAFTINGORDERS_RELEASE_ORDER_RESPONSE: result, orderID
CRAFTINGORDERS_SHOW_CRAFTER
CRAFTINGORDERS_SHOW_CUSTOMER
CRAFTINGORDERS_UNEXPECTED_ERROR
CRAFTINGORDERS_UPDATE_CUSTOMER_NAME: "customerName", orderID
CRAFTINGORDERS_UPDATE_ORDER_COUNT: orderType, numOrders
CRAFTINGORDERS_UPDATE_PERSONAL_ORDER_COUNTS
CRAFTINGORDERS_UPDATE_REWARDS: npcOrderRewards, orderID
CreatureInfo ✪
C_CreatureInfo.GetClassInfo(classID)
C_CreatureInfo.GetFactionInfo(raceID)
C_CreatureInfo.GetRaceInfo(raceID)
CurrencySystem ✪
C_CurrencyInfo.CanTransferCurrency(currencyID)
C_CurrencyInfo.DoesCurrentFilterRequireAccountCurrencyData()
C_CurrencyInfo.DoesWarModeBonusApply(currencyID)
C_CurrencyInfo.ExpandCurrencyList(index, expand)
C_CurrencyInfo.FetchCurrencyDataFromAccountCharacters(currencyID)
C_CurrencyInfo.FetchCurrencyTransferTransactions()
C_CurrencyInfo.GetAzeriteCurrencyID()
C_CurrencyInfo.GetBackpackCurrencyInfo(index)
C_CurrencyInfo.GetBasicCurrencyInfo(currencyType, quantity)
C_CurrencyInfo.GetCoinIcon(amount)
C_CurrencyInfo.GetCoinText(amount, "separator")
C_CurrencyInfo.GetCoinTextureString(amount, fontHeight)
C_CurrencyInfo.GetCostToTransferCurrency(currencyID, quantity)
C_CurrencyInfo.GetCurrencyContainerInfo(currencyType, quantity)
C_CurrencyInfo.GetCurrencyDescription(type)
C_CurrencyInfo.GetCurrencyFilter()
C_CurrencyInfo.GetCurrencyIDFromLink("currencyLink")
C_CurrencyInfo.GetCurrencyInfo(type)
C_CurrencyInfo.GetCurrencyInfoFromLink("link")
C_CurrencyInfo.GetCurrencyLink(type, amount)
C_CurrencyInfo.GetCurrencyListInfo(index)
C_CurrencyInfo.GetCurrencyListLink(index)
C_CurrencyInfo.GetCurrencyListSize()
C_CurrencyInfo.GetDragonIslesSuppliesCurrencyID()
C_CurrencyInfo.GetFactionGrantedByCurrency(currencyID)
C_CurrencyInfo.GetMaxTransferableAmountFromQuantity(currencyID, requestedQuantity)
C_CurrencyInfo.GetWarResourcesCurrencyID()
C_CurrencyInfo.IsAccountCharacterCurrencyDataReady()
C_CurrencyInfo.IsAccountTransferableCurrency(currencyID)
C_CurrencyInfo.IsAccountWideCurrency(currencyID)
C_CurrencyInfo.IsCurrencyContainer(currencyID, quantity)
C_CurrencyInfo.IsCurrencyTransferTransactionDataReady()
C_CurrencyInfo.PickupCurrency(type)
C_CurrencyInfo.PlayerHasMaxQuantity(currencyID)
C_CurrencyInfo.PlayerHasMaxWeeklyQuantity(currencyID)
C_CurrencyInfo.RequestCurrencyDataForAccountCharacters()
C_CurrencyInfo.RequestCurrencyFromAccountCharacter(sourceCharacterGUID, currencyID, quantity)
C_CurrencyInfo.SetCurrencyBackpack(index, backpack)
C_CurrencyInfo.SetCurrencyBackpackByID(currencyType, backpack)
C_CurrencyInfo.SetCurrencyFilter(filterType)
C_CurrencyInfo.SetCurrencyUnused(index, unused)
ACCOUNT_CHARACTER_CURRENCY_DATA_RECEIVED
ACCOUNT_MONEY
CURRENCY_DISPLAY_UPDATE: currencyType, quantity, quantityChange, quantityGainSource, destroyReason
CURRENCY_TRANSFER_FAILED: failureReason
CURRENCY_TRANSFER_LOG_UPDATE
PLAYER_MONEY
Cursor ✪
C_Cursor.GetCursorItem()
BATTLE_PET_CURSOR_CLEAR
CURSOR_CHANGED: isDefault, newCursorType, oldCursorType, oldCursorVirtualID
MOUNT_CURSOR_CLEAR
WORLD_CURSOR_TOOLTIP_UPDATE: anchorType
CVarScripts ✪
C_CVar.GetCVar("name")
C_CVar.GetCVarBitfield("name", index)
C_CVar.GetCVarBool("name")
C_CVar.GetCVarDefault("name")
C_CVar.GetCVarInfo("name")
C_CVar.RegisterCVar("name", "value")
C_CVar.ResetTestCVars()
C_CVar.SetCVar("name", "value")
C_CVar.SetCVarBitfield("name", index, value)
DateAndTime ✪
C_DateAndTime.AdjustTimeByDays(date, days)
C_DateAndTime.AdjustTimeByMinutes(date, minutes)
C_DateAndTime.AdjustTimeByMonths(date, months)
C_DateAndTime.CompareCalendarTime(lhsCalendarTime, rhsCalendarTime)
C_DateAndTime.GetCalendarTimeFromEpoch(epoch)
C_DateAndTime.GetCurrentCalendarTime()
C_DateAndTime.GetSecondsUntilDailyReset()
C_DateAndTime.GetSecondsUntilWeeklyReset()
C_DateAndTime.GetServerTimeLocal()
C_DateAndTime.GetWeeklyResetStartTime()
DeathAlert ✪
HARDCORE_DEATHS: "memberName"
DeathInfo ✪
C_DeathInfo.GetCorpseMapPosition(uiMapID)
C_DeathInfo.GetDeathReleasePosition(uiMapID)
C_DeathInfo.GetGraveyardsForMap(uiMapID)
C_DeathInfo.GetSelfResurrectOptions()
C_DeathInfo.UseSelfResurrectOption(optionType, id)
AREA_SPIRIT_HEALER_IN_RANGE
AREA_SPIRIT_HEALER_OUT_OF_RANGE
CEMETERY_PREFERENCE_UPDATED
CONFIRM_XP_LOSS
CORPSE_IN_INSTANCE
CORPSE_IN_RANGE
CORPSE_OUT_OF_RANGE
PLAYER_ALIVE
PLAYER_DEAD
PLAYER_SKINNED: hasFreeRepop
PLAYER_UNGHOST
REQUEST_CEMETERY_LIST_RESPONSE: isGossipTriggered
RESURRECT_REQUEST: "inviter"
SELF_RES_SPELL_CHANGED
DebugToggle ✪
ToggleAnimKitDisplay()
ToggleCollision()
ToggleCollisionDisplay()
ToggleDebugAIDisplay()
ToggleGravity()
TogglePlayerBounds()
TogglePortals()
ToggleTris()
DelvesUI ✪
C_DelvesUI.GetCompanionInfoForActivePlayer()
C_DelvesUI.GetCreatureDisplayInfoForCompanion(companionID)
C_DelvesUI.GetCurioLink(spellID, rarity)
C_DelvesUI.GetCurioNodeForCompanion(curioType, companionID)
C_DelvesUI.GetCurioRarityByTraitCondAccountElementID(traitCondAccountElementID)
C_DelvesUI.GetCurrentDelvesSeasonNumber()
C_DelvesUI.GetDelvesAffixSpellsForSeason()
C_DelvesUI.GetDelvesFactionForSeason()
C_DelvesUI.GetDelvesMinRequiredLevel()
C_DelvesUI.GetFactionForCompanion(companionID)
C_DelvesUI.GetModelSceneForCompanion(companionID)
C_DelvesUI.GetRoleNodeForCompanion(companionID)
C_DelvesUI.GetRoleSubtreeForCompanion(roleType, companionID)
C_DelvesUI.GetTraitTreeForCompanion(companionID)
C_DelvesUI.GetUnseenCuriosBySlotType(slotType, ownedCurioNodeIDs)
C_DelvesUI.HasActiveDelve(mapID)
C_DelvesUI.IsEligibleForActiveDelveRewards(unit)
C_DelvesUI.RequestPartyEligibilityForDelveTiers(gossipOption)
C_DelvesUI.SaveSeenCuriosBySlotType(slotType, ownedCurioNodeIDs)
ACTIVE_DELVE_DATA_UPDATE
DELVES_ACCOUNT_DATA_ELEMENT_CHANGED
PARTY_ELIGIBILITY_FOR_DELVE_TIERS_CHANGED: "playerName", maxEligibleLevel
SHOW_DELVES_COMPANION_CONFIGURATION_UI
SHOW_DELVES_DISPLAY_UI
WALK_IN_DATA_UPDATE
Deprecated_11_0_0 ✪
LEARNED_SPELL_IN_TAB: spellID, skillInfoIndex, isGuildPerkSpell
DuelInfo ✪
DUEL_FINISHED
DUEL_INBOUNDS
DUEL_OUTOFBOUNDS
DUEL_REQUESTED: "playerName"
DUEL_TO_THE_DEATH_REQUESTED: "playerName"
EditModeManager ✪
C_EditMode.ConvertLayoutInfoToString(layoutInfo)
C_EditMode.ConvertStringToLayoutInfo("layoutInfoAsString")
C_EditMode.GetAccountSettings()
C_EditMode.GetLayouts()
C_EditMode.IsValidLayoutName("name")
C_EditMode.OnEditModeExit()
C_EditMode.OnLayoutAdded(addedLayoutIndex, activateNewLayout, isLayoutImported)
C_EditMode.OnLayoutDeleted(deletedLayoutIndex)
C_EditMode.SaveLayouts(saveInfo)
C_EditMode.SetAccountSetting(setting, value)
C_EditMode.SetActiveLayout(activeLayout)
EDIT_MODE_LAYOUTS_UPDATED: layoutInfo, reconcileLayouts
EncounterInfo ✪
BOSS_KILL: encounterID, "encounterName"
DISABLE_LOW_LEVEL_RAID
ENABLE_LOW_LEVEL_RAID
ENCOUNTER_END: encounterID, "encounterName", difficultyID, groupSize, success
ENCOUNTER_START: encounterID, "encounterName", difficultyID, groupSize
INSTANCE_LOCK_START
INSTANCE_LOCK_STOP
INSTANCE_LOCK_WARNING
RAID_TARGET_UPDATE
UPDATE_INSTANCE_INFO
EncounterJournal ✪
C_EncounterJournal.GetDungeonEntrancesForMap(uiMapID)
C_EncounterJournal.GetEncounterJournalLink(linkType, ID, "displayText", difficultyID)
C_EncounterJournal.GetEncountersOnMap(uiMapID)
C_EncounterJournal.GetInstanceForGameMap(mapID)
C_EncounterJournal.GetLootInfo(id)
C_EncounterJournal.GetLootInfoByIndex(index, encounterIndex)
C_EncounterJournal.GetSectionIconFlags(sectionID)
C_EncounterJournal.GetSectionInfo(sectionID)
C_EncounterJournal.GetSlotFilter()
C_EncounterJournal.InitalizeSelectedTier()
C_EncounterJournal.InstanceHasLoot(instanceID)
C_EncounterJournal.IsEncounterComplete(journalEncounterID)
C_EncounterJournal.OnClose()
C_EncounterJournal.OnOpen()
C_EncounterJournal.ResetSlotFilter()
C_EncounterJournal.SetPreviewMythicPlusLevel(level)
C_EncounterJournal.SetPreviewPvpTier(tier)
C_EncounterJournal.SetSlotFilter(filterSlot)
C_EncounterJournal.SetTab(tabIdx)
EJ_DIFFICULTY_UPDATE: difficultyID
EJ_LOOT_DATA_RECIEVED: itemID
EndOfMatchUI ✪
C_EndOfMatchUI.GetEndOfMatchDetails()
SHOW_END_OF_MATCH_UI
EquipmentSet ✪
C_EquipmentSet.AssignSpecToEquipmentSet(equipmentSetID, specIndex)
C_EquipmentSet.CanUseEquipmentSets()
C_EquipmentSet.ClearIgnoredSlotsForSave()
C_EquipmentSet.CreateEquipmentSet("equipmentSetName", "icon")
C_EquipmentSet.DeleteEquipmentSet(equipmentSetID)
C_EquipmentSet.EquipmentSetContainsLockedItems(equipmentSetID)
C_EquipmentSet.GetEquipmentSetAssignedSpec(equipmentSetID)
C_EquipmentSet.GetEquipmentSetForSpec(specIndex)
C_EquipmentSet.GetEquipmentSetID("equipmentSetName")
C_EquipmentSet.GetEquipmentSetIDs()
C_EquipmentSet.GetEquipmentSetInfo(equipmentSetID)
C_EquipmentSet.GetIgnoredSlots(equipmentSetID)
C_EquipmentSet.GetItemIDs(equipmentSetID)
C_EquipmentSet.GetItemLocations(equipmentSetID)
C_EquipmentSet.GetNumEquipmentSets()
C_EquipmentSet.IgnoreSlotForSave(slot)
C_EquipmentSet.IsSlotIgnoredForSave(slot)
C_EquipmentSet.ModifyEquipmentSet(equipmentSetID, "newName", "newIcon")
C_EquipmentSet.PickupEquipmentSet(equipmentSetID)
C_EquipmentSet.SaveEquipmentSet(equipmentSetID, "icon")
C_EquipmentSet.UnassignEquipmentSetSpec(equipmentSetID)
C_EquipmentSet.UnignoreSlotForSave(slot)
C_EquipmentSet.UseEquipmentSet(equipmentSetID)
EQUIPMENT_SETS_CHANGED
EQUIPMENT_SWAP_FINISHED: result, setID
EQUIPMENT_SWAP_PENDING
TRANSMOG_OUTFITS_CHANGED
EventSchedulerUI ✪
C_EventScheduler.ClearReminder("eventKey")
C_EventScheduler.GetActiveContinentName()
C_EventScheduler.GetEventUiMapID(areaPoiID)
C_EventScheduler.GetEventZoneName(areaPoiID)
C_EventScheduler.GetOngoingEvents()
C_EventScheduler.GetScheduledEvents()
C_EventScheduler.HasData()
C_EventScheduler.HasSavedReminders()
C_EventScheduler.RequestEvents()
C_EventScheduler.SetReminder("eventKey")
EVENT_SCHEDULER_UPDATE
EventUtils ✪
C_EventUtils.IsEventValid("eventName")
C_EventUtils.NotifySettingsLoaded()
SETTINGS_LOADED
Expansion ✪
CanUpgradeExpansion()
DoesCurrentLocaleSellExpansionLevels()
GetAccountExpansionLevel()
GetClientDisplayExpansionLevel()
GetCurrentRegionName()
GetExpansionDisplayInfo(expansionLevel)
GetExpansionForLevel(playerLevel)
GetExpansionLevel()
GetExpansionTrialInfo()
GetMaxLevelForExpansionLevel(expansionLevel)
GetMaxLevelForLatestExpansion()
GetMaxLevelForPlayerExpansion()
GetMaximumExpansionLevel()
GetMinimumExpansionLevel()
GetNumExpansions()
GetServerExpansionLevel()
IsDemonHunterAvailable()
IsExpansionTrial()
IsTrialAccount()
IsVeteranTrialAccount()
SendSubscriptionInterstitialResponse(response)
MAX_EXPANSION_LEVEL_UPDATED
MIN_EXPANSION_LEVEL_UPDATED
SHOW_SUBSCRIPTION_INTERSTITIAL: type
ExpansionInfo ✪
ClassicExpansionAtLeast(expansionLevel)
ClassicExpansionAtMost(expansionLevel)
GetClassicExpansionLevel()
ExpansionTrial ✪
C_ExpansionTrial.OnTrialLevelUpDialogClicked()
C_ExpansionTrial.OnTrialLevelUpDialogShown()
FogOfWar ✪
C_FogOfWar.GetFogOfWarForMap(uiMapID)
C_FogOfWar.GetFogOfWarInfo(fogOfWarID)
FOG_OF_WAR_UPDATED
Font ✪
CreateFontFamily("name", members)
GetFontInfo(fontObject)
GetFonts()
FrameScript ✪
CreateWindow(popupStyle, topMost)
GetCallstackHeight()
GetCurrentEventID()
GetErrorCallstackHeight()
GetEventTime(eventProfileIndex)
RunScript("text")
SetErrorCallstackHeight(height)
FriendList ✪
C_FriendList.AddFriend("name", "notes")
C_FriendList.AddIgnore("name")
C_FriendList.AddOrDelIgnore("name")
C_FriendList.AddOrRemoveFriend("name", "notes")
C_FriendList.DelIgnore("name")
C_FriendList.DelIgnoreByIndex(index)
C_FriendList.GetFriendInfo("name")
C_FriendList.GetFriendInfoByIndex(index)
C_FriendList.GetIgnoreName(index)
C_FriendList.GetNumFriends()
C_FriendList.GetNumIgnores()
C_FriendList.GetNumOnlineFriends()
C_FriendList.GetNumWhoResults()
C_FriendList.GetSelectedFriend()
C_FriendList.GetSelectedIgnore()
C_FriendList.GetWhoInfo(index)
C_FriendList.IsFriend(guid)
C_FriendList.IsIgnored("token")
C_FriendList.IsIgnoredByGuid(guid)
C_FriendList.IsOnIgnoredList("token")
C_FriendList.RemoveFriend("name")
C_FriendList.RemoveFriendByIndex(index)
C_FriendList.SendWho("filter", origin)
C_FriendList.SetFriendNotes("name", "notes")
C_FriendList.SetFriendNotesByIndex(index, "notes")
C_FriendList.SetSelectedFriend(index)
C_FriendList.SetSelectedIgnore(index)
C_FriendList.SetWhoToUi(whoToUi)
C_FriendList.ShowFriends()
C_FriendList.SortWho("sorting")
BATTLETAG_INVITE_SHOW: "name"
BN_BLOCK_FAILED_TOO_MANY: "blockType"
BN_BLOCK_LIST_UPDATED
BN_CHAT_WHISPER_UNDELIVERABLE: senderID
BN_CONNECTED: suppressNotification
BN_CUSTOM_MESSAGE_CHANGED: id
BN_CUSTOM_MESSAGE_LOADED
BN_DISCONNECTED: result, suppressNotification
BN_FRIEND_ACCOUNT_OFFLINE: friendId, isCompanionApp
BN_FRIEND_ACCOUNT_ONLINE: friendId, isCompanionApp
BN_FRIEND_INFO_CHANGED: friendIndex
BN_FRIEND_INVITE_ADDED: accountID
BN_FRIEND_INVITE_LIST_INITIALIZED: listSize
BN_FRIEND_INVITE_REMOVED
BN_FRIEND_LIST_SIZE_CHANGED: accountID
BN_INFO_CHANGED
BN_REQUEST_FOF_SUCCEEDED
FRIENDLIST_UPDATE
IGNORELIST_UPDATE
MUTELIST_UPDATE
NEW_MATCHMAKING_PARTY_INVITE
REJECTED_MATCHMAKING_PARTY_INVITE: "name"
WHO_LIST_UPDATE
GameCursor ✪
ClearCursor()
ClearCursorHoveredItem()
CursorHasItem()
CursorHasMacro()
CursorHasMoney()
CursorHasSpell()
DeleteCursorItem()
DropCursorMoney()
EquipCursorItem(slot)
GetCursorInfo()
GetCursorMoney()
PickupPlayerMoney(amount)
ResetCursor()
SellCursorItem()
SetCursor("name")
SetCursorHoveredItem(item)
SetCursorHoveredItemTradeItem(enabled)
SetCursorVirtualItem(itemInfo, cursorType)
GameEnvironmentManager ✪
C_GameEnvironmentManager.GetCurrentEventRealmQueues()
C_GameEnvironmentManager.GetCurrentGameEnvironment()
C_GameEnvironmentManager.RequestGameEnvironment(gameEnvironment)
EVENT_REALM_QUEUES_UPDATED: gameEnvironment
GAME_ENVIRONMENT_SWITCHED: gameEnvironment
GameError ✪
GetGameMessageInfo(gameErrorIndex)
NotWhileDeadError()
GamePad ✪
C_GamePad.AddSDLMapping(platform, "mapping")
C_GamePad.ApplyConfigs()
C_GamePad.AxisIndexToConfigName(axisIndex)
C_GamePad.ButtonBindingToIndex("bindingName")
C_GamePad.ButtonIndexToBinding(buttonIndex)
C_GamePad.ButtonIndexToConfigName(buttonIndex)
C_GamePad.ClearLedColor()
C_GamePad.DeleteConfig(configID)
C_GamePad.GetActiveDeviceID()
C_GamePad.GetAllConfigIDs()
C_GamePad.GetAllDeviceIDs()
C_GamePad.GetCombinedDeviceID()
C_GamePad.GetConfig(configID)
C_GamePad.GetDeviceMappedState(deviceID)
C_GamePad.GetDeviceRawState(deviceID)
C_GamePad.GetLedColor()
C_GamePad.GetPowerLevel(deviceID)
C_GamePad.IsEnabled()
C_GamePad.SetConfig(config)
C_GamePad.SetLedColor(color)
C_GamePad.SetVibration("vibrationType", intensity)
C_GamePad.StickIndexToConfigName(stickIndex)
C_GamePad.StopVibration()
GAME_PAD_ACTIVE_CHANGED: isActive
GAME_PAD_CONFIGS_CHANGED
GAME_PAD_CONNECTED
GAME_PAD_DISCONNECTED
GAME_PAD_POWER_CHANGED: powerLevel
GameRules ✪
C_GameRules.GetGameRuleAsFloat(gameRule, decimalPlaces)
C_GameRules.GetGameRuleAsFrameStrata(gameRule)
C_GameRules.IsGameRuleActive(gameRule)
GameUI ✪
SetInWorldUIVisibility(visible)
SetUIVisibility(visible)
GarrisonInfo ✪
C_Garrison.AddFollowerToMission(missionID, followerID, boardIndex)
C_Garrison.GetAutoCombatDamageClassValues()
C_Garrison.GetAutoMissionBoardState(missionID)
C_Garrison.GetAutoMissionEnvironmentEffect(missionID)
C_Garrison.GetAutoMissionTargetingInfo(missionID, followerID, casterBoardIndex)
C_Garrison.GetAutoMissionTargetingInfoForSpell(missionID, autoCombatSpellID, casterBoardIndex)
C_Garrison.GetAutoTroops(followerType)
C_Garrison.GetCombatLogSpellInfo(autoCombatSpellID)
C_Garrison.GetCurrentCypherEquipmentLevel()
C_Garrison.GetCurrentGarrTalentTreeFriendshipFactionID()
C_Garrison.GetCurrentGarrTalentTreeID()
C_Garrison.GetCyphersToNextEquipmentLevel()
C_Garrison.GetFollowerAutoCombatSpells(garrFollowerID, followerLevel)
C_Garrison.GetFollowerAutoCombatStats(garrFollowerID)
C_Garrison.GetFollowerMissionCompleteInfo(followerID)
C_Garrison.GetGarrisonPlotsInstancesForMap(uiMapID)
C_Garrison.GetGarrisonTalentTreeCurrencyTypes(garrTalentTreeID)
C_Garrison.GetGarrisonTalentTreeType(garrTalentTreeID)
C_Garrison.GetMaxCypherEquipmentLevel()
C_Garrison.GetMissionCompleteEncounters(missionID)
C_Garrison.GetMissionDeploymentInfo(missionID)
C_Garrison.GetMissionEncounterIconInfo(missionID)
C_Garrison.GetTalentInfo(talentID)
C_Garrison.GetTalentPointsSpentInTalentTree(garrTalentTreeID)
C_Garrison.GetTalentTreeIDsByClassID(garrType, classID)
C_Garrison.GetTalentTreeInfo(treeID)
C_Garrison.GetTalentTreeResetInfo(garrTalentTreeID)
C_Garrison.GetTalentTreeTalentPointResearchInfo(garrTalentID, researchRank, garrTalentTreeID, talentPointIndex, isRespec)
C_Garrison.GetTalentUnlockWorldQuest(talentID)
C_Garrison.HasAdventures()
C_Garrison.IsAtGarrisonMissionNPC()
C_Garrison.IsEnvironmentCountered(missionID)
C_Garrison.IsFollowerOnCompletedMission(followerID)
C_Garrison.IsLandingPageMinimapButtonVisible(garrType)
C_Garrison.IsTalentConditionMet(talentID)
C_Garrison.RegenerateCombatLog(missionID)
C_Garrison.RemoveFollowerFromMission(missionID, followerID, boardIndex)
C_Garrison.RushHealAllFollowers(followerType)
C_Garrison.RushHealFollower(garrFollowerID)
C_Garrison.SetAutoCombatSpellFastForward(state)
GARRISON_ARCHITECT_CLOSED
GARRISON_ARCHITECT_OPENED: followerTypeID
GARRISON_BUILDING_ACTIVATABLE: "buildingName", garrisonType
GARRISON_BUILDING_ACTIVATED: garrisonPlotInstanceID, garrisonBuildingID
GARRISON_BUILDING_ERROR
GARRISON_BUILDING_LIST_UPDATE: categoryID
GARRISON_BUILDING_PLACED: garrisonPlotInstanceID, newPlacement
GARRISON_BUILDING_REMOVED: garrPlotInstanceID, garrBuildingID
GARRISON_BUILDING_UPDATE: garrisonBuildingID, garrPlotInstanceID
GARRISON_FOLLOWER_ADDED: followerDbID, "followerName", "followerClassName", followerLevel, followerQuality, isUpgraded, textureKit, followerTypeID
GARRISON_FOLLOWER_CATEGORIES_UPDATED
GARRISON_FOLLOWER_DURABILITY_CHANGED: garrFollowerTypeID, followerDbID, followerDurability
GARRISON_FOLLOWER_HEALED: followerID
GARRISON_FOLLOWER_LIST_UPDATE: followerTypeID
GARRISON_FOLLOWER_REMOVED: followerTypeID
GARRISON_FOLLOWER_UPGRADED: followerDbID
GARRISON_FOLLOWER_XP_CHANGED: garrFollowerTypeID, followerDbID, xpChange, oldFollowerXp, oldFollowerLevel, oldFollowerQuality
GARRISON_HIDE_LANDING_PAGE
GARRISON_INVASION_AVAILABLE
GARRISON_INVASION_UNAVAILABLE
GARRISON_LANDINGPAGE_SHIPMENTS
GARRISON_MISSION_AREA_BONUS_ADDED: garrisonMissonBonusAbilityID
GARRISON_MISSION_BONUS_ROLL_COMPLETE: missionID, success
GARRISON_MISSION_COMPLETE_RESPONSE: missionID, canComplete, success, bonusRollSuccess, followerDeaths, autoCombatResult
GARRISON_MISSION_FINISHED: followerTypeID, missionID
GARRISON_MISSION_LIST_UPDATE: garrFollowerTypeID
GARRISON_MISSION_NPC_CLOSED
GARRISON_MISSION_NPC_OPENED: followerTypeID
GARRISON_MISSION_REWARD_INFO: missionID, followerDbID
GARRISON_MISSION_STARTED: garrFollowerTypeID, missionID
GARRISON_MONUMENT_CLOSE_UI
GARRISON_MONUMENT_LIST_LOADED: success
GARRISON_MONUMENT_REPLACED: success
GARRISON_MONUMENT_SELECTED_TROPHY_ID_LOADED: success
GARRISON_MONUMENT_SHOW_UI
GARRISON_RANDOM_MISSION_ADDED: followerTypeID, missionID
GARRISON_RECALL_PORTAL_LAST_USED_TIME: success, recallPortalLastUsedTime
GARRISON_RECALL_PORTAL_USED: success
GARRISON_RECRUIT_FOLLOWER_RESULT
GARRISON_RECRUITMENT_FOLLOWERS_GENERATED
GARRISON_RECRUITMENT_NPC_CLOSED
GARRISON_RECRUITMENT_NPC_OPENED: followerTypeID
GARRISON_RECRUITMENT_READY
GARRISON_SHIPMENT_RECEIVED
GARRISON_SHIPYARD_NPC_CLOSED
GARRISON_SHIPYARD_NPC_OPENED: followerTypeID
GARRISON_SHOW_LANDING_PAGE
GARRISON_SPEC_GROUP_UPDATED: garrTypeID, specID
GARRISON_SPEC_GROUPS_CLEARED: garrTypeID
GARRISON_TALENT_COMPLETE: garrTypeID, doAlert
GARRISON_TALENT_EVENT_UPDATE: eventType, eventID
GARRISON_TALENT_NPC_CLOSED
GARRISON_TALENT_NPC_OPENED: garrisonTypeID, garrisonTalentTreeID
GARRISON_TALENT_RESEARCH_STARTED: garrTypeID, garrisonTalentTreeID, garrTalentID
GARRISON_TALENT_UNLOCKS_RESULT
GARRISON_TALENT_UPDATE: garrTypeID
GARRISON_TRADESKILL_NPC_CLOSED
GARRISON_UPDATE
GARRISON_UPGRADEABLE_RESULT: garrisonUpgradeable
GARRISON_USE_PARTY_GARRISON_CHANGED
SHIPMENT_CRAFTER_CLOSED
SHIPMENT_CRAFTER_INFO: success, shipmentCount, maxShipments, ownedShipments, plotInstanceID
SHIPMENT_CRAFTER_OPENED: charShipmentContainerID
SHIPMENT_CRAFTER_REAGENT_UPDATE
SHIPMENT_UPDATE: shipmentStarted, hasAttachedFollower
GenericWidgetDisplay ✪
C_GenericWidgetDisplay.Acknowledge()
C_GenericWidgetDisplay.Close()
GENERIC_WIDGET_DISPLAY_SHOW: info
Glue ✪
C_Glue.IsFirstLoadThisSession()
C_Glue.IsOnGlueScreen()
ACCOUNT_CVARS_LOADED
GlyphInfo ✪
ACTIVATE_GLYPH: spellID
CANCEL_GLYPH_CAST
USE_GLYPH: spellID
GMTicketInfo ✪
GM_PLAYER_INFO: "name", "info"
ITEM_RESTORATION_BUTTON_STATUS
PETITION_CLOSED
PETITION_SHOW
PLAYER_REPORT_SUBMITTED: invitedByGUID
QUICK_TICKET_SYSTEM_STATUS
QUICK_TICKET_THROTTLE_CHANGED
UPDATE_WEB_TICKET: hasTicket, numTickets, ticketStatus, caseIndex, waitTimeMinutes, "waitMessage", "caseTitle", "caseDescription"
GossipInfo ✪
C_GossipInfo.CloseGossip()
C_GossipInfo.ForceGossip()
C_GossipInfo.GetActiveDelveGossip()
C_GossipInfo.GetActiveQuests()
C_GossipInfo.GetAvailableQuests()
C_GossipInfo.GetCompletedOptionDescriptionString()
C_GossipInfo.GetCustomGossipDescriptionString()
C_GossipInfo.GetFriendshipReputation(friendshipFactionID)
C_GossipInfo.GetFriendshipReputationRanks(friendshipFactionID)
C_GossipInfo.GetGossipDelveMapID()
C_GossipInfo.GetNumActiveQuests()
C_GossipInfo.GetNumAvailableQuests()
C_GossipInfo.GetOptionUIWidgetSetsAndTypesByOptionID(gossipOptionID)
C_GossipInfo.GetOptions()
C_GossipInfo.GetPoiForUiMapID(uiMapID)
C_GossipInfo.GetPoiInfo(uiMapID, gossipPoiID)
C_GossipInfo.GetText()
C_GossipInfo.RefreshOptions()
C_GossipInfo.SelectActiveQuest(optionID)
C_GossipInfo.SelectAvailableQuest(optionID)
C_GossipInfo.SelectOption(optionID, "text", confirmed)
C_GossipInfo.SelectOptionByIndex(optionID, "text", confirmed)
DYNAMIC_GOSSIP_POI_UPDATED
GOSSIP_CLOSED: interactionIsContinuing
GOSSIP_CONFIRM: gossipID, "text", cost
GOSSIP_CONFIRM_CANCEL
GOSSIP_ENTER_CODE: gossipID
GOSSIP_OPTIONS_REFRESHED
GOSSIP_SHOW: uiTextureKit
GuildBank ✪
C_GuildBank.IsGuildBankEnabled()
GUILDBANK_ITEM_LOCK_CHANGED
GUILDBANK_TEXT_CHANGED: guildBankTab
GUILDBANK_UPDATE_MONEY
GUILDBANK_UPDATE_TABS
GUILDBANK_UPDATE_TEXT: guildBankTab
GUILDBANK_UPDATE_WITHDRAWMONEY
GUILDBANKBAGSLOTS_CHANGED
GUILDBANKFRAME_CLOSED
GUILDBANKFRAME_OPENED
GUILDBANKLOG_UPDATE
GuildInfo ✪
C_GuildInfo.AreGuildEventsEnabled()
C_GuildInfo.CanEditOfficerNote()
C_GuildInfo.CanSpeakInGuildChat()
C_GuildInfo.CanViewOfficerNote()
C_GuildInfo.Demote("name")
C_GuildInfo.Disband()
C_GuildInfo.GetGuildNewsInfo(index)
C_GuildInfo.GetGuildRankOrder(guid)
C_GuildInfo.GetGuildTabardInfo(unit)
C_GuildInfo.GuildControlGetRankFlags(rankOrder)
C_GuildInfo.GuildRoster()
C_GuildInfo.Invite("name")
C_GuildInfo.IsEncounterGuildNewsEnabled()
C_GuildInfo.IsGuildOfficer()
C_GuildInfo.IsGuildRankAssignmentAllowed(guid, rankOrder)
C_GuildInfo.IsGuildReputationEnabled()
C_GuildInfo.Leave()
C_GuildInfo.MemberExistsByName("name")
C_GuildInfo.Promote("name")
C_GuildInfo.QueryGuildMemberRecipes(guildMemberGUID, skillLineID)
C_GuildInfo.QueryGuildMembersForRecipe(skillLineID, recipeSpellID, recipeLevel)
C_GuildInfo.RemoveFromGuild(guid)
C_GuildInfo.SetGuildRankOrder(guid, rankOrder)
C_GuildInfo.SetLeader("name")
C_GuildInfo.SetMOTD("motd")
C_GuildInfo.SetNote(guid, "note", isPublic)
C_GuildInfo.Uninvite("name")
CLOSE_TABARD_FRAME
DISABLE_DECLINE_GUILD_INVITE
ENABLE_DECLINE_GUILD_INVITE
GUILD_CHALLENGE_COMPLETED: challengeType, currentCount, maxCount, goldAwarded
GUILD_CHALLENGE_UPDATED
GUILD_EVENT_LOG_UPDATE
GUILD_INVITE_CANCEL
GUILD_INVITE_REQUEST: "inviter", "guildName", guildAchievementPoints, "oldGuildName", isNewGuild, tabardInfo
GUILD_MOTD: "motdText"
GUILD_NEWS_UPDATE
GUILD_PARTY_STATE_UPDATED: inGuildParty
GUILD_RANKS_UPDATE
GUILD_RECIPE_KNOWN_BY_MEMBERS
GUILD_REGISTRAR_CLOSED
GUILD_REGISTRAR_SHOW
GUILD_RENAME_REQUIRED: flagSet
GUILD_REWARDS_LIST
GUILD_REWARDS_LIST_UPDATE
GUILD_ROSTER_UPDATE: canRequestRosterUpdate
GUILD_TRADESKILL_UPDATE
GUILDTABARD_UPDATE
OPEN_TABARD_FRAME
PLAYER_GUILD_UPDATE: unitTarget
REQUIRED_GUILD_RENAME_RESULT: success
TABARD_CANSAVE_CHANGED
TABARD_SAVE_PENDING
HeirloomInfo ✪
C_HeirloomInfo.AreAllCollectionFiltersChecked()
C_HeirloomInfo.AreAllSourceFiltersChecked()
C_HeirloomInfo.IsHeirloomSourceValid(source)
C_HeirloomInfo.IsUsingDefaultFilters()
C_HeirloomInfo.SetAllCollectionFilters(checked)
C_HeirloomInfo.SetAllSourceFilters(checked)
C_HeirloomInfo.SetDefaultFilters()
HEIRLOOM_UPGRADE_TARGETING_CHANGED: pendingHeirloomUpgradeSpellcast
HEIRLOOMS_UPDATED: itemID, "updateReason", hideUntilLearned
ImmersiveInteraction ✪
C_ImmersiveInteraction.HasImmersiveInteraction()
IMMERSIVE_INTERACTION_BEGIN
IMMERSIVE_INTERACTION_END
IncomingSummon ✪
C_IncomingSummon.HasIncomingSummon(unit)
C_IncomingSummon.IncomingSummonStatus(unit)
InGameNavigation ✪
C_Navigation.GetDistance()
C_Navigation.GetFrame()
C_Navigation.GetNearestPartyMemberToken()
C_Navigation.GetTargetState()
C_Navigation.HasValidScreenPosition()
C_Navigation.WasClampedToScreen()
NAVIGATION_DESTINATION_REACHED: isWaypoint
NAVIGATION_FRAME_CREATED: region
NAVIGATION_FRAME_DESTROYED
Input ✪
GetCursorDelta()
GetCursorPosition()
GetMouseButtonClicked()
GetMouseButtonName(button)
GetMouseFoci()
IsAltKeyDown()
IsControlKeyDown()
IsKeyDown("keyOrMouseName", excludeBindingState)
IsLeftAltKeyDown()
IsLeftControlKeyDown()
IsLeftMetaKeyDown()
IsLeftShiftKeyDown()
IsMetaKeyDown()
IsModifierKeyDown()
IsMouseButtonDown(button)
IsRightAltKeyDown()
IsRightControlKeyDown()
IsRightMetaKeyDown()
IsRightShiftKeyDown()
IsShiftKeyDown()
IsUsingGamepad()
IsUsingMouse()
Instance ✪
CanChangePlayerDifficulty()
CanMapChangeDifficulty(mapID)
CanShowResetInstances()
GetDifficultyInfo(difficultyID)
GetDungeonDifficultyID()
GetInstanceBootTimeRemaining()
GetInstanceInfo()
GetInstanceLockTimeRemaining()
GetInstanceLockTimeRemainingEncounter(encounterIndex)
GetLegacyRaidDifficultyID()
GetRaidDifficultyID()
IsInInstance()
IsLegacyDifficulty(difficultyID)
ResetInstances()
SetDungeonDifficultyID(difficultyID)
SetLegacyRaidDifficultyID(difficultyID, force)
SetRaidDifficultyID(difficultyID, force)
InstanceEncounter ✪
INSTANCE_ENCOUNTER_ADD_TIMER: timeRemaining
INSTANCE_ENCOUNTER_ENGAGE_UNIT
INSTANCE_ENCOUNTER_OBJECTIVE_COMPLETE: objectiveID
INSTANCE_ENCOUNTER_OBJECTIVE_START: objectiveID, objectiveProgress
INSTANCE_ENCOUNTER_OBJECTIVE_UPDATE: objectiveID, objectiveProgress
InterfaceFileManifest ✪
C_InterfaceFileManifest.GetInterfaceArtFiles()
InvasionInfo ✪
C_InvasionInfo.AreInvasionsAvailable()
C_InvasionInfo.GetInvasionForUiMapID(uiMapID)
C_InvasionInfo.GetInvasionInfo(invasionID)
C_InvasionInfo.GetInvasionTimeLeft(invasionID)
IslandsInfo ✪
ISLAND_AZERITE_GAIN: amount, gainedByPlayer, factionIndex, gainedBy, gainedFrom
IslandsQueue ✪
C_IslandsQueue.CloseIslandsQueueScreen()
C_IslandsQueue.GetIslandDifficultyInfo()
C_IslandsQueue.GetIslandsMaxGroupSize()
C_IslandsQueue.GetIslandsWeeklyQuestID()
C_IslandsQueue.QueueForIsland(difficultyID)
C_IslandsQueue.RequestPreloadRewardData(questId)
ISLANDS_QUEUE_CLOSE
ISLANDS_QUEUE_OPEN
Item ✪
C_Item.ActionBindsItem()
C_Item.BindEnchant()
C_Item.CanBeRefunded(itemLocation)
C_Item.CanItemTransmogAppearance(itemLoc)
C_Item.CanScrapItem(itemLoc)
C_Item.CanViewItemPowers(itemLoc)
C_Item.ConfirmBindOnUse()
C_Item.ConfirmNoRefundOnUse()
C_Item.ConfirmOnUse()
C_Item.DoesItemContainSpec(itemInfo, classID, specID)
C_Item.DoesItemExist(emptiableItemLocation)
C_Item.DoesItemExistByID(itemInfo)
C_Item.DoesItemMatchBonusTreeReplacement(itemLoc)
C_Item.DoesItemMatchTargetEnchantingSpell(itemLoc)
C_Item.DoesItemMatchTrackJump(itemLoc)
C_Item.DropItemOnUnit(unitGUID)
C_Item.EndBoundTradeable("type")
C_Item.EndRefund(type)
C_Item.EquipItemByName(itemInfo, dstSlot)
C_Item.GetAppliedItemTransmogInfo(itemLoc)
C_Item.GetBaseItemTransmogInfo(itemLoc)
C_Item.GetCurrentItemLevel(itemLocation)
C_Item.GetCurrentItemTransmogInfo(itemLoc)
C_Item.GetDelvePreviewItemLink(itemID, context)
C_Item.GetDelvePreviewItemQuality(itemID, context)
C_Item.GetDetailedItemLevelInfo(itemInfo)
C_Item.GetFirstTriggeredSpellForItem(itemID, itemQuality)
C_Item.GetItemChildInfo(itemInfo, slotID)
C_Item.GetItemClassInfo(itemClassID)
C_Item.GetItemConversionOutputIcon(itemLoc)
C_Item.GetItemCooldown(itemInfo)
C_Item.GetItemCount(itemInfo, includeBank, includeUses, includeReagentBank, includeAccountBank)
C_Item.GetItemCreationContext(itemInfo)
C_Item.GetItemFamily(itemInfo)
C_Item.GetItemGUID(itemLocation)
C_Item.GetItemGem("hyperlink", index)
C_Item.GetItemGemID(itemInfo, index)
C_Item.GetItemID(itemLocation)
C_Item.GetItemIDByGUID(itemGUID)
C_Item.GetItemIDForItemInfo(itemInfo)
C_Item.GetItemIcon(itemLocation)
C_Item.GetItemIconByID(itemInfo)
C_Item.GetItemInfo(itemInfo)
C_Item.GetItemInfoInstant(itemInfo)
C_Item.GetItemInventorySlotInfo(inventorySlot)
C_Item.GetItemInventorySlotKey(inventorySlot)
C_Item.GetItemInventoryType(itemLocation)
C_Item.GetItemInventoryTypeByID(itemInfo)
C_Item.GetItemLearnTransmogSet(itemInfo)
C_Item.GetItemLink(itemLocation)
C_Item.GetItemLinkByGUID(itemGUID)
C_Item.GetItemLocation(itemGUID)
C_Item.GetItemMaxStackSize(itemLocation)
C_Item.GetItemMaxStackSizeByID(itemInfo)
C_Item.GetItemName(itemLocation)
C_Item.GetItemNameByID(itemInfo)
C_Item.GetItemNumAddedSockets(itemInfo)
C_Item.GetItemNumSockets(itemInfo)
C_Item.GetItemQuality(itemLocation)
C_Item.GetItemQualityByID(itemInfo)
C_Item.GetItemQualityColor(quality)
C_Item.GetItemSetInfo(setID)
C_Item.GetItemSpecInfo(itemInfo)
C_Item.GetItemSpell(itemInfo)
C_Item.GetItemStatDelta("itemLink1", "itemLink2")
C_Item.GetItemStats("itemLink")
C_Item.GetItemSubClassInfo(itemClassID, itemSubClassID)
C_Item.GetItemUniqueness(itemInfo)
C_Item.GetItemUniquenessByID(itemInfo)
C_Item.GetLimitedCurrencyItemInfo(itemInfo)
C_Item.GetSetBonusesForSpecializationByItemID(specID, itemID)
C_Item.GetStackCount(itemLocation)
C_Item.IsAnimaItemByID(itemInfo)
C_Item.IsArtifactPowerItem(itemInfo)
C_Item.IsBound(itemLocation)
C_Item.IsBoundToAccountUntilEquip(itemLocation)
C_Item.IsConsumableItem(itemInfo)
C_Item.IsCorruptedItem(itemInfo)
C_Item.IsCosmeticItem(itemInfo)
C_Item.IsCurioItem(itemInfo)
C_Item.IsCurrentItem(itemInfo)
C_Item.IsDressableItemByID(itemInfo)
C_Item.IsEquippableItem(itemInfo)
C_Item.IsEquippedItem(itemInfo)
C_Item.IsEquippedItemType("type")
C_Item.IsHarmfulItem(itemInfo)
C_Item.IsHelpfulItem(itemInfo)
C_Item.IsItemBindToAccountUntilEquip(itemInfo)
C_Item.IsItemConduit(itemLoc)
C_Item.IsItemConvertibleAndValidForPlayer(itemLoc)
C_Item.IsItemCorrupted(itemLoc)
C_Item.IsItemCorruptionRelated(itemLoc)
C_Item.IsItemCorruptionResistant(itemLoc)
C_Item.IsItemDataCached(itemLocation)
C_Item.IsItemDataCachedByID(itemInfo)
C_Item.IsItemGUIDInInventory(itemGUID)
C_Item.IsItemInRange(itemInfo, "targetToken")
C_Item.IsItemKeystoneByID(itemInfo)
C_Item.IsItemSpecificToPlayerClass(itemInfo)
C_Item.IsLocked(itemLocation)
C_Item.IsUsableItem(itemInfo)
C_Item.ItemHasRange(itemInfo)
C_Item.LockItem(itemLocation)
C_Item.LockItemByGUID(itemGUID)
C_Item.PickupItem(itemInfo)
C_Item.ReplaceEnchant()
C_Item.ReplaceTradeEnchant()
C_Item.ReplaceTradeskillEnchant()
C_Item.RequestLoadItemData(itemLocation)
C_Item.RequestLoadItemDataByID(itemInfo)
C_Item.UnlockItem(itemLocation)
C_Item.UnlockItemByGUID(itemGUID)
C_Item.UseItemByName(itemInfo, "target")
ACTION_WILL_BIND_ITEM
BIND_ENCHANT
CHARACTER_ITEM_FIXUP_NOTIFICATION: fixupVersion
CONFIRM_BEFORE_USE
CONVERT_TO_BIND_TO_ACCOUNT_CONFIRM
DELETE_ITEM_CONFIRM: "itemName", qualityID, bonding, questWarn
END_BOUND_TRADEABLE: "reason"
GET_ITEM_INFO_RECEIVED: itemID, success
ITEM_CHANGED: "previousHyperlink", "newHyperlink"
ITEM_CONVERSION_DATA_READY: itemGUID
ITEM_COUNT_CHANGED: itemID
ITEM_DATA_LOAD_RESULT: itemID, success
MERCHANT_CONFIRM_TRADE_TIMER_REMOVAL: "itemLink"
REPLACE_ENCHANT: "existingStr", "replacementStr"
REPLACE_TRADESKILL_ENCHANT: "existing", "replacement"
TRADE_REPLACE_ENCHANT: "existing", "replacement"
USE_BIND_CONFIRM
USE_NO_REFUND_CONFIRM
WEAPON_ENCHANT_CHANGED
ItemInteractionUI ✪
C_ItemInteraction.ClearPendingItem()
C_ItemInteraction.CloseUI()
C_ItemInteraction.GetChargeInfo()
C_ItemInteraction.GetItemConversionCurrencyCost(item)
C_ItemInteraction.GetItemInteractionInfo()
C_ItemInteraction.GetItemInteractionSpellId()
C_ItemInteraction.InitializeFrame()
C_ItemInteraction.PerformItemInteraction()
C_ItemInteraction.Reset()
C_ItemInteraction.SetPendingItem(item)
ITEM_INTERACTION_CHARGE_INFO_UPDATED
ITEM_INTERACTION_ITEM_SELECTION_UPDATED: itemLocation
ItemSocketInfo ✪
C_ItemSocketInfo.CompleteSocketing()
SOCKET_INFO_ACCEPT
SOCKET_INFO_BIND_CONFIRM
SOCKET_INFO_CLOSE
SOCKET_INFO_FAILURE
SOCKET_INFO_REFUNDABLE_CONFIRM
SOCKET_INFO_SUCCESS
SOCKET_INFO_UPDATE
ItemText ✪
ITEM_TEXT_BEGIN
ITEM_TEXT_CLOSED
ITEM_TEXT_READY
ITEM_TEXT_TRANSLATION: delay
ItemUpgrade ✪
C_ItemUpgrade.CanUpgradeItem(baseItem)
C_ItemUpgrade.ClearItemUpgrade()
C_ItemUpgrade.CloseItemUpgrade()
C_ItemUpgrade.GetHighWatermarkForItem(itemInfo)
C_ItemUpgrade.GetHighWatermarkForSlot(itemRedundancySlot)
C_ItemUpgrade.GetHighWatermarkSlotForItem(itemInfo)
C_ItemUpgrade.GetItemHyperlink()
C_ItemUpgrade.GetItemUpgradeCurrentLevel()
C_ItemUpgrade.GetItemUpgradeEffect(effectIndex, numUpgradeLevels)
C_ItemUpgrade.GetItemUpgradeItemInfo()
C_ItemUpgrade.GetItemUpgradePvpItemLevelDeltaValues(numUpgradeLevels)
C_ItemUpgrade.GetNumItemUpgradeEffects()
C_ItemUpgrade.IsItemBound()
C_ItemUpgrade.SetItemUpgradeFromCursorItem()
C_ItemUpgrade.SetItemUpgradeFromLocation(itemToSet)
C_ItemUpgrade.UpgradeItem(numUpgrades)
ITEM_UPGRADE_FAILED
ITEM_UPGRADE_MASTER_SET_ITEM
KeyBindings ✪
C_KeyBindings.GetBindingIndex("action")
C_KeyBindings.GetCustomBindingType(bindingIndex)
MODIFIER_STATE_CHANGED: "key", down
UPDATE_BINDINGS
LegendaryCrafting ✪
C_LegendaryCrafting.CloseRuneforgeInteraction()
C_LegendaryCrafting.CraftRuneforgeLegendary(description)
C_LegendaryCrafting.GetRuneforgeItemPreviewInfo(baseItem, runeforgePowerID, modifiers)
C_LegendaryCrafting.GetRuneforgeLegendaryComponentInfo(runeforgeLegendary)
C_LegendaryCrafting.GetRuneforgeLegendaryCost(baseItem)
C_LegendaryCrafting.GetRuneforgeLegendaryCraftSpellID()
C_LegendaryCrafting.GetRuneforgeLegendaryCurrencies()
C_LegendaryCrafting.GetRuneforgeLegendaryUpgradeCost(runeforgeLegendary, upgradeItem)
C_LegendaryCrafting.GetRuneforgeModifierInfo(baseItem, powerID, addedModifierIndex, modifiers)
C_LegendaryCrafting.GetRuneforgeModifiers()
C_LegendaryCrafting.GetRuneforgePowerInfo(runeforgePowerID)
C_LegendaryCrafting.GetRuneforgePowerSlots(runeforgePowerID)
C_LegendaryCrafting.GetRuneforgePowers(baseItem, filter)
C_LegendaryCrafting.GetRuneforgePowersByClassSpecAndCovenant(classID, specID, covenantID, filter)
C_LegendaryCrafting.IsRuneforgeLegendary(item)
C_LegendaryCrafting.IsRuneforgeLegendaryMaxLevel(runeforgeLegendary)
C_LegendaryCrafting.IsUpgradeItemValidForRuneforgeLegendary(runeforgeLegendary, upgradeItem)
C_LegendaryCrafting.IsValidRuneforgeBaseItem(baseItem)
C_LegendaryCrafting.MakeRuneforgeCraftDescription(baseItem, runeforgePowerID, modifiers)
C_LegendaryCrafting.UpgradeRuneforgeLegendary(runeforgeLegendary, upgradeItem)
NEW_RUNEFORGE_POWER_ADDED: powerID
RUNEFORGE_LEGENDARY_CRAFTING_CLOSED
RUNEFORGE_LEGENDARY_CRAFTING_OPENED: isUpgrade
RUNEFORGE_POWER_INFO_UPDATED: powerID
LevelLink ✪
C_LevelLink.IsActionLocked(actionID)
C_LevelLink.IsSpellLocked(spellID)
LevelSquish ✪
C_LevelSquish.ConvertFollowerLevel(level, maxFollowerLevel)
C_LevelSquish.ConvertPlayerLevel(level)
LFGInfo ✪
C_LFGInfo.AreCrossFactionGroupQueuesAllowed(lfgDungeonID)
C_LFGInfo.CanPlayerUseGroupFinder()
C_LFGInfo.CanPlayerUseLFD()
C_LFGInfo.CanPlayerUseLFR()
C_LFGInfo.CanPlayerUsePVP()
C_LFGInfo.CanPlayerUsePremadeGroup()
C_LFGInfo.CanPlayerUseScenarioFinder()
C_LFGInfo.ConfirmLfgExpandSearch()
C_LFGInfo.DoesActivePartyMeetPremadeLaunchCount(lfgDungeonID)
C_LFGInfo.DoesCrossFactionQueueRequireFullPremade(lfgDungeonID)
C_LFGInfo.GetAllEntriesForCategory(category)
C_LFGInfo.GetDungeonInfo(lfgDungeonID)
C_LFGInfo.GetLFDLockStates()
C_LFGInfo.GetRoleCheckDifficultyDetails()
C_LFGInfo.HideNameFromUI(dungeonID)
C_LFGInfo.IsGroupFinderEnabled()
C_LFGInfo.IsInLFGFollowerDungeon()
C_LFGInfo.IsLFDEnabled()
C_LFGInfo.IsLFGFollowerDungeon(dungeonID)
C_LFGInfo.IsLFREnabled()
ISLAND_COMPLETED: mapID, winner
LFG_BOOT_PROPOSAL_UPDATE
LFG_COMPLETION_REWARD
LFG_ENABLED_STATE_CHANGED
LFG_INVALID_ERROR_MESSAGE: reason, subReason1, subReason2
LFG_LOCK_INFO_RECEIVED
LFG_OFFER_CONTINUE: "name", lfgDungeonsID, typeID
LFG_OPEN_FROM_GOSSIP: dungeonID
LFG_PROPOSAL_DONE
LFG_PROPOSAL_FAILED
LFG_PROPOSAL_SHOW
LFG_PROPOSAL_SUCCEEDED
LFG_PROPOSAL_UPDATE
LFG_QUEUE_STATUS_UPDATE
LFG_READY_CHECK_DECLINED: "name"
LFG_READY_CHECK_HIDE
LFG_READY_CHECK_PLAYER_IS_READY: "name"
LFG_READY_CHECK_SHOW: isRequeue
LFG_READY_CHECK_UPDATE
LFG_ROLE_CHECK_DECLINED
LFG_ROLE_CHECK_HIDE
LFG_ROLE_CHECK_ROLE_CHOSEN: "name", isTank, isHealer, isDamage
LFG_ROLE_CHECK_SHOW: isRequeue
LFG_ROLE_CHECK_UPDATE
LFG_ROLE_UPDATE
LFG_UPDATE
LFG_UPDATE_RANDOM_INFO
SHOW_LFG_EXPAND_SEARCH_PROMPT
UPDATE_LFG_LIST
WARFRONT_COMPLETED: mapID, winner
LFGList ✪
C_LFGList.CanActiveEntryUseAutoAccept()
C_LFGList.CanCreateQuestGroup(questID)
C_LFGList.CanCreateScenarioGroup(scenarioID)
C_LFGList.ClearApplicationTextFields()
C_LFGList.ClearCreationTextFields()
C_LFGList.ClearSearchTextFields()
C_LFGList.CopyActiveEntryInfoToCreationFields()
C_LFGList.CreateListing(createData)
C_LFGList.CreateScenarioListing(activityID, itemLevel, autoAccept, privateGroup, scenarioID)
C_LFGList.DoesEntryTitleMatchPrebuiltTitle(activityID, groupID, playstyle)
C_LFGList.GetActiveEntryInfo()
C_LFGList.GetActivityFullName(activityID, questID, showWarmode)
C_LFGList.GetActivityGroupInfo(groupID)
C_LFGList.GetActivityInfoTable(activityID, questID, showWarmode)
C_LFGList.GetAdvancedFilter()
C_LFGList.GetApplicantBestDungeonScore(localID, applicantIndex)
C_LFGList.GetApplicantDungeonScoreForListing(localID, applicantIndex, activityID)
C_LFGList.GetApplicantInfo(applicantID)
C_LFGList.GetApplicantPvpRatingInfoForListing(localID, applicantIndex, activityID)
C_LFGList.GetFilteredSearchResults()
C_LFGList.GetKeystoneForActivity(activityID)
C_LFGList.GetLfgCategoryInfo(categoryID)
C_LFGList.GetOwnedKeystoneActivityAndGroupAndLevel(getTimewalking)
C_LFGList.GetPlaystyleString(playstyle, activityInfo)
C_LFGList.GetPremadeGroupFinderStyle()
C_LFGList.GetSearchResultInfo(searchResultID)
C_LFGList.GetSearchResultLeaderInfo(searchResultID)
C_LFGList.GetSearchResultPlayerInfo(searchResultID, memberIndex)
C_LFGList.GetSearchResults()
C_LFGList.HasActiveEntryInfo()
C_LFGList.HasSearchResultInfo(searchResultID)
C_LFGList.IsPlayerAuthenticatedForLFG(activityCategoryID)
C_LFGList.IsPremadeGroupFinderEnabled()
C_LFGList.SaveAdvancedFilter(options)
C_LFGList.Search(categoryID, filter, preferredFilters, languageFilter, searchCrossFactionListings, advancedFilter, activityIDsFilter)
C_LFGList.SetEntryTitle(activityID, groupID, playstyle)
C_LFGList.SetSearchToActivity(activityID)
C_LFGList.SetSearchToQuestID(questID)
C_LFGList.SetSearchToScenarioID(scenarioID)
C_LFGList.UpdateListing(createData)
C_LFGList.ValidateRequiredDungeonScore(dungeonScore)
C_LFGList.ValidateRequiredPvpRatingForActivity(activityID, rating)
LFG_GROUP_DELISTED_LEADERSHIP_CHANGE: "listingName", automaticDelistTimeRemaining
LFG_LIST_ACTIVE_ENTRY_UPDATE: created
LFG_LIST_APPLICANT_LIST_UPDATED: newPendingEntry, newPendingEntryWithData
LFG_LIST_APPLICANT_UPDATED: applicantID
LFG_LIST_APPLICATION_STATUS_UPDATED: searchResultID, "newStatus", "oldStatus", groupName
LFG_LIST_AVAILABILITY_UPDATE
LFG_LIST_ENTRY_CREATION_FAILED
LFG_LIST_ENTRY_EXPIRED_TIMEOUT
LFG_LIST_ENTRY_EXPIRED_TOO_MANY_PLAYERS
LFG_LIST_JOINED_GROUP: searchResultID, groupName
LFG_LIST_SEARCH_FAILED: "reason"
LFG_LIST_SEARCH_RESULT_UPDATED: searchResultID
LFG_LIST_SEARCH_RESULTS_RECEIVED
LiveEvent ✪
C_LiveEvent.OnLiveEventBannerClicked(timerunningSeasonID)
C_LiveEvent.OnLiveEventPopupClicked(timerunningSeasonID)
LoadingScreen ✪
LOADING_SCREEN_DISABLED
LOADING_SCREEN_ENABLED
LobbyMatchmakerInfo ✪
C_LobbyMatchmakerInfo.AbandonQueue()
C_LobbyMatchmakerInfo.EnterQueue(playlistEntry)
C_LobbyMatchmakerInfo.GetCurrQueuePlaylistEntry()
C_LobbyMatchmakerInfo.GetCurrQueueState()
C_LobbyMatchmakerInfo.GetQueueFromMainlineEnabled()
C_LobbyMatchmakerInfo.GetQueueStartTime()
C_LobbyMatchmakerInfo.IsInQueue()
C_LobbyMatchmakerInfo.RespondToQueuePop(acceptQueue)
LOBBY_MATCHMAKER_QUEUE_ABANDONED
LOBBY_MATCHMAKER_QUEUE_ERROR
LOBBY_MATCHMAKER_QUEUE_EXPIRED
LOBBY_MATCHMAKER_QUEUE_POPPED
LOBBY_MATCHMAKER_QUEUE_STATUS_UPDATE
Locale ✪
GetAvailableLocaleInfo(ignoreLocaleRestrictions)
GetAvailableLocales(ignoreLocaleRestrictions)
GetCurrentRegion()
GetLocale()
GetOSLocale()
Localization ✪
BreakUpLargeNumbers(largeNumber, natural)
CaseAccentInsensitiveParse("name")
DeclineName("name", gender, declensionSet)
GetNumDeclensionSets("name", gender)
IsEuropeanNumbers()
LocalizedClassList(isFemale)
SetEuropeanNumbers(enabled)
Loot ✪
C_Loot.GetLootRollDuration(rollID)
C_Loot.IsLegacyLootModeEnabled()
AZERITE_EMPOWERED_ITEM_LOOTED: "itemLink"
BONUS_ROLL_ACTIVATE
BONUS_ROLL_DEACTIVATE
BONUS_ROLL_FAILED
BONUS_ROLL_RESULT: "typeIdentifier", "itemLink", quantity, specID, sex, personalLootToast, currencyID, isSecondaryResult, corrupted
BONUS_ROLL_STARTED
CANCEL_ALL_LOOT_ROLLS
CANCEL_LOOT_ROLL: rollID
CONFIRM_DISENCHANT_ROLL: rollID, rollType
CONFIRM_LOOT_ROLL: rollID, rollType, "confirmReason"
ENCOUNTER_LOOT_RECEIVED: encounterID, itemID, "itemLink", quantity, "itemName", "fileName"
GARRISON_MISSION_BONUS_ROLL_LOOT: itemID, quantity
ITEM_PUSH: bagSlot, iconFileID
LOOT_BIND_CONFIRM: lootSlot
LOOT_CLOSED
LOOT_ITEM_AVAILABLE: "itemTooltip", lootHandle
LOOT_ITEM_ROLL_WON: "itemLink", rollQuantity, rollType, roll, upgraded
LOOT_OPENED: autoLoot, isFromItem
LOOT_READY: autoloot
LOOT_ROLLS_COMPLETE: lootHandle
LOOT_SLOT_CHANGED: lootSlot
LOOT_SLOT_CLEARED: lootSlot
MAIN_SPEC_NEED_ROLL: rollID, roll, isWinning
OPEN_MASTER_LOOT_LIST
PET_BATTLE_LOOT_RECEIVED: "typeIdentifier", "itemLink", quantity
PLAYER_LOOT_SPEC_UPDATED
QUEST_CURRENCY_LOOT_RECEIVED: questID, currencyId, quantity
QUEST_LOOT_RECEIVED: questID, "itemLink", quantity
SHOW_LOOT_TOAST: "typeIdentifier", "itemLink", quantity, specID, sex, personalLootToast, toastMethod, lessAwesome, upgraded, corrupted
SHOW_LOOT_TOAST_LEGENDARY_LOOTED: "itemLink"
SHOW_LOOT_TOAST_UPGRADE: "itemLink", quantity, specID, sex, baseQuality, personalLootToast, lessAwesome
SHOW_PVP_FACTION_LOOT_TOAST: "typeIdentifier", "itemLink", quantity, specID, sex, personalLootToast, lessAwesome
SHOW_RATED_PVP_REWARD_TOAST: "typeIdentifier", "itemLink", quantity, specID, sex, personalLootToast, lessAwesome
START_LOOT_ROLL: rollID, rollTime, lootHandle
TRIAL_CAP_REACHED_MONEY
UPDATE_MASTER_LOOT_LIST
LootHistory ✪
C_LootHistory.GetAllEncounterInfos()
C_LootHistory.GetInfoForEncounter(encounterID)
C_LootHistory.GetLootHistoryTime()
C_LootHistory.GetSortedDropsForEncounter(encounterID)
C_LootHistory.GetSortedInfoForDrop(encounterID, lootListID)
LOOT_HISTORY_CLEAR_HISTORY
LOOT_HISTORY_GO_TO_ENCOUNTER: encounterID
LOOT_HISTORY_ONE_HUNDRED_ROLL: encounterID, lootListID
LOOT_HISTORY_UPDATE_DROP: encounterID, lootListID
LOOT_HISTORY_UPDATE_ENCOUNTER: encounterID
LootJournal ✪
C_LootJournal.GetItemSetItems(setID)
C_LootJournal.GetItemSets(classID, specID)
LOOT_JOURNAL_ITEM_UPDATE
LoreText ✪
C_LoreText.RequestLoreTextForCampaignID(campaignID)
LORE_TEXT_UPDATED_CAMPAIGN: campaignID, textEntries
LossOfControl ✪
C_LossOfControl.GetActiveLossOfControlData(index)
C_LossOfControl.GetActiveLossOfControlDataByUnit(unitToken, index)
C_LossOfControl.GetActiveLossOfControlDataCount()
C_LossOfControl.GetActiveLossOfControlDataCountByUnit(unitToken)
LOSS_OF_CONTROL_ADDED: unitTarget, effectIndex
LOSS_OF_CONTROL_COMMENTATOR_ADDED: victim, effectIndex
LOSS_OF_CONTROL_COMMENTATOR_UPDATE: victim
LOSS_OF_CONTROL_UPDATE: unitTarget
PLAYER_CONTROL_GAINED
PLAYER_CONTROL_LOST
MacOptions ✪
C_MacOptions.AreOSShortcutsDisabled()
C_MacOptions.GetGameBundleName()
C_MacOptions.HasNewStyleInputMonitoring()
C_MacOptions.IsInputMonitoringEnabled()
C_MacOptions.IsMicrophoneEnabled()
C_MacOptions.IsUniversalAccessEnabled()
C_MacOptions.OpenInputMonitoring()
C_MacOptions.OpenMicrophoneRequestDialogue()
C_MacOptions.OpenUniversalAccess()
C_MacOptions.SetOSShortcutsDisabled(disable)
MailInfo ✪
C_Mail.CanCheckInbox()
C_Mail.GetCraftingOrderMailInfo(inboxIndex)
C_Mail.HasInboxMoney(inboxIndex)
C_Mail.IsCommandPending()
C_Mail.SetOpeningAll(openingAll)
CLOSE_INBOX_ITEM: mailIndex
MAIL_CLOSED
MAIL_FAILED: itemID
MAIL_INBOX_UPDATE
MAIL_LOCK_SEND_ITEMS: attachSlot, "itemLink"
MAIL_SEND_INFO_UPDATE
MAIL_SEND_SUCCESS
MAIL_SHOW
MAIL_SUCCESS: itemID
MAIL_UNLOCK_SEND_ITEMS
SEND_MAIL_COD_CHANGED
SEND_MAIL_MONEY_CHANGED
UPDATE_PENDING_MAIL
MajorFactionsUI ✪
C_MajorFactions.GetCurrentRenownLevel(majorFactionID)
C_MajorFactions.GetMajorFactionData(majorFactionID)
C_MajorFactions.GetMajorFactionIDs(expansionID)
C_MajorFactions.GetMajorFactionRenownInfo(majorFactionID)
C_MajorFactions.GetRenownLevels(majorFactionID)
C_MajorFactions.GetRenownNPCFactionID()
C_MajorFactions.GetRenownRewardsForLevel(majorFactionID, renownLevel)
C_MajorFactions.HasMaximumRenown(majorFactionID)
C_MajorFactions.IsMajorFactionHiddenFromExpansionPage(majorFactionID)
C_MajorFactions.IsWeeklyRenownCapped(majorFactionID)
MAJOR_FACTION_INTERACTION_ENDED
MAJOR_FACTION_INTERACTION_STARTED
MAJOR_FACTION_RENOWN_LEVEL_CHANGED: majorFactionID, newRenownLevel, oldRenownLevel
MAJOR_FACTION_UNLOCKED: majorFactionID
MapExplorationInfo ✪
C_MapExplorationInfo.GetExploredAreaIDsAtPosition(uiMapID, normalizedPosition)
C_MapExplorationInfo.GetExploredMapTextures(uiMapID)
MAP_EXPLORATION_UPDATED
MapUI ✪
C_Map.CanSetUserWaypointOnMap(uiMapID)
C_Map.ClearUserWaypoint()
C_Map.CloseWorldMapInteraction()
C_Map.GetAreaInfo(areaID)
C_Map.GetBestMapForUnit(unitToken)
C_Map.GetBountySetMaps(bountySetID)
C_Map.GetFallbackWorldMapID()
C_Map.GetMapArtBackgroundAtlas(uiMapID)
C_Map.GetMapArtHelpTextPosition(uiMapID)
C_Map.GetMapArtID(uiMapID)
C_Map.GetMapArtLayerTextures(uiMapID, layerIndex)
C_Map.GetMapArtLayers(uiMapID)
C_Map.GetMapArtZoneTextPosition(uiMapID)
C_Map.GetMapBannersForMap(uiMapID)
C_Map.GetMapChildrenInfo(uiMapID, mapType, allDescendants)
C_Map.GetMapDisplayInfo(uiMapID)
C_Map.GetMapGroupID(uiMapID)
C_Map.GetMapGroupMembersInfo(uiMapGroupID)
C_Map.GetMapHighlightInfoAtPosition(uiMapID, x, y)
C_Map.GetMapHighlightPulseInfo(uiMapID)
C_Map.GetMapInfo(uiMapID)
C_Map.GetMapInfoAtPosition(uiMapID, x, y, ignoreZoneMapPositionData)
C_Map.GetMapLevels(uiMapID)
C_Map.GetMapLinksForMap(uiMapID)
C_Map.GetMapPosFromWorldPos(continentID, worldPosition, overrideUiMapID)
C_Map.GetMapRectOnMap(uiMapID, topUiMapID)
C_Map.GetMapWorldSize(uiMapID)
C_Map.GetPlayerMapPosition(uiMapID, unitToken)
C_Map.GetUserWaypoint()
C_Map.GetUserWaypointFromHyperlink("hyperlink")
C_Map.GetUserWaypointHyperlink()
C_Map.GetUserWaypointPositionForMap(uiMapID)
C_Map.GetWorldPosFromMapPos(uiMapID, mapPosition)
C_Map.HasUserWaypoint()
C_Map.IsCityMap(uiMapID)
C_Map.IsMapValidForNavBarDropdown(uiMapID)
C_Map.MapHasArt(uiMapID)
C_Map.RequestPreloadMap(uiMapID)
C_Map.SetUserWaypoint(point)
NEW_WMO_CHUNK
PLAYER_MAP_CHANGED: oldMapID, newMapID
USER_WAYPOINT_UPDATED
WORLD_MAP_OPEN: uiMapID
ZONE_CHANGED
ZONE_CHANGED_INDOORS
ZONE_CHANGED_NEW_AREA
MerchantFrame ✪
C_MerchantFrame.GetBuybackItemID(buybackSlotIndex)
C_MerchantFrame.GetItemInfo(index)
C_MerchantFrame.GetNumJunkItems()
C_MerchantFrame.IsMerchantItemRefundable(index)
C_MerchantFrame.IsSellAllJunkEnabled()
C_MerchantFrame.SellAllJunkItems()
MERCHANT_CLOSED
MERCHANT_FILTER_ITEM_UPDATE: itemID
MERCHANT_SHOW
MERCHANT_UPDATE
Minimap ✪
C_Minimap.CanTrackBattlePets()
C_Minimap.ClearAllTracking()
C_Minimap.ClearMinimapInsetInfo()
C_Minimap.GetDefaultTrackingValue(filterType)
C_Minimap.GetDrawGroundTextures()
C_Minimap.GetNumQuestPOIWorldEffects()
C_Minimap.GetNumTrackingTypes()
C_Minimap.GetObjectIconTextureCoords(index)
C_Minimap.GetPOITextureCoords(index)
C_Minimap.GetTrackingFilter(spellIndex)
C_Minimap.GetTrackingInfo(spellIndex)
C_Minimap.GetUiMapID()
C_Minimap.GetViewRadius()
C_Minimap.IsFilteredOut(filterType)
C_Minimap.IsInsideQuestBlob(questID)
C_Minimap.IsRotateMinimapIgnored()
C_Minimap.IsTrackingAccountCompletedQuests()
C_Minimap.IsTrackingBattlePets()
C_Minimap.IsTrackingHiddenQuests()
C_Minimap.SetDrawGroundTextures(draw)
C_Minimap.SetIgnoreRotateMinimap(ignore)
C_Minimap.SetMinimapInsetInfo(minAngle, maxAngle, scalar)
C_Minimap.SetTracking(index, on)
C_Minimap.ShouldUseHybridMinimap()
MINIMAP_PING: unitTarget, y, x
MINIMAP_UPDATE_TRACKING
MINIMAP_UPDATE_ZOOM
PLAYER_INSIDE_QUEST_BLOB_STATE_CHANGED: questID, isInside
MirrorTimer ✪
GetMirrorTimerInfo(timerIndex)
GetMirrorTimerProgress("timerName")
ModelInfo ✪
C_ModelInfo.AddActiveModelScene(modelSceneFrame, modelSceneID)
C_ModelInfo.AddActiveModelSceneActor(modelSceneFrameActor, modelSceneActorID)
C_ModelInfo.ClearActiveModelScene(modelSceneFrame)
C_ModelInfo.ClearActiveModelSceneActor(modelSceneFrameActor)
C_ModelInfo.GetModelSceneActorDisplayInfoByID(modelActorDisplayID)
C_ModelInfo.GetModelSceneActorInfoByID(modelActorID)
C_ModelInfo.GetModelSceneCameraInfoByID(modelSceneCameraID)
C_ModelInfo.GetModelSceneInfoByID(modelSceneID)
UI_MODEL_SCENE_INFO_UPDATED
MountJournal ✪
C_MountJournal.ApplyMountEquipment(itemLocation)
C_MountJournal.AreMountEquipmentEffectsSuppressed()
C_MountJournal.ClearFanfare(mountID)
C_MountJournal.ClearRecentFanfares()
C_MountJournal.Dismiss()
C_MountJournal.GetAllCreatureDisplayIDsForMountID(mountID)
C_MountJournal.GetAppliedMountEquipmentID()
C_MountJournal.GetCollectedDragonridingMounts()
C_MountJournal.GetCollectedFilterSetting(filterIndex)
C_MountJournal.GetDisplayedMountAllCreatureDisplayInfo(mountIndex)
C_MountJournal.GetDisplayedMountID(displayIndex)
C_MountJournal.GetDisplayedMountInfo(displayIndex)
C_MountJournal.GetDisplayedMountInfoExtra(mountIndex)
C_MountJournal.GetDynamicFlightModeSpellID()
C_MountJournal.GetIsFavorite(mountIndex)
C_MountJournal.GetMountAllCreatureDisplayInfoByID(mountID)
C_MountJournal.GetMountEquipmentUnlockLevel()
C_MountJournal.GetMountFromItem(itemID)
C_MountJournal.GetMountFromSpell(spellID)
C_MountJournal.GetMountIDs()
C_MountJournal.GetMountInfoByID(mountID)
C_MountJournal.GetMountInfoExtraByID(mountID)
C_MountJournal.GetMountLink(spellID)
C_MountJournal.GetMountUsabilityByID(mountID, checkIndoors)
C_MountJournal.GetNumDisplayedMounts()
C_MountJournal.GetNumMounts()
C_MountJournal.GetNumMountsNeedingFanfare()
C_MountJournal.IsDragonridingUnlocked()
C_MountJournal.IsItemMountEquipment(itemLocation)
C_MountJournal.IsMountEquipmentApplied()
C_MountJournal.IsSourceChecked(filterIndex)
C_MountJournal.IsTypeChecked(filterIndex)
C_MountJournal.IsUsingDefaultFilters()
C_MountJournal.IsValidSourceFilter(filterIndex)
C_MountJournal.IsValidTypeFilter(filterIndex)
C_MountJournal.NeedsFanfare(mountID)
C_MountJournal.Pickup(displayIndex)
C_MountJournal.PickupDynamicFlightMode()
C_MountJournal.SetAllSourceFilters(isChecked)
C_MountJournal.SetAllTypeFilters(isChecked)
C_MountJournal.SetCollectedFilterSetting(filterIndex, isChecked)
C_MountJournal.SetDefaultFilters()
C_MountJournal.SetIsFavorite(mountIndex, isFavorite)
C_MountJournal.SetSearch("searchValue")
C_MountJournal.SetSourceFilter(filterIndex, isChecked)
C_MountJournal.SetTypeFilter(filterIndex, isChecked)
C_MountJournal.SummonByID(mountID)
C_MountJournal.SwapDynamicFlightMode()
MOUNT_EQUIPMENT_APPLY_RESULT: success
MOUNT_JOURNAL_SEARCH_UPDATED
MOUNT_JOURNAL_USABILITY_CHANGED
NEW_MOUNT_ADDED: mountID
Movie ✪
CancelPreloadingMovie(movieId)
GetMovieDownloadProgress(movieId)
IsMovieLocal(movieId)
IsMoviePlayable(movieId)
IsMovieReadable(movieId)
PreloadMovie(movieId)
MythicPlusInfo ✪
C_MythicPlus.GetCurrentAffixes()
C_MythicPlus.GetCurrentSeason()
C_MythicPlus.GetCurrentSeasonValues()
C_MythicPlus.GetCurrentUIDisplaySeason()
C_MythicPlus.GetEndOfRunGearSequenceLevel(keystoneLevel)
C_MythicPlus.GetLastWeeklyBestInformation()
C_MythicPlus.GetOwnedKeystoneChallengeMapID()
C_MythicPlus.GetOwnedKeystoneLevel()
C_MythicPlus.GetOwnedKeystoneMapID()
C_MythicPlus.GetRewardLevelForDifficultyLevel(difficultyLevel)
C_MythicPlus.GetRewardLevelFromKeystoneLevel(keystoneLevel)
C_MythicPlus.GetRunHistory(includePreviousWeeks, includeIncompleteRuns)
C_MythicPlus.GetSeasonBestAffixScoreInfoForMap(mapChallengeModeID)
C_MythicPlus.GetSeasonBestForMap(mapChallengeModeID)
C_MythicPlus.GetSeasonBestMythicRatingFromThisExpansion()
C_MythicPlus.GetWeeklyBestForMap(mapChallengeModeID)
C_MythicPlus.GetWeeklyChestRewardLevel()
C_MythicPlus.IsMythicPlusActive()
C_MythicPlus.RequestCurrentAffixes()
C_MythicPlus.RequestMapInfo()
C_MythicPlus.RequestRewards()
MYTHIC_PLUS_CURRENT_AFFIX_UPDATE
MYTHIC_PLUS_NEW_WEEKLY_RECORD: mapChallengeModeID, completionMilliseconds, level
NamePlateManager ✪
FORBIDDEN_NAME_PLATE_CREATED: namePlateFrame
FORBIDDEN_NAME_PLATE_UNIT_ADDED: "unitToken"
FORBIDDEN_NAME_PLATE_UNIT_REMOVED: "unitToken"
NAME_PLATE_CREATED: namePlateFrame
NAME_PLATE_UNIT_ADDED: "unitToken"
NAME_PLATE_UNIT_REMOVED: "unitToken"
NewItems ✪
C_NewItems.ClearAll()
C_NewItems.IsNewItem(containerIndex, slotIndex)
C_NewItems.RemoveNewItem(containerIndex, slotIndex)
Os ✪
CopyToClipboard("text", removeMarkup)
GetTimePreciseSec()
PaperDollInfo ✪
C_PaperDollInfo.CanAutoEquipCursorItem()
C_PaperDollInfo.CanCursorCanGoInSlot(slotIndex)
C_PaperDollInfo.GetArmorEffectiveness(armor, attackerLevel)
C_PaperDollInfo.GetArmorEffectivenessAgainstTarget(armor)
C_PaperDollInfo.GetInspectAzeriteItemEmpoweredChoices(unit, equipmentSlotIndex)
C_PaperDollInfo.GetInspectGuildInfo("unitString")
C_PaperDollInfo.GetInspectItemLevel(unit)
C_PaperDollInfo.GetInspectRatedBGBlitzData()
C_PaperDollInfo.GetInspectRatedSoloShuffleData()
C_PaperDollInfo.GetMinItemLevel()
C_PaperDollInfo.GetStaggerPercentage(unit)
C_PaperDollInfo.OffhandHasShield()
C_PaperDollInfo.OffhandHasWeapon()
AVOIDANCE_UPDATE
CHARACTER_POINTS_CHANGED: change
CHARACTER_UPGRADE_SPELL_TIER_SET: tierIndex
COMBAT_RATING_UPDATE
DISABLE_XP_GAIN
ENABLE_XP_GAIN
EQUIP_BIND_CONFIRM: slot, itemLocation
INSPECT_HONOR_UPDATE
INSPECT_READY: inspecteeGUID
LIFESTEAL_UPDATE
MASTERY_UPDATE
PET_SPELL_POWER_UPDATE
PLAYER_AVG_ITEM_LEVEL_UPDATE
PLAYER_EQUIPMENT_CHANGED: equipmentSlot, hasCurrent
PROFESSION_EQUIPMENT_CHANGED: skillLineID, isTool
PVP_POWER_UPDATE
SPEED_UPDATE
SPELL_POWER_CHANGED
STURDINESS_UPDATE
UPDATE_FACTION
UPDATE_INVENTORY_ALERTS
UPDATE_INVENTORY_DURABILITY
WEAPON_SLOT_CHANGED
ParentalControls ✪
GetSecondsUntilParentalControlsKick()
PartyInfo ✪
C_PartyInfo.AllowedToDoPartyConversion(toRaid)
C_PartyInfo.CanFormCrossFactionParties()
C_PartyInfo.CanInvite()
C_PartyInfo.ConfirmConvertToRaid()
C_PartyInfo.ConfirmInviteTravelPass("targetName", targetGUID)
C_PartyInfo.ConfirmInviteUnit("targetName")
C_PartyInfo.ConfirmLeaveParty(category)
C_PartyInfo.ConfirmRequestInviteFromUnit("targetName", tank, healer, dps)
C_PartyInfo.ConvertToParty()
C_PartyInfo.ConvertToRaid()
C_PartyInfo.DelveTeleportOut()
C_PartyInfo.DoCountdown(seconds)
C_PartyInfo.GetActiveCategories()
C_PartyInfo.GetInviteConfirmationInvalidQueues(inviteGUID)
C_PartyInfo.GetInviteReferralInfo(inviteGUID)
C_PartyInfo.GetMinItemLevel(avgItemLevelCategory)
C_PartyInfo.GetMinLevel(category)
C_PartyInfo.GetRestrictPings()
C_PartyInfo.InviteUnit("targetName")
C_PartyInfo.IsCrossFactionParty(category)
C_PartyInfo.IsDelveComplete()
C_PartyInfo.IsDelveInProgress()
C_PartyInfo.IsPartyFull(category)
C_PartyInfo.IsPartyInJailersTower()
C_PartyInfo.IsPartyWalkIn()
C_PartyInfo.LeaveParty(category)
C_PartyInfo.RequestInviteFromUnit("targetName", tank, healer, dps)
C_PartyInfo.SetRestrictPings(restrictTo)
BNET_REQUEST_INVITE_CONFIRMATION: gameAccountID, questSessionActive, tank, healer, dps
CONVERT_TO_RAID_CONFIRMATION
ENTERED_DIFFERENT_INSTANCE_FROM_PARTY
GROUP_FORMED: category, partyGUID
GROUP_INVITE_CONFIRMATION
GROUP_JOINED: category, partyGUID
GROUP_LEFT: category, partyGUID
GROUP_ROSTER_UPDATE
INSTANCE_BOOT_START
INSTANCE_BOOT_STOP
INSTANCE_GROUP_SIZE_CHANGED
INVITE_TO_PARTY_CONFIRMATION: "targetName", willConvertToRaid, questSessionActive
INVITE_TRAVEL_PASS_CONFIRMATION: "targetName", targetGUID, willConvertToRaid, questSessionActive
LEAVE_PARTY_CONFIRMATION
PARTY_INVITE_CANCEL
PARTY_INVITE_REQUEST: "name", isTank, isHealer, isDamage, isNativeRealm, allowMultipleRoles, inviterGUID, questSessionActive
PARTY_LEADER_CHANGED
PARTY_LFG_RESTRICTED
PARTY_LOOT_METHOD_CHANGED
PARTY_MEMBER_DISABLE: unitTarget
PARTY_MEMBER_ENABLE: unitTarget
PLAYER_DIFFICULTY_CHANGED
PLAYER_ROLES_ASSIGNED
RAID_ROSTER_UPDATE
READY_CHECK: "initiatorName", readyCheckTimeLeft
READY_CHECK_CONFIRM: unitTarget, isReady
READY_CHECK_FINISHED: preempted
REQUEST_INVITE_CONFIRMATION: "targetName", partyLevelLink, questSessionActive, tank, healer, dps
VOTE_KICK_REASON_NEEDED: "name", resultGUID
PartyPose ✪
C_PartyPose.ExtraAction(partyPoseID)
C_PartyPose.GetPartyPoseInfoByID(mapID)
C_PartyPose.GetPartyPoseInfoByMapID(mapID)
C_PartyPose.HasExtraAction(partyPoseID)
SHOW_PARTY_POSE_UI: mapID, won
PerformanceScript ✪
GetAddOnCPUUsage(name)
GetAddOnMemoryUsage(name)
GetFrameCPUUsage(frame, includeChildren)
ResetCPUUsage()
UpdateAddOnCPUUsage()
UpdateAddOnMemoryUsage()
PerksActivities ✪
C_PerksActivities.AddTrackedPerksActivity(perksActivityID)
C_PerksActivities.ClearPerksActivitiesPendingCompletion()
C_PerksActivities.GetAllPerksActivityTags()
C_PerksActivities.GetPerksActivitiesInfo()
C_PerksActivities.GetPerksActivitiesPendingCompletion()
C_PerksActivities.GetPerksActivityChatLink(perksActivityID)
C_PerksActivities.GetPerksActivityInfo(perksActivityID)
C_PerksActivities.GetPerksUIThemePrefix()
C_PerksActivities.GetTrackedPerksActivities()
C_PerksActivities.RemoveTrackedPerksActivity(perksActivityID)
PERKS_ACTIVITIES_TRACKED_LIST_CHANGED: perksActivityID, added
PERKS_ACTIVITIES_TRACKED_UPDATED
PERKS_ACTIVITIES_UPDATED
PERKS_ACTIVITY_COMPLETED: perksActivityID
PerksProgram ✪
C_PerksProgram.ClearFrozenPerksVendorItem()
C_PerksProgram.CloseInteraction()
C_PerksProgram.GetAvailableCategoryIDs()
C_PerksProgram.GetAvailableVendorItemIDs()
C_PerksProgram.GetCategoryInfo(categoryID)
C_PerksProgram.GetCurrencyAmount()
C_PerksProgram.GetDraggedPerksVendorItem()
C_PerksProgram.GetFrozenPerksVendorItemInfo()
C_PerksProgram.GetPendingChestRewards()
C_PerksProgram.GetPerksProgramItemDisplayInfo(id)
C_PerksProgram.GetTimeRemaining(vendorItemID)
C_PerksProgram.GetVendorItemInfo(vendorItemID)
C_PerksProgram.GetVendorItemInfoRefundTimeLeft(vendorItemID)
C_PerksProgram.IsAttackAnimToggleEnabled()
C_PerksProgram.IsFrozenPerksVendorItem(perksVendorItemID)
C_PerksProgram.IsMountSpecialAnimToggleEnabled()
C_PerksProgram.ItemSelectedTelemetry(perksVendorItemID)
C_PerksProgram.PickupPerksVendorItem(perksVendorItemID)
C_PerksProgram.RequestPendingChestRewards()
C_PerksProgram.RequestPurchase(perksVendorItemID)
C_PerksProgram.RequestRefund(perksVendorItemID)
C_PerksProgram.ResetHeldItemDragAndDrop()
C_PerksProgram.SetFrozenPerksVendorItem()
CHEST_REWARDS_UPDATED_FROM_SERVER
PERKS_PROGRAM_ADD_PENDING_SHOP_ITEM: vendorItemID
PERKS_PROGRAM_CLOSE
PERKS_PROGRAM_CURRENCY_AWARDED: value
PERKS_PROGRAM_CURRENCY_REFRESH: oldValue, newValue
PERKS_PROGRAM_DATA_REFRESH
PERKS_PROGRAM_DATA_SPECIFIC_ITEM_REFRESH: vendorItemID
PERKS_PROGRAM_DISABLED
PERKS_PROGRAM_OPEN
PERKS_PROGRAM_PURCHASE_SUCCESS: vendorItemID
PERKS_PROGRAM_REFUND_SUCCESS: vendorItemID
PERKS_PROGRAM_REMOVE_PENDING_SHOP_ITEM: vendorItemID
PERKS_PROGRAM_RESULT_ERROR
PERKS_PROGRAM_SET_FROZEN_ITEM: vendorItemID
PetBattles ✪
C_PetBattles.GetBreedQuality(petOwner, slot)
C_PetBattles.GetIcon(petOwner, slot)
C_PetBattles.GetName(petOwner, slot)
C_PetBattles.IsPlayerNPC()
C_PetBattles.IsWildBattle()
PetInfo ✪
C_PetInfo.GetPetTamersForMap(uiMapID)
C_PetInfo.GetSpellForPetAction(actionID)
C_PetInfo.IsPetActionPassive(actionID)
C_PetInfo.PetAbandon(petNumber)
C_PetInfo.PetRename("name", petNumber, "declensions")
PET_ATTACK_START
PET_ATTACK_STOP
PET_BAR_HIDEGRID
PET_BAR_SHOWGRID
PET_BAR_UPDATE_COOLDOWN
PET_DISMISS_START: delay
PET_FORCE_NAME_DECLENSION: "name", petNumber, "declinedName1", "declinedName2", "declinedName3", "declinedName4", "declinedName5"
PET_UI_CLOSE
RAISED_AS_GHOUL
UPDATE_POSSESS_BAR
UPDATE_VEHICLE_ACTIONBAR
PetJournalInfo ✪
C_PetJournal.ClearHoveredBattlePet()
C_PetJournal.GetDisplayIDByIndex(speciesID, index)
C_PetJournal.GetDisplayProbabilityByIndex(speciesID, index)
C_PetJournal.GetNumDisplays(speciesID)
C_PetJournal.GetNumPetsInJournal(creatureID)
C_PetJournal.GetPetAbilityInfo(abilityID)
C_PetJournal.GetPetAbilityListTable(speciesID)
C_PetJournal.GetPetInfoTableByPetID(petID)
C_PetJournal.GetPetLoadOutInfo(slot)
C_PetJournal.GetPetSummonInfo(battlePetGUID)
C_PetJournal.HasFavoritePets()
C_PetJournal.IsUsingDefaultFilters()
C_PetJournal.PetIsSummonable(battlePetGUID)
C_PetJournal.PetUsesRandomDisplay(speciesID)
C_PetJournal.SetDefaultFilters()
C_PetJournal.SetHoveredBattlePet(battlePetGUID)
C_PetJournal.SpellTargetBattlePet(battlePetGUID)
BATTLEPET_FORCE_NAME_DECLENSION: "name", battlePetGUID
COMPANION_LEARNED
COMPANION_UNLEARNED
COMPANION_UPDATE: "companionType"
NEW_PET_ADDED: battlePetGUID
PET_JOURNAL_AUTO_SLOTTED_PET: slotIndex, battlePetGUID
PET_JOURNAL_CAGE_FAILED
PET_JOURNAL_LIST_UPDATE
PET_JOURNAL_NEW_BATTLE_SLOT
PET_JOURNAL_PET_DELETED: battlePetGUID
PET_JOURNAL_PET_RESTORED: battlePetGUID
PET_JOURNAL_PET_REVOKED: battlePetGUID
PET_JOURNAL_PETS_HEALED
PET_JOURNAL_TRAP_LEVEL_SET: trapLevel
UPDATE_SUMMONPETS_ACTION
PingManager ✪
C_Ping.GetContextualPingTypeForUnit(targetUnit)
C_Ping.GetCooldownInfo()
C_Ping.GetDefaultPingOptions()
C_Ping.GetTextureKitForType(type)
C_Ping.SendMacroPing(type, "targetToken")
C_Ping.TogglePingListener(down)
PING_SYSTEM_ERROR: "error"
PingManagerSecure ✪
C_PingSecure.ClearPendingPingInfo()
C_PingSecure.CreateFrame()
C_PingSecure.DisplayError("error")
C_PingSecure.GetTargetPingReceiver(mousePosX, mousePosY)
C_PingSecure.GetTargetWorldPing(mousePosX, mousePosY)
C_PingSecure.GetTargetWorldPingAndSend()
C_PingSecure.SendPing(type, target)
C_PingSecure.SetPendingPingOffScreenCallback(cb)
C_PingSecure.SetPingCooldownStartedCallback(cb)
C_PingSecure.SetPingPinFrameAddedCallback(cb)
C_PingSecure.SetPingPinFrameRemovedCallback(cb)
C_PingSecure.SetPingPinFrameScreenClampStateUpdatedCallback(cb)
C_PingSecure.SetPingRadialWheelCreatedCallback(cb)
C_PingSecure.SetSendMacroPingCallback(cb)
C_PingSecure.SetTogglePingListenerCallback(cb)
PlayerChoice ✪
C_PlayerChoice.GetCurrentPlayerChoiceInfo()
C_PlayerChoice.GetNumRerolls()
C_PlayerChoice.GetRemainingTime()
C_PlayerChoice.IsWaitingForPlayerChoiceResponse()
C_PlayerChoice.OnUIClosed()
C_PlayerChoice.RequestRerollPlayerChoice()
C_PlayerChoice.SendPlayerChoiceResponse(responseID)
PLAYER_CHOICE_CLOSE
PLAYER_CHOICE_UPDATE
PlayerInfo ✪
C_PlayerInfo.CanPlayerEnterChromieTime()
C_PlayerInfo.CanPlayerUseAreaLoot()
C_PlayerInfo.CanPlayerUseEventScheduler()
C_PlayerInfo.CanPlayerUseMountEquipment()
C_PlayerInfo.CanUseItem(itemID)
C_PlayerInfo.GetAlternateFormInfo()
C_PlayerInfo.GetContentDifficultyCreatureForPlayer(unitToken)
C_PlayerInfo.GetContentDifficultyQuestForPlayer(questID)
C_PlayerInfo.GetDisplayID()
C_PlayerInfo.GetGlidingInfo()
C_PlayerInfo.GetInstancesUnlockedAtLevel(level, isRaid)
C_PlayerInfo.GetNativeDisplayID()
C_PlayerInfo.GetPetStableCreatureDisplayInfoID(index)
C_PlayerInfo.GetPlayerCharacterData()
C_PlayerInfo.GetPlayerMythicPlusRatingSummary(playerToken)
C_PlayerInfo.HasAccountInventoryLock()
C_PlayerInfo.HasVisibleInvSlot(slot)
C_PlayerInfo.IsDisplayRaceNative()
C_PlayerInfo.IsExpansionLandingPageUnlockedForPlayer(expansionID)
C_PlayerInfo.IsMirrorImage()
C_PlayerInfo.IsPlayerEligibleForNPE()
C_PlayerInfo.IsPlayerEligibleForNPEv2()
C_PlayerInfo.IsPlayerInChromieTime()
C_PlayerInfo.IsPlayerNPERestricted()
C_PlayerInfo.IsSelfFoundActive()
C_PlayerInfo.IsTradingPostAvailable()
C_PlayerInfo.IsTravelersLogAvailable()
PlayerInteractionManager ✪
C_PlayerInteractionManager.ClearInteraction(type)
C_PlayerInteractionManager.ConfirmationInteraction(type)
C_PlayerInteractionManager.InteractUnit("unit", exactMatch, looseTargeting)
C_PlayerInteractionManager.IsInteractingWithNpcOfType(type)
C_PlayerInteractionManager.IsReplacingUnit()
C_PlayerInteractionManager.IsValidNPCInteraction(type)
C_PlayerInteractionManager.ReopenInteraction()
PLAYER_INTERACTION_MANAGER_FRAME_HIDE: type
PLAYER_INTERACTION_MANAGER_FRAME_SHOW: type
PlayerLocationInfo ✪
C_PlayerInfo.GUIDIsPlayer(guid)
C_PlayerInfo.GetClass(playerLocation)
C_PlayerInfo.GetName(playerLocation)
C_PlayerInfo.GetRace(playerLocation)
C_PlayerInfo.GetSex(playerLocation)
C_PlayerInfo.IsConnected(playerLocation)
C_PlayerInfo.UnitIsSameServer(playerLocation)
PlayerMentorship ✪
C_PlayerMentorship.GetMentorLevelRequirement()
C_PlayerMentorship.GetMentorRequirements()
C_PlayerMentorship.GetMentorshipStatus(playerLocation)
C_PlayerMentorship.IsActivePlayerConsideredNewcomer()
C_PlayerMentorship.IsMentorRestricted()
MENTORSHIP_STATUS_CHANGED
NEWCOMER_GRADUATION
PlayerScript ✪
AcceptAreaSpiritHeal()
AcceptGuild()
AcceptResurrect()
Ambiguate("fullName", "context")
AutoEquipCursorItem()
BeginTrade()
CanDualWield()
CanInspect(targetGUID)
CanLootUnit(targetUnit)
CancelAreaSpiritHeal()
CancelPendingEquip(index)
CancelTrade()
CheckInteractDistance(unitGUID, distIndex)
CheckTalentMasterDist()
ClearPendingBindConversionItem()
ConfirmTalentWipe()
ConvertItemToBindToAccount()
DeclineGuild()
DeclineResurrect()
Dismount()
EquipPendingItem(index)
FollowUnit("name", exactMatch)
GetAllowLowLevelRaid()
GetAreaSpiritHealerTime()
GetAttackPowerForStat(stat, value)
GetAutoDeclineGuildInvites()
GetAvoidance()
GetBindLocation()
GetBlockChance()
GetCemeteryPreference()
GetCombatRating(ratingIndex)
GetCombatRatingBonus(ratingIndex)
GetCombatRatingBonusForCombatRatingValue(ratingIndex, value)
GetCorpseRecoveryDelay()
GetCorruption()
GetCorruptionResistance()
GetCritChance()
GetCritChanceProvidesParryEffect()
GetDodgeChance()
GetDodgeChanceFromAttribute()
GetExpertise()
GetHaste()
GetHitModifier()
GetJailersTowerLevel()
GetLifesteal()
GetLootSpecialization()
GetManaRegen()
GetMastery()
GetMasteryEffect()
GetMaxCombatRatingBonus(ratingIndex)
GetMaxPlayerLevel()
GetMeleeHaste()
GetModResilienceDamageReduction()
GetMoney()
GetNormalizedRealmName()
GetOverrideAPBySpellPower()
GetOverrideSpellPowerByAP()
GetPVPDesired()
GetPVPGearStatRules()
GetPVPLifetimeStats()
GetPVPSessionStats()
GetPVPTimer()
GetPVPYesterdayStats()
GetParryChance()
GetParryChanceFromAttribute()
GetPetMeleeHaste()
GetPetSpellBonusDamage()
GetPlayerFacing()
GetPlayerInfoByGUID(guid)
GetPowerRegen()
GetPowerRegenForPowerType(powerType)
GetPvpPowerDamage()
GetPvpPowerHealing()
GetRangedCritChance()
GetRangedHaste()
GetReleaseTimeRemaining()
GetResSicknessDuration()
GetRestState()
GetRestrictedAccountData()
GetRuneCooldown(runeIndex)
GetRuneCount(runeIndex)
GetSheathState()
GetShieldBlock()
GetSpeed()
GetSpellBonusDamage(school)
GetSpellBonusHealing()
GetSpellCritChance()
GetSpellHitModifier()
GetSpellPenetration()
GetSturdiness()
GetTaxiBenchmarkMode()
GetVersatilityBonus(combatRating)
GetXPExhaustion()
HasAPEffectsSpellPower()
HasDualWieldPenalty()
HasFullControl()
HasIgnoreDualWieldWeapon()
HasKey()
HasNoReleaseAura()
HasSPEffectsAttackPower()
InitiateTrade(guid)
IsAccountSecured()
IsAdvancedFlyableArea()
IsCemeterySelectionAvailable()
IsCharacterNewlyBoosted()
IsDrivableArea()
IsDualWielding()
IsFlyableArea()
IsGuildLeader()
IsInGuild()
IsInJailersTower()
IsIndoors()
IsInsane()
IsItemPreferredArmorType(itemLocation)
IsJailersTowerLayerTimeLocked(layerLevel)
IsLoggedIn()
IsMounted()
IsOnGroundFloorInJailersTower()
IsOutOfBounds()
IsOutdoors()
IsPVPTimerRunning()
IsPlayerInWorld()
IsPlayerMoving()
IsRangedWeapon()
IsResting()
IsRestrictedAccount()
IsStealthed()
IsXPUserDisabled()
NoPlayTime()
NotifyInspect(targetGUID)
PartialPlayTime()
PlayerCanTeleport()
PlayerEffectiveAttackPower()
PlayerGetTimerunningSeasonID()
PortGraveyard()
RandomRoll(min, max)
RepopMe()
RequestTimePlayed()
RespondInstanceLock(acceptLock)
ResurrectGetOfferer()
ResurrectHasSickness()
ResurrectHasTimer()
RetrieveCorpse()
SetAllowLowLevelRaid(allow)
SetAutoDeclineGuildInvites(allow)
SetCemeteryPreference(cemetaryID)
SetLootSpecialization(specializationID)
SetTaxiBenchmarkMode(enable)
ShouldShowIslandsWeeklyPOI()
ShouldShowSpecialSplashScreen()
ShowCloak(show)
ShowHelm(show)
ShowingCloak()
ShowingHelm()
SitStandOrDescendStart()
SplashFrameCanBeShown()
StartAttack("name", exactMatch)
StopAttack()
Stuck()
TimeoutResurrect()
ToggleSelfHighlight()
ToggleSheath()
Portrait ✪
SetPortraitToTexture(texture, asset)
ProfessionSpecUI ✪
C_ProfSpecs.CanRefundPath(pathID, configID)
C_ProfSpecs.CanUnlockTab(tabTreeID, configID)
C_ProfSpecs.GetChildrenForPath(pathID)
C_ProfSpecs.GetConfigIDForSkillLine(skillLineID)
C_ProfSpecs.GetCurrencyInfoForSkillLine(skillLineID)
C_ProfSpecs.GetDefaultSpecSkillLine()
C_ProfSpecs.GetDescriptionForPath(pathID)
C_ProfSpecs.GetDescriptionForPerk(perkID)
C_ProfSpecs.GetEntryIDForPerk(perkID)
C_ProfSpecs.GetNewSpecReminderProfName()
C_ProfSpecs.GetPerksForPath(pathID)
C_ProfSpecs.GetRootPathForTab(tabTreeID)
C_ProfSpecs.GetSourceTextForPath(pathID, configID)
C_ProfSpecs.GetSpecTabIDsForSkillLine(skillLineID)
C_ProfSpecs.GetSpecTabInfo()
C_ProfSpecs.GetSpendCurrencyForPath(pathID)
C_ProfSpecs.GetSpendEntryForPath(pathID)
C_ProfSpecs.GetStateForPath(pathID, configID)
C_ProfSpecs.GetStateForPerk(perkID, configID)
C_ProfSpecs.GetStateForTab(tabTreeID, configID)
C_ProfSpecs.GetTabInfo(tabTreeID)
C_ProfSpecs.GetUnlockEntryForPath(pathID)
C_ProfSpecs.GetUnlockRankForPerk(perkID)
C_ProfSpecs.ShouldShowPointsReminder()
C_ProfSpecs.ShouldShowPointsReminderForSkillLine(skillLineID)
C_ProfSpecs.ShouldShowSpecTab()
C_ProfSpecs.SkillLineHasSpecialization(skillLineID)
SKILL_LINE_SPECS_RANKS_CHANGED
SKILL_LINE_SPECS_UNLOCKED: skillLineID, tradeSkillID
PvpInfo ✪
C_PvP.ArePvpTalentsUnlocked()
C_PvP.CanDisplayDamage()
C_PvP.CanDisplayDeaths()
C_PvP.CanDisplayHealing()
C_PvP.CanDisplayHonorableKills()
C_PvP.CanDisplayKillingBlows()
C_PvP.CanPlayerUseRatedPVPUI()
C_PvP.CanToggleWarMode(toggle)
C_PvP.CanToggleWarModeInArea()
C_PvP.DoesMatchOutcomeAffectRating()
C_PvP.GetActiveBrawlInfo()
C_PvP.GetActiveMatchBracket()
C_PvP.GetActiveMatchDuration()
C_PvP.GetActiveMatchState()
C_PvP.GetActiveMatchWinner()
C_PvP.GetArenaCrowdControlInfo(playerToken)
C_PvP.GetArenaRewards(teamSize)
C_PvP.GetArenaSkirmishRewards()
C_PvP.GetAssignedSpecForBattlefieldQueue(queueID)
C_PvP.GetAvailableBrawlInfo()
C_PvP.GetBattlefieldFlagPosition(flagIndex, uiMapId)
C_PvP.GetBattlefieldVehicleInfo(vehicleIndex, uiMapID)
C_PvP.GetBattlefieldVehicles(uiMapID)
C_PvP.GetBrawlRewards(brawlType)
C_PvP.GetBrawlSoloRBGMinItemLevel()
C_PvP.GetCustomVictoryStatID()
C_PvP.GetGlobalPvpScalingInfoForSpecID(specializationID)
C_PvP.GetHonorRewardInfo(honorLevel)
C_PvP.GetLevelUpBattlegrounds(level)
C_PvP.GetMatchPVPStatColumn(pvpStatID)
C_PvP.GetMatchPVPStatColumns()
C_PvP.GetNextHonorLevelForReward(honorLevel)
C_PvP.GetOutdoorPvPWaitTime(uiMapID)
C_PvP.GetPVPActiveMatchPersonalRatedInfo()
C_PvP.GetPVPActiveRatedMatchDeserterPenalty()
C_PvP.GetPVPSeasonRewardAchievementID()
C_PvP.GetPersonalRatedBGBlitzSpecStats()
C_PvP.GetPersonalRatedSoloShuffleSpecStats()
C_PvP.GetPostMatchCurrencyRewards()
C_PvP.GetPostMatchItemRewards()
C_PvP.GetPvpTalentsUnlockedLevel()
C_PvP.GetPvpTierID(tierEnum, bracketEnum)
C_PvP.GetPvpTierInfo(tierID)
C_PvP.GetRandomBGInfo()
C_PvP.GetRandomBGRewards()
C_PvP.GetRandomEpicBGInfo()
C_PvP.GetRandomEpicBGRewards()
C_PvP.GetRatedBGRewards()
C_PvP.GetRatedSoloRBGMinItemLevel()
C_PvP.GetRatedSoloRBGRewards()
C_PvP.GetRatedSoloShuffleMinItemLevel()
C_PvP.GetRatedSoloShuffleRewards()
C_PvP.GetRewardItemLevelsByTierEnum(pvpTierEnum)
C_PvP.GetScoreInfo(offsetIndex)
C_PvP.GetScoreInfoByPlayerGuid(guid)
C_PvP.GetSeasonBestInfo()
C_PvP.GetSkirmishInfo(pvpBracket)
C_PvP.GetSpecialEventBrawlInfo()
C_PvP.GetTeamInfo(factionIndex)
C_PvP.GetUIDisplaySeason()
C_PvP.GetWarModeRewardBonus()
C_PvP.GetWarModeRewardBonusDefault()
C_PvP.GetWeeklyChestInfo()
C_PvP.GetZonePVPInfo()
C_PvP.HasArenaSkirmishWinToday()
C_PvP.IsActiveBattlefield()
C_PvP.IsActiveMatchRegistered()
C_PvP.IsArena()
C_PvP.IsBattleground()
C_PvP.IsBattlegroundEnlistmentBonusActive()
C_PvP.IsBrawlSoloRBG()
C_PvP.IsBrawlSoloShuffle()
C_PvP.IsInBrawl()
C_PvP.IsInRatedMatchWithDeserterPenalty()
C_PvP.IsMatchActive()
C_PvP.IsMatchComplete()
C_PvP.IsMatchConsideredArena()
C_PvP.IsMatchFactional()
C_PvP.IsPVPMap()
C_PvP.IsRatedArena()
C_PvP.IsRatedBattleground()
C_PvP.IsRatedMap()
C_PvP.IsRatedSoloRBG()
C_PvP.IsRatedSoloShuffle()
C_PvP.IsSoloRBG()
C_PvP.IsSoloShuffle()
C_PvP.IsSubZonePVPPOI()
C_PvP.IsWarModeActive()
C_PvP.IsWarModeDesired()
C_PvP.IsWarModeFeatureEnabled()
C_PvP.JoinBrawl(isSpecialBrawl)
C_PvP.JoinRatedBGBlitz()
C_PvP.RequestCrowdControlSpell(playerToken)
C_PvP.SetPVP(enablePVP)
C_PvP.SetWarModeDesired(warModeDesired)
C_PvP.StartSoloRBGWarGameByName("args")
C_PvP.StartSpectatorSoloRBGWarGame(opaqueID1, opaqueID2, "specifiedMap", tournamentRules)
C_PvP.TogglePVP()
C_PvP.ToggleWarMode()
ARENA_OPPONENT_UPDATE: "unitToken", "updateReason"
ARENA_PREP_OPPONENT_SPECIALIZATIONS
ARENA_SEASON_WORLD_STATE
BATTLEFIELD_AUTO_QUEUE
BATTLEFIELD_AUTO_QUEUE_EJECT
BATTLEFIELD_QUEUE_TIMEOUT
BATTLEFIELDS_CLOSED
BATTLEFIELDS_SHOW: isArena, battleMasterListID
BATTLEGROUND_OBJECTIVES_UPDATE
BATTLEGROUND_POINTS_UPDATE
GDF_SIM_COMPLETE
HONOR_LEVEL_UPDATE: isHigherLevel
NOTIFY_PVP_AFK_RESULT: "offender", numBlackMarksOnOffender, numPlayersIHaveReported
PLAYER_ENTERING_BATTLEGROUND
PLAYER_JOINED_PVP_MATCH
POST_MATCH_CURRENCY_REWARD_UPDATE: reward
POST_MATCH_ITEM_REWARD_UPDATE
PVP_BRAWL_INFO_UPDATED
PVP_MATCH_ACTIVE
PVP_MATCH_COMPLETE: winner, duration
PVP_MATCH_INACTIVE
PVP_MATCH_STATE_CHANGED
PVP_RATED_STATS_UPDATE
PVP_REWARDS_UPDATE
PVP_ROLE_POPUP_HIDE: readyCheckInfo
PVP_ROLE_POPUP_SHOW: readyCheckInfo
PVP_ROLE_UPDATE
PVP_SPECIAL_EVENT_INFO_UPDATED
PVP_TYPES_ENABLED: wargameBattlegrounds, ratedBattlegrounds, ratedArenas, ratedSoloShuffle, ratedBGBlitz
PVP_VEHICLE_INFO_UPDATED
PVP_WORLDSTATE_UPDATE
PVPQUEUE_ANYWHERE_SHOW
PVPQUEUE_ANYWHERE_UPDATE_AVAILABLE
UPDATE_ACTIVE_BATTLEFIELD
UPDATE_BATTLEFIELD_SCORE
UPDATE_BATTLEFIELD_STATUS: battleFieldIndex
WAR_MODE_STATUS_UPDATE: warModeEnabled
WARGAME_INVITE_SENT
WARGAME_REQUEST_RESPONSE: responderGUID, "responderName", accepted
WARGAME_REQUESTED: "opposingPartyMemberName", "battlegroundName", timeoutSeconds, tournamentRules
WORLD_PVP_QUEUE
QuestHubUI ✪
C_QuestHub.IsQuestCurrentlyRelatedToHub(questID, areaPoiID)
QuestInfoSystem ✪
C_QuestInfoSystem.GetQuestClassification(questID)
C_QuestInfoSystem.GetQuestRewardCurrencies(questID)
C_QuestInfoSystem.GetQuestRewardSpellInfo(questID, spellID)
C_QuestInfoSystem.GetQuestRewardSpells(questID)
C_QuestInfoSystem.GetQuestShouldToastCompletion(questID)
C_QuestInfoSystem.HasQuestRewardCurrencies(questID)
C_QuestInfoSystem.HasQuestRewardSpells(questID)
QuestItemUse ✪
C_QuestItemUse.CanUseQuestItemOnObject(item, unit, checkRange)
QuestLineUI ✪
C_QuestLine.GetAvailableQuestLines(uiMapID)
C_QuestLine.GetForceVisibleQuests(uiMapID)
C_QuestLine.GetQuestLineInfo(questID, uiMapID, displayableOnly)
C_QuestLine.GetQuestLineQuests(questLineID)
C_QuestLine.IsComplete(questLineID)
C_QuestLine.QuestLineIgnoresAccountCompletedFiltering(uiMapID, questLineID)
C_QuestLine.RequestQuestLinesForMap(uiMapID)
QuestLog ✪
C_QuestLog.AbandonQuest()
C_QuestLog.AddQuestWatch(questID)
C_QuestLog.AddWorldQuestWatch(questID, watchType)
C_QuestLog.CanAbandonQuest(questID)
C_QuestLog.DoesQuestAwardReputationWithFaction(questID, targetFactionID)
C_QuestLog.GetAbandonQuest()
C_QuestLog.GetAbandonQuestItems()
C_QuestLog.GetActiveThreatMaps()
C_QuestLog.GetAllCompletedQuestIDs()
C_QuestLog.GetBountiesForMapID(uiMapID)
C_QuestLog.GetBountySetInfoForMapID(uiMapID)
C_QuestLog.GetDistanceSqToQuest(questID)
C_QuestLog.GetHeaderIndexForQuest(questID)
C_QuestLog.GetInfo(questLogIndex)
C_QuestLog.GetLogIndexForQuestID(questID)
C_QuestLog.GetMapForQuestPOIs()
C_QuestLog.GetMaxNumQuests()
C_QuestLog.GetMaxNumQuestsCanAccept()
C_QuestLog.GetNextWaypoint(questID)
C_QuestLog.GetNextWaypointForMap(questID, uiMapID)
C_QuestLog.GetNextWaypointText(questID)
C_QuestLog.GetNumQuestLogEntries()
C_QuestLog.GetNumQuestObjectives(questID)
C_QuestLog.GetNumQuestWatches()
C_QuestLog.GetNumWorldQuestWatches()
C_QuestLog.GetQuestAdditionalHighlights(questID)
C_QuestLog.GetQuestDetailsTheme(questID)
C_QuestLog.GetQuestDifficultyLevel(questID)
C_QuestLog.GetQuestIDForLogIndex(questLogIndex)
C_QuestLog.GetQuestIDForQuestWatchIndex(questWatchIndex)
C_QuestLog.GetQuestIDForWorldQuestWatchIndex(questWatchIndex)
C_QuestLog.GetQuestLogMajorFactionReputationRewards(questID)
C_QuestLog.GetQuestLogPortraitGiver(questLogIndex)
C_QuestLog.GetQuestObjectives(questID)
C_QuestLog.GetQuestRewardCurrencies(questID)
C_QuestLog.GetQuestRewardCurrencyInfo(questID, currencyIndex, isChoice)
C_QuestLog.GetQuestTagInfo(questID)
C_QuestLog.GetQuestType(questID)
C_QuestLog.GetQuestWatchType(questID)
C_QuestLog.GetQuestsOnMap(uiMapID)
C_QuestLog.GetRequiredMoney(questID)
C_QuestLog.GetSelectedQuest()
C_QuestLog.GetSuggestedGroupSize(questID)
C_QuestLog.GetTimeAllowed(questID)
C_QuestLog.GetTitleForLogIndex(questLogIndex)
C_QuestLog.GetTitleForQuestID(questID)
C_QuestLog.GetZoneStoryInfo(uiMapID)
C_QuestLog.HasActiveThreats()
C_QuestLog.IsAccountQuest(questID)
C_QuestLog.IsComplete(questID)
C_QuestLog.IsFailed(questID)
C_QuestLog.IsImportantQuest(questID)
C_QuestLog.IsMetaQuest(questID)
C_QuestLog.IsOnMap(questID)
C_QuestLog.IsOnQuest(questID)
C_QuestLog.IsPushableQuest(questID)
C_QuestLog.IsQuestBounty(questID)
C_QuestLog.IsQuestCalling(questID)
C_QuestLog.IsQuestCriteriaForBounty(questID, bountyQuestID)
C_QuestLog.IsQuestDisabledForSession(questID)
C_QuestLog.IsQuestFlaggedCompleted(questID)
C_QuestLog.IsQuestFlaggedCompletedOnAccount(questID)
C_QuestLog.IsQuestFromContentPush(questID)
C_QuestLog.IsQuestInvasion(questID)
C_QuestLog.IsQuestReplayable(questID)
C_QuestLog.IsQuestReplayedRecently(questID)
C_QuestLog.IsQuestTask(questID)
C_QuestLog.IsQuestTrivial(questID)
C_QuestLog.IsRepeatableQuest(questID)
C_QuestLog.IsThreatQuest(questID)
C_QuestLog.IsUnitOnQuest(unit, questID)
C_QuestLog.IsWorldQuest(questID)
C_QuestLog.QuestCanHaveWarModeBonus(questID)
C_QuestLog.QuestContainsFirstTimeRepBonusForPlayer(questID)
C_QuestLog.QuestHasQuestSessionBonus(questID)
C_QuestLog.QuestHasWarModeBonus(questID)
C_QuestLog.QuestIgnoresAccountCompletedFiltering(questID)
C_QuestLog.ReadyForTurnIn(questID)
C_QuestLog.RemoveQuestWatch(questID)
C_QuestLog.RemoveWorldQuestWatch(questID)
C_QuestLog.RequestLoadQuestByID(questID)
C_QuestLog.SetAbandonQuest()
C_QuestLog.SetMapForQuestPOIs(uiMapID)
C_QuestLog.SetSelectedQuest(questID)
C_QuestLog.ShouldDisplayTimeRemaining(questID)
C_QuestLog.ShouldShowQuestRewards(questID)
C_QuestLog.SortQuestWatches()
C_QuestLog.UnitIsRelatedToActiveQuest(unit)
C_QuestLog.UpdateCampaignHeaders()
QUEST_ACCEPTED: questId
QUEST_AUTOCOMPLETE: questId
QUEST_COMPLETE
QUEST_DATA_LOAD_RESULT: questID, success
QUEST_DETAIL: questStartItemID
QUEST_LOG_CRITERIA_UPDATE: questID, specificTreeID, "description", numFulfilled, numRequired
QUEST_LOG_UPDATE
QUEST_POI_UPDATE
QUEST_REMOVED: questID, wasReplayQuest
QUEST_TURNED_IN: questID, xpReward, moneyReward
QUEST_WATCH_LIST_CHANGED: questID, added
QUEST_WATCH_UPDATE: questID
QUESTLINE_UPDATE: requestRequired
TASK_PROGRESS_UPDATE
TREASURE_PICKER_CACHE_FLUSH
WAYPOINT_UPDATE
WORLD_QUEST_COMPLETED_BY_SPELL: questID
QuestOffer ✪
C_QuestOffer.GetHideRequiredItems()
C_QuestOffer.GetQuestOfferMajorFactionReputationRewards()
C_QuestOffer.GetQuestRequiredCurrencyInfo(questRewardIndex)
C_QuestOffer.GetQuestRewardCurrencyInfo("questInfoType", questRewardIndex)
QUEST_ACCEPT_CONFIRM: "name", "questTitle"
QUEST_FINISHED
QUEST_GREETING
QUEST_ITEM_UPDATE
QUEST_PROGRESS
QuestSession ✪
C_QuestSession.CanStart()
C_QuestSession.CanStop()
C_QuestSession.Exists()
C_QuestSession.GetAvailableSessionCommand()
C_QuestSession.GetPendingCommand()
C_QuestSession.GetProposedMaxLevelForSession()
C_QuestSession.GetSessionBeginDetails()
C_QuestSession.GetSuperTrackedQuest()
C_QuestSession.HasJoined()
C_QuestSession.HasPendingCommand()
C_QuestSession.RequestSessionStart()
C_QuestSession.RequestSessionStop()
C_QuestSession.SendSessionBeginResponse(beginSession)
C_QuestSession.SetQuestIsSuperTracked(questID, superTrack)
QUEST_SESSION_CREATED
QUEST_SESSION_DESTROYED
QUEST_SESSION_ENABLED_STATE_CHANGED: enabled
QUEST_SESSION_JOINED
QUEST_SESSION_LEFT
QUEST_SESSION_MEMBER_CONFIRM
QUEST_SESSION_MEMBER_START_RESPONSE: guid, response
QUEST_SESSION_NOTIFICATION: result, guid
QuestTaskInfo ✪
C_TaskQuest.DoesMapShowTaskQuestObjectives(uiMapID)
C_TaskQuest.GetQuestIconUIWidgetSet(questID)
C_TaskQuest.GetQuestInfoByQuestID(questID)
C_TaskQuest.GetQuestLocation(questID, uiMapID)
C_TaskQuest.GetQuestProgressBarInfo(questID)
C_TaskQuest.GetQuestTimeLeftMinutes(questID)
C_TaskQuest.GetQuestTimeLeftSeconds(questID)
C_TaskQuest.GetQuestTooltipUIWidgetSet(questID)
C_TaskQuest.GetQuestZoneID(questID)
C_TaskQuest.GetQuestsOnMap(uiMapID)
C_TaskQuest.GetThreatQuests()
C_TaskQuest.IsActive(questID)
C_TaskQuest.RequestPreloadRewardData(questID)
RaidLocks ✪
C_RaidLocks.GetRedirectedDifficultyID(mapID, difficultyID)
C_RaidLocks.IsEncounterComplete(mapID, encounterID, difficultyID)
RecruitAFriend ✪
C_RecruitAFriend.CanSummonFriend(guid)
C_RecruitAFriend.ClaimActivityReward(activityID, acceptanceID)
C_RecruitAFriend.ClaimNextReward(rafVersion)
C_RecruitAFriend.GenerateRecruitmentLink()
C_RecruitAFriend.GetRAFInfo()
C_RecruitAFriend.GetRAFSystemInfo()
C_RecruitAFriend.GetRecruitActivityRequirementsText(activityID, acceptanceID)
C_RecruitAFriend.GetRecruitInfo()
C_RecruitAFriend.GetSummonFriendCooldown()
C_RecruitAFriend.IsEnabled()
C_RecruitAFriend.IsRecruitAFriendLinked(guid)
C_RecruitAFriend.IsRecruitingEnabled()
C_RecruitAFriend.RemoveRAFRecruit(wowAccountGUID)
C_RecruitAFriend.RequestUpdatedRecruitmentInfo()
C_RecruitAFriend.SummonFriend(target, "name")
RAF_INFO_UPDATED: info
RAF_RECRUITING_ENABLED_STATUS: enabled
RAF_REWARD_CLAIM_FAILED
RAF_SYSTEM_ENABLED_STATUS: enabled
RAF_SYSTEM_INFO_UPDATED: systemInfo
ReportSystem ✪
C_ReportSystem.CanReportPlayer(playerLocation)
C_ReportSystem.CanReportPlayerForLanguage(playerLocation)
C_ReportSystem.GetMajorCategoriesForReportType(reportType)
C_ReportSystem.GetMajorCategoryString(majorCategory)
C_ReportSystem.GetMinorCategoriesForReportTypeAndMajorCategory(reportType, majorCategory)
C_ReportSystem.GetMinorCategoryString(minorCategory)
C_ReportSystem.ReportServerLag()
C_ReportSystem.ReportStuckInCombat()
C_ReportSystem.SendReport(reportInfo, playerLocation)
REPORT_PLAYER_RESULT: success, reportType
ReputationInfo ✪
C_Reputation.AreLegacyReputationsShown()
C_Reputation.CollapseAllFactionHeaders()
C_Reputation.CollapseFactionHeader(factionSortIndex)
C_Reputation.ExpandAllFactionHeaders()
C_Reputation.ExpandFactionHeader(factionSortIndex)
C_Reputation.GetFactionDataByID(factionID)
C_Reputation.GetFactionDataByIndex(factionSortIndex)
C_Reputation.GetFactionParagonInfo(factionID)
C_Reputation.GetGuildFactionData()
C_Reputation.GetGuildRepExpirationTime()
C_Reputation.GetNumFactions()
C_Reputation.GetReputationSortType()
C_Reputation.GetSelectedFaction()
C_Reputation.GetWatchedFactionData()
C_Reputation.IsAccountWideReputation(factionID)
C_Reputation.IsFactionActive(factionSortIndex)
C_Reputation.IsFactionParagon(factionID)
C_Reputation.IsMajorFaction(factionID)
C_Reputation.RequestFactionParagonPreloadRewardData(factionID)
C_Reputation.SetFactionActive(factionSortIndex, setActive)
C_Reputation.SetLegacyReputationsShown(showLegacyReputations)
C_Reputation.SetReputationSortType(sortType)
C_Reputation.SetSelectedFaction(factionSortIndex)
C_Reputation.SetWatchedFactionByID(factionID)
C_Reputation.SetWatchedFactionByIndex(factionSortIndex)
C_Reputation.ToggleFactionAtWar(factionSortIndex)
ResearchInfo ✪
C_ResearchInfo.GetDigSitesForMap(uiMapID)
ARCHAEOLOGY_CLOSED
ARCHAEOLOGY_FIND_COMPLETE: numFindsCompleted, totalFinds, researchBranchID
ARCHAEOLOGY_SURVEY_CAST: numFindsCompleted, totalFinds, researchBranchID, successfulFind
ARCHAEOLOGY_TOGGLE
ARTIFACT_DIGSITE_COMPLETE: researchBranchID
RESEARCH_ARTIFACT_COMPLETE: "name"
RESEARCH_ARTIFACT_DIG_SITE_UPDATED
RESEARCH_ARTIFACT_UPDATE
RestrictedActions ✪
InCombatLockdown()
ADDON_ACTION_BLOCKED: "isTainted", "function"
ADDON_ACTION_FORBIDDEN: "isTainted", "function"
MACRO_ACTION_BLOCKED: "function"
MACRO_ACTION_FORBIDDEN: "function"
ReturningPlayerUI ✪
C_ReturningPlayerUI.AcceptPrompt()
C_ReturningPlayerUI.DeclinePrompt()
RETURNING_PLAYER_PROMPT
ScenarioInfo ✪
C_ScenarioInfo.GetCriteriaInfo(criteriaIndex)
C_ScenarioInfo.GetCriteriaInfoByStep(stepID, criteriaIndex)
C_ScenarioInfo.GetJailersTowerTypeString(runType)
C_ScenarioInfo.GetScenarioInfo()
C_ScenarioInfo.GetScenarioStepInfo(scenarioStepID)
JAILERS_TOWER_LEVEL_UPDATE: level, type
SCENARIO_BONUS_OBJECTIVE_COMPLETE: bonusObjectiveID
SCENARIO_BONUS_VISIBILITY_UPDATE
SCENARIO_COMPLETED: questID, xp, money
SCENARIO_CRITERIA_SHOW_STATE_UPDATE: show
SCENARIO_CRITERIA_UPDATE: criteriaID
SCENARIO_POI_UPDATE
SCENARIO_SPELL_UPDATE
SCENARIO_UPDATE: newStep
ScrappingMachineUI ✪
C_ScrappingMachineUI.CloseScrappingMachine()
C_ScrappingMachineUI.DropPendingScrapItemFromCursor(index)
C_ScrappingMachineUI.GetCurrentPendingScrapItemLocationByIndex(index)
C_ScrappingMachineUI.GetScrapSpellID()
C_ScrappingMachineUI.GetScrappingMachineName()
C_ScrappingMachineUI.HasScrappableItems()
C_ScrappingMachineUI.RemoveAllScrapItems()
C_ScrappingMachineUI.RemoveCurrentScrappingItem()
C_ScrappingMachineUI.RemoveItemToScrap(index)
C_ScrappingMachineUI.ScrapItems()
C_ScrappingMachineUI.ValidateScrappingList()
SCRAPPING_MACHINE_ITEM_ADDED: index
SCRAPPING_MACHINE_ITEM_REMOVED: index
SCRAPPING_MACHINE_PENDING_ITEM_CHANGED
SCRAPPING_MACHINE_SCRAPPING_FINISHED
Screen ✪
GetDefaultScale()
GetPhysicalScreenSize()
GetScreenDPIScale()
GetScreenHeight()
GetScreenWidth()
ScriptedAnimations ✪
C_ScriptedAnimations.GetAllScriptedAnimationEffects()
SCRIPTED_ANIMATIONS_UPDATE
ScriptWarnings ✪
LUA_WARNING: warnType, "warningText"
SeasonInfo ✪
C_SeasonInfo.GetCurrentDisplaySeasonExpansion()
C_SeasonInfo.GetCurrentDisplaySeasonID()
SecureTransfer ✪
SECURE_TRANSFER_CANCEL
SECURE_TRANSFER_CONFIRM_SEND_MAIL
SECURE_TRANSFER_CONFIRM_TRADE_ACCEPT
SharedTraits ✪
C_Traits.CanEditConfig(configID)
C_Traits.CanPurchaseRank(configID, nodeID, nodeEntryID)
C_Traits.CanRefundRank(configID, nodeID)
C_Traits.CascadeRepurchaseRanks(configID, nodeID, entryID)
C_Traits.ClearCascadeRepurchaseHistory(configID)
C_Traits.CloseTraitSystemInteraction()
C_Traits.CommitConfig(configID)
C_Traits.ConfigHasStagedChanges(configID)
C_Traits.GenerateImportString(configID)
C_Traits.GenerateInspectImportString("target")
C_Traits.GetConditionInfo(configID, condID)
C_Traits.GetConfigIDBySystemID(systemID)
C_Traits.GetConfigIDByTreeID(treeID)
C_Traits.GetConfigInfo(configID)
C_Traits.GetConfigsByType(configType)
C_Traits.GetDefinitionInfo(definitionID)
C_Traits.GetEntryInfo(configID, entryID)
C_Traits.GetLoadoutSerializationVersion()
C_Traits.GetNodeCost(configID, nodeID)
C_Traits.GetNodeInfo(configID, nodeID)
C_Traits.GetStagedChanges(configID)
C_Traits.GetStagedChangesCost(configID)
C_Traits.GetSubTreeInfo(configID, subTreeID)
C_Traits.GetSystemIDByTreeID(treeID)
C_Traits.GetTraitCurrencyInfo(traitCurrencyID)
C_Traits.GetTraitDescription(entryID, rank)
C_Traits.GetTraitSystemFlags(configID)
C_Traits.GetTraitSystemWidgetSetID(configID)
C_Traits.GetTreeCurrencyInfo(configID, treeID, excludeStagedChanges)
C_Traits.GetTreeHash(treeID)
C_Traits.GetTreeInfo(configID, treeID)
C_Traits.GetTreeNodes(treeID)
C_Traits.HasValidInspectData()
C_Traits.IsReadyForCommit()
C_Traits.PurchaseRank(configID, nodeID)
C_Traits.RefundAllRanks(configID, nodeID)
C_Traits.RefundRank(configID, nodeID, clearEdges)
C_Traits.ResetTree(configID, treeID)
C_Traits.ResetTreeByCurrency(configID, treeID, traitCurrencyID)
C_Traits.RollbackConfig(configID)
C_Traits.SetSelection(configID, nodeID, nodeEntryID, clearEdges)
C_Traits.StageConfig(configID)
C_Traits.TalentTestUnlearnSpells()
CONFIG_COMMIT_FAILED: configID
TRAIT_COND_INFO_CHANGED: condID
TRAIT_CONFIG_CREATED: configInfo
TRAIT_CONFIG_DELETED: configID
TRAIT_CONFIG_LIST_UPDATED
TRAIT_CONFIG_UPDATED: configID
TRAIT_NODE_CHANGED: nodeID
TRAIT_NODE_CHANGED_PARTIAL: ID, info
TRAIT_NODE_ENTRY_UPDATED: nodeEntryID
TRAIT_SUB_TREE_CHANGED: subTreeID
TRAIT_SYSTEM_INTERACTION_STARTED: treeID
TRAIT_SYSTEM_NPC_CLOSED
TRAIT_TREE_CHANGED: treeID
TRAIT_TREE_CURRENCY_INFO_UPDATED: treeID
SkillInfo ✪
SKILL_LINES_CHANGED
SlashCommand ✪
AreDangerousScriptsAllowed()
SetAllowDangerousScripts(allowed)
SocialQueue ✪
C_SocialQueue.GetAllGroups(allowNonJoinable, allowNonQueuedGroups)
C_SocialQueue.GetConfig()
C_SocialQueue.GetGroupForPlayer(playerGUID)
C_SocialQueue.GetGroupInfo(groupGUID)
C_SocialQueue.GetGroupMembers(groupGUID)
C_SocialQueue.GetGroupQueues(groupGUID)
C_SocialQueue.RequestToJoin(groupGUID, applyAsTank, applyAsHealer, applyAsDamage)
C_SocialQueue.SignalToastDisplayed(groupGUID, priority)
SOCIAL_QUEUE_CONFIG_UPDATED
SOCIAL_QUEUE_UPDATE: groupGUID, numAddedItems
SocialRestrictions ✪
C_SocialRestrictions.AcknowledgeRegionalChatDisabled()
C_SocialRestrictions.CanReceiveChat()
C_SocialRestrictions.CanSendChat()
C_SocialRestrictions.IsChatDisabled()
C_SocialRestrictions.IsMuted()
C_SocialRestrictions.IsSilenced()
C_SocialRestrictions.IsSquelched()
C_SocialRestrictions.SetChatDisabled(disabled)
ALERT_REGIONAL_CHAT_DISABLED
CHAT_DISABLED_CHANGE_FAILED: disabled
CHAT_DISABLED_CHANGED: disabled
Soulbinds ✪
C_Soulbinds.ActivateSoulbind(soulbindID)
C_Soulbinds.CanActivateSoulbind(soulbindID)
C_Soulbinds.CanModifySoulbind()
C_Soulbinds.CanResetConduitsInSoulbind(soulbindID)
C_Soulbinds.CanSwitchActiveSoulbindTreeBranch()
C_Soulbinds.CloseUI()
C_Soulbinds.CommitPendingConduitsInSoulbind(soulbindID)
C_Soulbinds.FindNodeIDActuallyInstalled(soulbindID, conduitID)
C_Soulbinds.FindNodeIDAppearingInstalled(soulbindID, conduitID)
C_Soulbinds.FindNodeIDPendingInstall(soulbindID, conduitID)
C_Soulbinds.FindNodeIDPendingUninstall(soulbindID, conduitID)
C_Soulbinds.GetActiveSoulbindID()
C_Soulbinds.GetConduitCollection(conduitType)
C_Soulbinds.GetConduitCollectionCount()
C_Soulbinds.GetConduitCollectionData(conduitID)
C_Soulbinds.GetConduitCollectionDataAtCursor()
C_Soulbinds.GetConduitCollectionDataByVirtualID(virtualID)
C_Soulbinds.GetConduitDisplayed(nodeID)
C_Soulbinds.GetConduitHyperlink(conduitID, rank)
C_Soulbinds.GetConduitIDPendingInstall(nodeID)
C_Soulbinds.GetConduitQuality(conduitID, rank)
C_Soulbinds.GetConduitRank(conduitID)
C_Soulbinds.GetConduitSpellID(conduitID, conduitRank)
C_Soulbinds.GetInstalledConduitID(nodeID)
C_Soulbinds.GetNode(nodeID)
C_Soulbinds.GetSoulbindData(soulbindID)
C_Soulbinds.GetSpecsAssignedToSoulbind(soulbindID)
C_Soulbinds.GetTree(treeID)
C_Soulbinds.HasAnyInstalledConduitInSoulbind(soulbindID)
C_Soulbinds.HasAnyPendingConduits()
C_Soulbinds.HasPendingConduitsInSoulbind(soulbindID)
C_Soulbinds.IsConduitInstalled(nodeID)
C_Soulbinds.IsConduitInstalledInSoulbind(soulbindID, conduitID)
C_Soulbinds.IsItemConduitByItemInfo(itemInfo)
C_Soulbinds.IsNodePendingModify(nodeID)
C_Soulbinds.IsUnselectedConduitPendingInSoulbind(soulbindID)
C_Soulbinds.ModifyNode(nodeID, conduitID, type)
C_Soulbinds.SelectNode(nodeID)
C_Soulbinds.UnmodifyNode(nodeID)
SOULBIND_ACTIVATED: soulbindID
SOULBIND_CONDUIT_COLLECTION_CLEARED
SOULBIND_CONDUIT_COLLECTION_REMOVED: conduitID
SOULBIND_CONDUIT_COLLECTION_UPDATED: collectionData
SOULBIND_CONDUIT_INSTALLED: nodeID, data
SOULBIND_CONDUIT_UNINSTALLED: nodeID, data
SOULBIND_FORGE_INTERACTION_ENDED
SOULBIND_FORGE_INTERACTION_STARTED
SOULBIND_NODE_LEARNED: nodeID
SOULBIND_NODE_UNLEARNED: nodeID
SOULBIND_NODE_UPDATED: nodeID
SOULBIND_PATH_CHANGED
SOULBIND_PENDING_CONDUIT_CHANGED: nodeID, conduitID
Sound ✪
C_Sound.GetSoundScaledVolume(soundHandle)
C_Sound.IsPlaying(soundHandle)
C_Sound.PlayItemSound(soundType, itemLocation)
C_Sound.PlayVocalErrorSound(vocalErrorSoundID)
SOUND_DEVICE_UPDATE
SOUNDKIT_FINISHED: soundHandle
SpecializationInfo ✪
C_SpecializationInfo.CanPlayerUsePVPTalentUI()
C_SpecializationInfo.CanPlayerUseTalentSpecUI()
C_SpecializationInfo.CanPlayerUseTalentUI()
C_SpecializationInfo.GetAllSelectedPvpTalentIDs()
C_SpecializationInfo.GetClassIDFromSpecID(specID)
C_SpecializationInfo.GetInspectSelectedPvpTalent(inspectedUnit, talentIndex)
C_SpecializationInfo.GetNumSpecializationsForClassID(specID)
C_SpecializationInfo.GetPvpTalentAlertStatus()
C_SpecializationInfo.GetPvpTalentInfo(talentID)
C_SpecializationInfo.GetPvpTalentSlotInfo(talentIndex)
C_SpecializationInfo.GetPvpTalentSlotUnlockLevel(talentIndex)
C_SpecializationInfo.GetPvpTalentUnlockLevel(talentID)
C_SpecializationInfo.GetSpecIDs(specSetID)
C_SpecializationInfo.GetSpellsDisplay(specializationID)
C_SpecializationInfo.IsInitialized()
C_SpecializationInfo.IsPvpTalentLocked(talentID)
C_SpecializationInfo.MatchesCurrentSpecSet(specSetID)
C_SpecializationInfo.SetPetSpecialization(specIndex, petNumber)
C_SpecializationInfo.SetPvpTalentLocked(talentID, locked)
C_SpecializationInfo.SetSpecialization(specIndex)
ACTIVE_TALENT_GROUP_CHANGED: curr, prev
CONFIRM_TALENT_WIPE: cost, respecType
PET_SPECIALIZATION_CHANGED
PLAYER_LEARN_PVP_TALENT_FAILED
PLAYER_LEARN_TALENT_FAILED
PLAYER_PVP_TALENT_UPDATE
PLAYER_TALENT_UPDATE
SPEC_INVOLUNTARILY_CHANGED: isPet
TALENTS_INVOLUNTARILY_RESET: isPetTalents
SpecializationShared ✪
GetSpecializationInfoForClassID(classID, index, gender)
GetSpecializationInfoForSpecID(specID, gender)
GetSpecializationNameForSpecID(specID, gender)
Spell ✪
C_Spell.DoesSpellExist(spellIdentifier)
C_Spell.GetDeadlyDebuffInfo(spellIdentifier)
C_Spell.GetMawPowerBorderAtlasBySpellID(spellID)
C_Spell.GetMawPowerLinkBySpellID(spellID)
C_Spell.GetOverrideSpell(spellIdentifier, spec, onlyKnown, ignoreOverrideSpellID)
C_Spell.GetSchoolString(schoolMask)
C_Spell.GetSpellAutoCast(spellIdentifier)
C_Spell.GetSpellCastCount(spellIdentifier)
C_Spell.GetSpellCharges(spellIdentifier)
C_Spell.GetSpellCooldown(spellIdentifier)
C_Spell.GetSpellDescription(spellIdentifier)
C_Spell.GetSpellIDForSpellIdentifier(spellIdentifier)
C_Spell.GetSpellInfo(spellIdentifier)
C_Spell.GetSpellLevelLearned(spellIdentifier)
C_Spell.GetSpellLink(spellIdentifier, glyphID)
C_Spell.GetSpellLossOfControlCooldown(spellIdentifier)
C_Spell.GetSpellName(spellIdentifier)
C_Spell.GetSpellPowerCost(spellIdentifier)
C_Spell.GetSpellQueueWindow()
C_Spell.GetSpellSkillLineAbilityRank(spellIdentifier)
C_Spell.GetSpellSubtext(spellIdentifier)
C_Spell.GetSpellTexture(spellIdentifier)
C_Spell.GetSpellTradeSkillLink(spellIdentifier)
C_Spell.IsAutoAttackSpell(spellIdentifier)
C_Spell.IsAutoRepeatSpell(spellIdentifier)
C_Spell.IsClassTalentSpell(spellIdentifier)
C_Spell.IsCurrentSpell(spellIdentifier)
C_Spell.IsPressHoldReleaseSpell(spellIdentifier)
C_Spell.IsPvPTalentSpell(spellIdentifier)
C_Spell.IsRangedAutoAttackSpell(spellIdentifier)
C_Spell.IsSpellDataCached(spellIdentifier)
C_Spell.IsSpellDisabled(spellIdentifier)
C_Spell.IsSpellHarmful(spellIdentifier)
C_Spell.IsSpellHelpful(spellIdentifier)
C_Spell.IsSpellInRange(spellIdentifier, targetUnit)
C_Spell.IsSpellPassive(spellIdentifier)
C_Spell.IsSpellUsable(spellIdentifier)
C_Spell.PickupSpell(spellIdentifier)
C_Spell.RequestLoadSpellData(spellIdentifier)
C_Spell.SetSpellAutoCastEnabled(spellIdentifier, enabled)
C_Spell.SpellHasRange(spellIdentifier)
C_Spell.TargetSpellIsEnchanting()
C_Spell.TargetSpellJumpsUpgradeTrack()
C_Spell.TargetSpellReplacesBonusTree()
C_Spell.ToggleSpellAutoCast(spellIdentifier)
ENCHANT_SPELL_COMPLETED: successful, enchantedItem
ENCHANT_SPELL_SELECTED
SPELL_DATA_LOAD_RESULT: spellID, success
SPELL_TEXT_UPDATE: spellID
UPDATE_SPELL_TARGET_ITEM_CONTEXT
SpellActivationOverlay ✪
SPELL_ACTIVATION_OVERLAY_GLOW_HIDE: spellID
SPELL_ACTIVATION_OVERLAY_GLOW_SHOW: spellID
SPELL_ACTIVATION_OVERLAY_HIDE: spellID
SPELL_ACTIVATION_OVERLAY_SHOW: spellID, overlayFileDataID, locationType, scale, r, g, b
SpellBook ✪
C_SpellBook.CastSpellBookItem(spellBookItemSlotIndex, spellBookItemSpellBank, targetSelf)
C_SpellBook.ContainsAnyDisenchantSpell()
C_SpellBook.FindSpellBookSlotForSpell(spellIdentifier, includeHidden, includeFlyouts, includeFutureSpells, includeOffSpec)
C_SpellBook.GetCurrentLevelSpells(level)
C_SpellBook.GetNumSpellBookSkillLines()
C_SpellBook.GetSkillLineIndexByID(skillLineID)
C_SpellBook.GetSpellBookItemAutoCast(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.GetSpellBookItemCastCount(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.GetSpellBookItemCharges(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.GetSpellBookItemCooldown(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.GetSpellBookItemDescription(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.GetSpellBookItemInfo(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.GetSpellBookItemLevelLearned(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.GetSpellBookItemLink(spellBookItemSlotIndex, spellBookItemSpellBank, glyphID)
C_SpellBook.GetSpellBookItemLossOfControlCooldown(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.GetSpellBookItemName(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.GetSpellBookItemPowerCost(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.GetSpellBookItemSkillLineIndex(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.GetSpellBookItemTexture(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.GetSpellBookItemTradeSkillLink(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.GetSpellBookItemType(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.GetSpellBookSkillLineInfo(skillLineIndex)
C_SpellBook.GetTrackedNameplateCooldownSpells()
C_SpellBook.HasPetSpells()
C_SpellBook.IsAutoAttackSpellBookItem(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.IsClassTalentSpellBookItem(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.IsPvPTalentSpellBookItem(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.IsRangedAutoAttackSpellBookItem(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.IsSpellBookItemHarmful(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.IsSpellBookItemHelpful(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.IsSpellBookItemInRange(spellBookItemSlotIndex, spellBookItemSpellBank, targetUnit)
C_SpellBook.IsSpellBookItemOffSpec(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.IsSpellBookItemPassive(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.IsSpellBookItemUsable(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.PickupSpellBookItem(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.SetSpellBookItemAutoCastEnabled(spellBookItemSlotIndex, spellBookItemSpellBank, enabled)
C_SpellBook.SpellBookItemHasRange(spellBookItemSlotIndex, spellBookItemSpellBank)
C_SpellBook.ToggleSpellBookItemAutoCast(spellBookItemSlotIndex, spellBookItemSpellBank)
CURRENT_SPELL_CAST_CHANGED: cancelledCast
LEARNED_SPELL_IN_SKILL_LINE: spellID, skillLineIndex, isGuildPerkSpell
MAX_SPELL_START_RECOVERY_OFFSET_CHANGED: clampedNewQueueWindowMs
PLAYER_TOTEM_UPDATE: totemSlot
SPELL_FLYOUT_UPDATE: flyoutID, spellID, isLearned
SPELL_PUSHED_TO_ACTIONBAR: spellID, slot, page
SPELL_PUSHED_TO_FLYOUT_ON_ACTIONBAR: spellID, flyoutSlot, flyoutPage
SPELL_UPDATE_CHARGES
SPELL_UPDATE_COOLDOWN
SPELL_UPDATE_ICON
SPELL_UPDATE_USABLE
SPELLS_CHANGED
START_AUTOREPEAT_SPELL
STOP_AUTOREPEAT_SPELL
UNIT_SPELLCAST_SENT: "unit", "target", castGUID, spellID
UPDATE_SHAPESHIFT_COOLDOWN
UPDATE_SHAPESHIFT_FORM
UPDATE_SHAPESHIFT_FORMS
UPDATE_SHAPESHIFT_USABLE
SplashScreen ✪
C_SplashScreen.AcknowledgeSplash()
C_SplashScreen.CanViewSplashScreen()
C_SplashScreen.RequestLatestSplashScreen(fromGameMenu)
OPEN_SPLASH_SCREEN: info
StableInfo ✪
C_StableInfo.ClosePetStables()
C_StableInfo.GetActivePetList()
C_StableInfo.GetAvailablePetSpecInfos()
C_StableInfo.GetNumActivePets()
C_StableInfo.GetNumStablePets()
C_StableInfo.GetStablePetFoodTypes(index)
C_StableInfo.GetStablePetInfo(index)
C_StableInfo.GetStabledPetList()
C_StableInfo.IsAtStableMaster()
C_StableInfo.IsPetFavorite(slot)
C_StableInfo.PickupStablePet(index)
C_StableInfo.SetPetFavorite(slot, isFavorite)
C_StableInfo.SetPetSlot(index, slot)
PET_INFO_UPDATE
PET_STABLE_CLOSED
PET_STABLE_FAVORITES_UPDATED
PET_STABLE_SHOW
PET_STABLE_UPDATE
StorePublic ✪
C_StorePublic.DoesGroupHavePurchaseableProducts(groupID)
C_StorePublic.IsDisabledByParentalControls()
C_StorePublic.IsEnabled()
Streaming ✪
GetAvailableBandwidth()
GetBackgroundLoadingStatus()
GetDownloadedPercentage()
GetFileStreamingStatus()
StringUtil ✪
StripHyperlinks("text", maintainColor, maintainBrackets, stripNewlines, maintainAtlases)
SummonInfo ✪
C_SummonInfo.CancelSummon()
C_SummonInfo.ConfirmSummon()
C_SummonInfo.GetSummonConfirmAreaName()
C_SummonInfo.GetSummonConfirmSummoner()
C_SummonInfo.GetSummonConfirmTimeLeft()
C_SummonInfo.GetSummonReason()
C_SummonInfo.IsSummonSkippingStartExperience()
SuperTrackManager ✪
C_SuperTrack.ClearAllSuperTracked()
C_SuperTrack.ClearSuperTrackedContent()
C_SuperTrack.ClearSuperTrackedMapPin()
C_SuperTrack.GetHighestPrioritySuperTrackingType()
C_SuperTrack.GetNextWaypointForMap(uiMapID)
C_SuperTrack.GetSuperTrackedContent()
C_SuperTrack.GetSuperTrackedItemName()
C_SuperTrack.GetSuperTrackedMapPin()
C_SuperTrack.GetSuperTrackedQuestID()
C_SuperTrack.GetSuperTrackedVignette()
C_SuperTrack.IsSuperTrackingAnything()
C_SuperTrack.IsSuperTrackingContent()
C_SuperTrack.IsSuperTrackingCorpse()
C_SuperTrack.IsSuperTrackingMapPin()
C_SuperTrack.IsSuperTrackingQuest()
C_SuperTrack.IsSuperTrackingUserWaypoint()
C_SuperTrack.SetSuperTrackedContent(trackableType, trackableID)
C_SuperTrack.SetSuperTrackedMapPin(type, typeID)
C_SuperTrack.SetSuperTrackedQuestID(questID)
C_SuperTrack.SetSuperTrackedUserWaypoint(superTracked)
C_SuperTrack.SetSuperTrackedVignette(vignetteGUID)
SUPER_TRACKING_CHANGED
SUPER_TRACKING_PATH_UPDATED
SystemInfo ✪
C_System.GetFrameStack()
CAPTUREFRAMES_FAILED
CAPTUREFRAMES_SUCCEEDED
DISABLE_TAXI_BENCHMARK
ENABLE_TAXI_BENCHMARK
FIRST_FRAME_RENDERED
GENERIC_ERROR: "errorMessage"
GLOBAL_MOUSE_DOWN: "button"
GLOBAL_MOUSE_UP: "button"
INITIAL_HOTFIXES_APPLIED
LOC_RESULT: "result"
LOGOUT_CANCEL
PLAYER_CAMPING
PLAYER_ENTERING_WORLD: isInitialLogin, isReloadingUi
PLAYER_LEAVING_WORLD
PLAYER_LOGIN
PLAYER_LOGOUT
PLAYER_QUITING
SEARCH_DB_LOADED
STREAMING_ICON: streamingStatus
SYSMSG: "string", r, g, b
TIME_PLAYED_MSG: totalTimePlayed, timePlayedThisLevel
UI_ERROR_MESSAGE: errorType, "message"
UI_ERROR_POPUP: errorType, "message"
UI_INFO_MESSAGE: errorType, "message"
VARIABLES_LOADED
WOW_MOUSE_NOT_FOUND
SystemTime ✪
GetGameTime()
GetLocalGameTime()
GetServerTime()
GetSessionTime()
GetTickTime()
GetTime()
IsUsingFixedTimeStep()
TalkingHead ✪
TALKINGHEAD_CLOSE
TALKINGHEAD_REQUESTED
TargetScript ✪
AssistUnit("name", exactMatch)
AttackTarget()
ClearFocus()
ClearTarget()
FocusUnit("name")
IsTargetLoose()
TargetDirectionEnemy(facing, coneAngle)
TargetDirectionFinished()
TargetDirectionFriend(facing, coneAngle)
TargetLastEnemy()
TargetLastFriend()
TargetLastTarget()
TargetNearest(reverse)
TargetNearestEnemy(reverse)
TargetNearestEnemyPlayer(reverse)
TargetNearestFriend(reverse)
TargetNearestFriendPlayer(reverse)
TargetNearestPartyMember(reverse)
TargetNearestRaidMember(reverse)
TargetPriorityHighlightEnd()
TargetPriorityHighlightStart(useStartDelay)
TargetToggle()
TargetUnit("name", exactMatch)
TaxiMap ✪
C_TaxiMap.GetAllTaxiNodes(uiMapID)
C_TaxiMap.GetTaxiNodesForMap(uiMapID)
C_TaxiMap.ShouldMapShowTaxiNodes(uiMapID)
TAXI_NODE_STATUS_CHANGED
TAXIMAP_CLOSED
TAXIMAP_OPENED: system
TextureUtils ✪
C_Texture.ClearTitleIconTexture(texture)
C_Texture.GetAtlasElementID(atlas)
C_Texture.GetAtlasID(atlas)
C_Texture.GetAtlasInfo(atlas)
C_Texture.GetCraftingReagentQualityChatIcon(quality)
C_Texture.GetFilenameFromFileDataID(fileDataID)
C_Texture.GetTitleIconTexture("titleID", version, callback)
C_Texture.IsTitleIconTextureReady("titleID", version)
C_Texture.SetTitleIconTexture(texture, "titleID", version)
Threat ✪
GetThreatStatusColor(gameErrorIndex)
IsThreatWarningEnabled()
TimerunningUI ✪
REMIX_END_OF_EVENT
Title ✪
GetCurrentTitle()
GetNumTitles()
GetTitleName(titleMaskID)
IsTitleKnown(titleMaskID)
SetCurrentTitle(titleMaskID)
TooltipComparison ✪
C_TooltipComparison.GetItemComparisonDelta(comparisonItem, equippedItem, pairedItem, addPairedStats)
C_TooltipComparison.GetItemComparisonInfo(comparisonItem)
TooltipInfo ✪
C_TooltipInfo.GetAchievementByID(achievementID)
C_TooltipInfo.GetAction(actionID)
C_TooltipInfo.GetArtifactItem()
C_TooltipInfo.GetArtifactPowerByID(powerID)
C_TooltipInfo.GetAzeriteEssence(essenceID, rank)
C_TooltipInfo.GetAzeriteEssenceSlot(slot)
C_TooltipInfo.GetAzeritePower(itemID, itemLevel, powerID, "owningItemLink")
C_TooltipInfo.GetBackpackToken(index)
C_TooltipInfo.GetBagItem(bagIndex, slotIndex)
C_TooltipInfo.GetBagItemChild(bagIndex, slotIndex, equipSlotIndex)
C_TooltipInfo.GetBuybackItem(index)
C_TooltipInfo.GetCompanionPet(petGUID)
C_TooltipInfo.GetConduit(conduitID, conduitRank)
C_TooltipInfo.GetCurrencyByID(currencyID, amount)
C_TooltipInfo.GetCurrencyToken(tokenIndex)
C_TooltipInfo.GetEnhancedConduit(conduitID, rank)
C_TooltipInfo.GetEquipmentSet(setID)
C_TooltipInfo.GetExistingSocketGem(index, toDestroy)
C_TooltipInfo.GetGuildBankItem(tab, slot)
C_TooltipInfo.GetHeirloomByItemID(itemID)
C_TooltipInfo.GetHyperlink("hyperlink", optionalArg1, optionalArg2, hideVendorPrice)
C_TooltipInfo.GetInboxItem(messageIndex, attachmentIndex)
C_TooltipInfo.GetInstanceLockEncountersComplete(index)
C_TooltipInfo.GetInventoryItem(unit, slot, hideUselessStats)
C_TooltipInfo.GetInventoryItemByID(itemID)
C_TooltipInfo.GetItemByGUID(guid)
C_TooltipInfo.GetItemByID(itemID, quality)
C_TooltipInfo.GetItemByItemModifiedAppearanceID(itemModifiedAppearanceID)
C_TooltipInfo.GetItemInteractionItem()
C_TooltipInfo.GetItemKey(itemID, itemLevel, itemSuffix, requiredLevel)
C_TooltipInfo.GetLFGDungeonReward(dungeonID, lootIndex)
C_TooltipInfo.GetLFGDungeonShortageReward(dungeonID, shortageSeverity, lootIndex)
C_TooltipInfo.GetLootCurrency(slot)
C_TooltipInfo.GetLootItem(slot)
C_TooltipInfo.GetLootRollItem(id)
C_TooltipInfo.GetMerchantCostItem(slot, costIndex)
C_TooltipInfo.GetMerchantItem(slot)
C_TooltipInfo.GetMinimapMouseover()
C_TooltipInfo.GetMountBySpellID(spellID, checkIndoors)
C_TooltipInfo.GetOwnedItemByID(itemID)
C_TooltipInfo.GetPetAction(slot)
C_TooltipInfo.GetPossession(slot)
C_TooltipInfo.GetPvpBrawl(isSpecial)
C_TooltipInfo.GetPvpTalent(talentID, isInspect, groupIndex, talentIndex)
C_TooltipInfo.GetQuestCurrency("type", currencyIndex)
C_TooltipInfo.GetQuestItem("type", itemIndex, allowCollectionText)
C_TooltipInfo.GetQuestLogCurrency("type", currencyIndex, questID)
C_TooltipInfo.GetQuestLogItem("type", itemIndex, questID, allowCollectionText)
C_TooltipInfo.GetQuestLogSpecialItem(questIndex)
C_TooltipInfo.GetQuestPartyProgress(questID, omitTitle, ignoreActivePlayer)
C_TooltipInfo.GetRecipeRankInfo(recipeID, rank)
C_TooltipInfo.GetRecipeReagentItem(recipeSpellID, dataSlotIndex)
C_TooltipInfo.GetRecipeResultItem(recipeID, craftingReagents, recraftItemGUID, recipeLevel, overrideQualityID)
C_TooltipInfo.GetRecipeResultItemForOrder(recipeID, craftingReagents, orderID, recipeLevel, overrideQualityID)
C_TooltipInfo.GetRuneforgeResultItem(itemGUID, itemLevel, powerID, modifiers)
C_TooltipInfo.GetSendMailItem(attachmentIndex)
C_TooltipInfo.GetShapeshift(slot)
C_TooltipInfo.GetSlottedKeystone()
C_TooltipInfo.GetSocketGem(index)
C_TooltipInfo.GetSocketedItem()
C_TooltipInfo.GetSocketedRelic(slotIndex)
C_TooltipInfo.GetSpellBookItem(spellBookItemSlotIndex, spellBookItemSpellBank)
C_TooltipInfo.GetSpellByID(spellID, isPet, showSubtext, dontOverride, difficultyID, isLink)
C_TooltipInfo.GetTalent(talentID, isInspect, groupIndex)
C_TooltipInfo.GetTotem(slot)
C_TooltipInfo.GetToyByItemID(itemID)
C_TooltipInfo.GetTradePlayerItem(slot)
C_TooltipInfo.GetTradeTargetItem(slot)
C_TooltipInfo.GetTrainerService(serviceIndex)
C_TooltipInfo.GetTraitEntry(entryID, rank)
C_TooltipInfo.GetTransmogrifyItem(transmogLocation)
C_TooltipInfo.GetUnit(unit, hideStatus)
C_TooltipInfo.GetUnitAura(unitToken, index, "filter")
C_TooltipInfo.GetUnitBuff(unitToken, index, "filter")
C_TooltipInfo.GetUnitBuffByAuraInstanceID("unitTokenString", auraInstanceID, "filter")
C_TooltipInfo.GetUnitDebuff(unitToken, index, "filter")
C_TooltipInfo.GetUnitDebuffByAuraInstanceID("unitTokenString", auraInstanceID, "filter")
C_TooltipInfo.GetUpgradeItem()
C_TooltipInfo.GetVoidDepositItem(slot)
C_TooltipInfo.GetVoidItem(tab, slot)
C_TooltipInfo.GetVoidWithdrawalItem(slot)
C_TooltipInfo.GetWeeklyReward(itemDBID)
C_TooltipInfo.GetWorldCursor()
C_TooltipInfo.GetWorldLootObject("unitTokenString")
HIDE_HYPERLINK_TOOLTIP
SHOW_HYPERLINK_TOOLTIP: "hyperlink"
TOOLTIP_DATA_UPDATE: dataInstanceID
Totem ✪
DestroyTotem(slot)
GetTotemCannotDismiss(slot)
GetTotemInfo(slot)
GetTotemTimeLeft(slot)
TargetTotem(slot)
ToyBoxInfo ✪
C_ToyBoxInfo.ClearFanfare(itemID)
C_ToyBoxInfo.IsToySourceValid(source)
C_ToyBoxInfo.IsUsingDefaultFilters()
C_ToyBoxInfo.NeedsFanfare(itemID)
C_ToyBoxInfo.SetDefaultFilters()
NEW_TOY_ADDED: itemID
TOYS_UPDATED: itemID, isNew, hasFanfare
TradeInfo ✪
PLAYER_TRADE_CURRENCY
PLAYER_TRADE_MONEY
TRADE_ACCEPT_UPDATE: playerAccepted, targetAccepted
TRADE_CLOSED
TRADE_CURRENCY_CHANGED
TRADE_MONEY_CHANGED
TRADE_PLAYER_ITEM_CHANGED: tradeSlotIndex
TRADE_POTENTIAL_BIND_ENCHANT: canBecomeBoundForTrade
TRADE_POTENTIAL_REMOVE_TRANSMOG: "itemLink", tradeSlotIndex
TRADE_REQUEST: "name"
TRADE_REQUEST_CANCEL
TRADE_SHOW
TRADE_TARGET_ITEM_CHANGED: tradeSlotIndex
TRADE_UPDATE
TradeSkillUI ✪
C_TradeSkillUI.CanStoreEnchantInItem(itemGUID)
C_TradeSkillUI.CancelProfessionRespec()
C_TradeSkillUI.CheckRespecNPC()
C_TradeSkillUI.CloseTradeSkill()
C_TradeSkillUI.ConfirmProfessionRespec()
C_TradeSkillUI.CraftEnchant(recipeSpellID, numCasts, craftingReagents, itemTarget, applyConcentration)
C_TradeSkillUI.CraftRecipe(recipeSpellID, numCasts, craftingReagents, recipeLevel, orderID, applyConcentration)
C_TradeSkillUI.CraftSalvage(recipeSpellID, numCasts, itemTarget, craftingReagents, applyConcentration)
C_TradeSkillUI.DoesRecraftingRecipeAcceptItem(itemLocation, recipeID)
C_TradeSkillUI.GetAllProfessionTradeSkillLines()
C_TradeSkillUI.GetBaseProfessionInfo()
C_TradeSkillUI.GetChildProfessionInfo()
C_TradeSkillUI.GetChildProfessionInfos()
C_TradeSkillUI.GetConcentrationCurrencyID(skillLineID)
C_TradeSkillUI.GetCraftableCount(recipeSpellID, recipeLevel)
C_TradeSkillUI.GetCraftingOperationInfo(recipeID, craftingReagents, allocationItemGUID, applyConcentration)
C_TradeSkillUI.GetCraftingOperationInfoForOrder(recipeID, craftingReagents, orderID, applyConcentration)
C_TradeSkillUI.GetCraftingReagentBonusText(recipeSpellID, craftingReagentIndex, craftingReagents, allocationItemGUID)
C_TradeSkillUI.GetCraftingTargetItems(itemIDs)
C_TradeSkillUI.GetEnchantItems(recipeID)
C_TradeSkillUI.GetFactionSpecificOutputItem(recipeSpellID)
C_TradeSkillUI.GetGatheringOperationInfo(recipeID)
C_TradeSkillUI.GetHideUnownedFlags(recipeID)
C_TradeSkillUI.GetItemCraftedQualityByItemInfo(itemInfo)
C_TradeSkillUI.GetItemReagentQualityByItemInfo(itemInfo)
C_TradeSkillUI.GetItemSlotModifications(itemGUID)
C_TradeSkillUI.GetItemSlotModificationsForOrder(orderID)
C_TradeSkillUI.GetOriginalCraftRecipeID(itemGUID)
C_TradeSkillUI.GetProfessionByInventorySlot(slot)
C_TradeSkillUI.GetProfessionChildSkillLineID()
C_TradeSkillUI.GetProfessionForCursorItem()
C_TradeSkillUI.GetProfessionInfoByRecipeID(recipeID)
C_TradeSkillUI.GetProfessionInfoBySkillLineID(skillLineID)
C_TradeSkillUI.GetProfessionInventorySlots()
C_TradeSkillUI.GetProfessionNameForSkillLineAbility(skillLineAbilityID)
C_TradeSkillUI.GetProfessionSkillLineID(profession)
C_TradeSkillUI.GetProfessionSlots(profession)
C_TradeSkillUI.GetProfessionSpells(professionID, skillLineID)
C_TradeSkillUI.GetQualitiesForRecipe(recipeID)
C_TradeSkillUI.GetReagentDifficultyText(craftingReagentIndex, craftingReagents)
C_TradeSkillUI.GetReagentRequirementItemIDs(itemID)
C_TradeSkillUI.GetReagentSlotStatus(mcrSlotID, recipeSpellID, skillLineAbilityID)
C_TradeSkillUI.GetRecipeDescription(recipeID, craftingReagents, allocationItemGUID)
C_TradeSkillUI.GetRecipeFixedReagentItemLink(recipeID, dataSlotIndex)
C_TradeSkillUI.GetRecipeInfo(recipeSpellID, recipeLevel)
C_TradeSkillUI.GetRecipeInfoForSkillLineAbility(skillLineAbilityID, recipeLevel)
C_TradeSkillUI.GetRecipeOutputItemData(recipeSpellID, reagents, allocationItemGUID, overrideQualityID, recraftOrderID)
C_TradeSkillUI.GetRecipeQualityItemIDs(recipeSpellID)
C_TradeSkillUI.GetRecipeQualityReagentItemLink(recipeID, dataSlotIndex, qualityIndex)
C_TradeSkillUI.GetRecipeRequirements(recipeID)
C_TradeSkillUI.GetRecipeSchematic(recipeSpellID, isRecraft, recipeLevel)
C_TradeSkillUI.GetRecipesTracked(isRecraft)
C_TradeSkillUI.GetRecraftItems(recipeID)
C_TradeSkillUI.GetRecraftRemovalWarnings(itemGUID, replacedItemIDs)
C_TradeSkillUI.GetRemainingRecasts()
C_TradeSkillUI.GetSalvagableItemIDs(recipeID)
C_TradeSkillUI.GetShowLearned()
C_TradeSkillUI.GetShowUnlearned()
C_TradeSkillUI.GetSkillLineForGear(itemInfo)
C_TradeSkillUI.GetSourceTypeFilter()
C_TradeSkillUI.GetTradeSkillDisplayName(skillLineID)
C_TradeSkillUI.HasFavoriteOrderRecipes()
C_TradeSkillUI.IsEnchantTargetValid(recipeID, itemGUID, craftingReagents)
C_TradeSkillUI.IsGuildTradeSkillsEnabled()
C_TradeSkillUI.IsNPCCrafting()
C_TradeSkillUI.IsNearProfessionSpellFocus(profession)
C_TradeSkillUI.IsOriginalCraftRecipeLearned(itemGUID)
C_TradeSkillUI.IsRecipeFirstCraft(recipeID)
C_TradeSkillUI.IsRecipeInBaseSkillLine(recipeID)
C_TradeSkillUI.IsRecipeInSkillLine(recipeID, skillLineID)
C_TradeSkillUI.IsRecipeProfessionLearned(recipeID)
C_TradeSkillUI.IsRecipeTracked(recipeID, isRecraft)
C_TradeSkillUI.IsRecraftItemEquipped(recraftItemGUID)
C_TradeSkillUI.IsRecraftReagentValid(itemGUID, itemID)
C_TradeSkillUI.IsRuneforging()
C_TradeSkillUI.OpenRecipe(recipeID)
C_TradeSkillUI.OpenTradeSkill(skillLineID)
C_TradeSkillUI.RecraftLimitCategoryValid(reagentItemID)
C_TradeSkillUI.RecraftRecipe(itemGUID, craftingReagents, removedModifications, applyConcentration)
C_TradeSkillUI.RecraftRecipeForOrder(orderID, itemGUID, craftingReagents, removedModifications, applyConcentration)
C_TradeSkillUI.SetOnlyShowAvailableForOrders(flag)
C_TradeSkillUI.SetProfessionChildSkillLineID(skillLineID)
C_TradeSkillUI.SetRecipeTracked(recipeID, tracked, isRecraft)
C_TradeSkillUI.SetShowLearned(flag)
C_TradeSkillUI.SetShowUnlearned(flag)
C_TradeSkillUI.SetSourceTypeFilter(sourceTypeFilter)
CRAFTING_DETAILS_UPDATE
NEW_RECIPE_LEARNED: recipeID, recipeLevel, baseRecipeID
OBLITERUM_FORGE_PENDING_ITEM_CHANGED
OPEN_RECIPE_RESPONSE: recipeID, skillLineID, expansionSkillLineID
PROFESSION_RESPEC_CONFIRMATION: "skillName"
TRACKED_RECIPE_UPDATE: recipeID, tracked
TRADE_SKILL_CLOSE
TRADE_SKILL_CRAFT_BEGIN: recipeSpellID
TRADE_SKILL_CRAFTING_REAGENT_BONUS_TEXT_UPDATED: itemID
TRADE_SKILL_CURRENCY_REWARD_RESULT: data
TRADE_SKILL_DATA_SOURCE_CHANGED
TRADE_SKILL_DATA_SOURCE_CHANGING
TRADE_SKILL_DETAILS_UPDATE
TRADE_SKILL_FAVORITES_CHANGED: isFavorite, recipeSpellID
TRADE_SKILL_ITEM_CRAFTED_RESULT: data
TRADE_SKILL_ITEM_UPDATE: itemGUID
TRADE_SKILL_LIST_UPDATE
TRADE_SKILL_NAME_UPDATE
TRADE_SKILL_SHOW
UPDATE_TRADESKILL_CAST_STOPPED: isScrapping
Trainer ✪
TRAINER_CLOSED
TRAINER_DESCRIPTION_UPDATE
TRAINER_SERVICE_INFO_NAME_UPDATE
TRAINER_SHOW
TRAINER_UPDATE
Transmogrify ✪
C_Transmog.ApplyAllPending(currentSpecOnly)
C_Transmog.CanHaveSecondaryAppearanceForSlotID(slotID)
C_Transmog.CanTransmogItem(itemInfo)
C_Transmog.CanTransmogItemWithItem(targetItemInfo, sourceItemInfo)
C_Transmog.ClearAllPending()
C_Transmog.ClearPending(transmogLocation)
C_Transmog.Close()
C_Transmog.ExtractTransmogIDList("input")
C_Transmog.GetAllSetAppearancesByID(setID)
C_Transmog.GetApplyCost()
C_Transmog.GetApplyWarnings()
C_Transmog.GetBaseCategory(transmogID)
C_Transmog.GetCreatureDisplayIDForSource(itemModifiedAppearanceID)
C_Transmog.GetItemIDForSource(itemModifiedAppearanceID)
C_Transmog.GetPending(transmogLocation)
C_Transmog.GetSlotEffectiveCategory(transmogLocation)
C_Transmog.GetSlotForInventoryType(inventoryType)
C_Transmog.GetSlotInfo(transmogLocation)
C_Transmog.GetSlotUseError(transmogLocation)
C_Transmog.GetSlotVisualInfo(transmogLocation)
C_Transmog.IsAtTransmogNPC()
C_Transmog.IsSlotBeingCollapsed(transmogLocation)
C_Transmog.LoadOutfit(outfitID)
C_Transmog.SetPending(transmogLocation, pendingInfo)
TRANSMOG_COLLECTION_CAMERA_UPDATE
TRANSMOG_COLLECTION_ITEM_FAVORITE_UPDATE: itemAppearanceID, isFavorite
TRANSMOG_COLLECTION_ITEM_UPDATE
TRANSMOG_COLLECTION_SOURCE_ADDED: itemModifiedAppearanceID
TRANSMOG_COLLECTION_SOURCE_REMOVED: itemModifiedAppearanceID
TRANSMOG_COLLECTION_UPDATED: collectionIndex, modID, itemAppearanceID, "reason"
TRANSMOG_COSMETIC_COLLECTION_SOURCE_ADDED: itemModifiedAppearanceID
TRANSMOG_SEARCH_UPDATED: searchType, collectionType
TRANSMOG_SETS_UPDATE_FAVORITE
TRANSMOG_SOURCE_COLLECTABILITY_UPDATE: itemModifiedAppearanceID, collectable
TRANSMOGRIFY_CLOSE
TRANSMOGRIFY_ITEM_UPDATE
TRANSMOGRIFY_OPEN
TRANSMOGRIFY_SUCCESS: transmogLocation
TRANSMOGRIFY_UPDATE: transmogLocation, "action"
TransmogrifyCollection ✪
C_TransmogCollection.AccountCanCollectSource(sourceID)
C_TransmogCollection.AreAllCollectionTypeFiltersChecked()
C_TransmogCollection.AreAllSourceTypeFiltersChecked()
C_TransmogCollection.CanAppearanceHaveIllusion(appearanceID)
C_TransmogCollection.ClearNewAppearance(visualID)
C_TransmogCollection.ClearSearch(searchType)
C_TransmogCollection.DeleteOutfit(outfitID)
C_TransmogCollection.EndSearch()
C_TransmogCollection.GetAllAppearanceSources(itemAppearanceID)
C_TransmogCollection.GetAllFactionsShown()
C_TransmogCollection.GetAllRacesShown()
C_TransmogCollection.GetAppearanceCameraID(itemAppearanceID, variation)
C_TransmogCollection.GetAppearanceCameraIDBySource(itemModifiedAppearanceID, variation)
C_TransmogCollection.GetAppearanceInfoBySource(itemModifiedAppearanceID)
C_TransmogCollection.GetAppearanceSourceDrops(itemModifiedAppearanceID)
C_TransmogCollection.GetAppearanceSourceInfo(itemModifiedAppearanceID)
C_TransmogCollection.GetAppearanceSources(appearanceID, categoryType, transmogLocation)
C_TransmogCollection.GetArtifactAppearanceStrings(appearanceID)
C_TransmogCollection.GetCategoryAppearances(category, transmogLocation)
C_TransmogCollection.GetCategoryCollectedCount(category)
C_TransmogCollection.GetCategoryForItem(itemModifiedAppearanceID)
C_TransmogCollection.GetCategoryInfo(category)
C_TransmogCollection.GetCategoryTotal(category)
C_TransmogCollection.GetClassFilter()
C_TransmogCollection.GetCollectedShown()
C_TransmogCollection.GetFallbackWeaponAppearance()
C_TransmogCollection.GetFilteredCategoryCollectedCount(category)
C_TransmogCollection.GetFilteredCategoryTotal(category)
C_TransmogCollection.GetIllusionInfo(illusionID)
C_TransmogCollection.GetIllusionStrings(illusionID)
C_TransmogCollection.GetIllusions()
C_TransmogCollection.GetInspectItemTransmogInfoList()
C_TransmogCollection.GetIsAppearanceFavorite(itemAppearanceID)
C_TransmogCollection.GetItemInfo(itemInfo)
C_TransmogCollection.GetItemTransmogInfoListFromOutfitHyperlink("hyperlink")
C_TransmogCollection.GetLatestAppearance()
C_TransmogCollection.GetNumMaxOutfits()
C_TransmogCollection.GetNumTransmogSources()
C_TransmogCollection.GetOutfitHyperlinkFromItemTransmogInfoList(itemTransmogInfoList)
C_TransmogCollection.GetOutfitInfo(outfitID)
C_TransmogCollection.GetOutfitItemTransmogInfoList(outfitID)
C_TransmogCollection.GetOutfits()
C_TransmogCollection.GetPairedArtifactAppearance(itemModifiedAppearanceID)
C_TransmogCollection.GetSourceIcon(itemModifiedAppearanceID)
C_TransmogCollection.GetSourceInfo(sourceID)
C_TransmogCollection.GetSourceItemID(itemModifiedAppearanceID)
C_TransmogCollection.GetSourceRequiredHoliday(itemModifiedAppearanceID)
C_TransmogCollection.GetUncollectedShown()
C_TransmogCollection.GetValidAppearanceSourcesForClass(appearanceID, classID, categoryType, transmogLocation)
C_TransmogCollection.HasFavorites()
C_TransmogCollection.IsAppearanceHiddenVisual(appearanceID)
C_TransmogCollection.IsCategoryValidForItem(category, itemInfo)
C_TransmogCollection.IsNewAppearance(visualID)
C_TransmogCollection.IsSearchDBLoading()
C_TransmogCollection.IsSearchInProgress(searchType)
C_TransmogCollection.IsSourceTypeFilterChecked(index)
C_TransmogCollection.IsUsingDefaultFilters()
C_TransmogCollection.ModifyOutfit(outfitID, itemTransmogInfoList)
C_TransmogCollection.NewOutfit("name", icon, itemTransmogInfoList)
C_TransmogCollection.PlayerCanCollectSource(sourceID)
C_TransmogCollection.PlayerHasTransmog(itemID, itemAppearanceModID)
C_TransmogCollection.PlayerHasTransmogByItemInfo(itemInfo)
C_TransmogCollection.PlayerHasTransmogItemModifiedAppearance(itemModifiedAppearanceID)
C_TransmogCollection.PlayerKnowsSource(sourceID)
C_TransmogCollection.RenameOutfit(outfitID, "name")
C_TransmogCollection.SearchProgress(searchType)
C_TransmogCollection.SearchSize(searchType)
C_TransmogCollection.SetAllCollectionTypeFilters(checked)
C_TransmogCollection.SetAllFactionsShown(shown)
C_TransmogCollection.SetAllRacesShown(shown)
C_TransmogCollection.SetAllSourceTypeFilters(checked)
C_TransmogCollection.SetClassFilter(classID)
C_TransmogCollection.SetCollectedShown(shown)
C_TransmogCollection.SetDefaultFilters()
C_TransmogCollection.SetIsAppearanceFavorite(itemAppearanceID, isFavorite)
C_TransmogCollection.SetSearch(searchType, "searchText")
C_TransmogCollection.SetSearchAndFilterCategory(category)
C_TransmogCollection.SetSourceTypeFilter(index, checked)
C_TransmogCollection.SetUncollectedShown(shown)
C_TransmogCollection.UpdateUsableAppearances()
TransmogrifySets ✪
C_TransmogSets.ClearLatestSource()
C_TransmogSets.ClearNewSource(sourceID)
C_TransmogSets.ClearSetNewSourcesForSlot(transmogSetID, slot)
C_TransmogSets.GetAllSets()
C_TransmogSets.GetAllSourceIDs(transmogSetID)
C_TransmogSets.GetBaseSetID(transmogSetID)
C_TransmogSets.GetBaseSets()
C_TransmogSets.GetBaseSetsFilter(index)
C_TransmogSets.GetCameraIDs()
C_TransmogSets.GetFilteredBaseSetsCounts()
C_TransmogSets.GetFullBaseSetsCounts()
C_TransmogSets.GetIsFavorite(transmogSetID)
C_TransmogSets.GetLatestSource()
C_TransmogSets.GetSetInfo(transmogSetID)
C_TransmogSets.GetSetNewSources(transmogSetID)
C_TransmogSets.GetSetPrimaryAppearances(transmogSetID)
C_TransmogSets.GetSetsContainingSourceID(sourceID)
C_TransmogSets.GetSourceIDsForSlot(transmogSetID, slot)
C_TransmogSets.GetSourcesForSlot(transmogSetID, slot)
C_TransmogSets.GetTransmogSetsClassFilter()
C_TransmogSets.GetUsableSets()
C_TransmogSets.GetValidBaseSetsCountsForCharacter()
C_TransmogSets.GetValidClassForSet(transmogSetID)
C_TransmogSets.GetVariantSets(transmogSetID)
C_TransmogSets.HasUsableSets()
C_TransmogSets.IsBaseSetCollected(transmogSetID)
C_TransmogSets.IsNewSource(sourceID)
C_TransmogSets.IsSetVisible(transmogSetID)
C_TransmogSets.IsUsingDefaultBaseSetsFilters()
C_TransmogSets.SetBaseSetsFilter(index, isChecked)
C_TransmogSets.SetDefaultBaseSetsFilters()
C_TransmogSets.SetHasNewSources(transmogSetID)
C_TransmogSets.SetHasNewSourcesForSlot(transmogSetID, slot)
C_TransmogSets.SetIsFavorite(transmogSetID, isFavorite)
C_TransmogSets.SetTransmogSetsClassFilter(classID)
TTSSettings ✪
C_TTSSettings.GetChannelEnabled(channelInfo)
C_TTSSettings.GetCharacterSettingsSaved()
C_TTSSettings.GetChatTypeEnabled("chatName")
C_TTSSettings.GetSetting(setting)
C_TTSSettings.GetSpeechRate()
C_TTSSettings.GetSpeechVolume()
C_TTSSettings.GetVoiceOptionID(voiceType)
C_TTSSettings.GetVoiceOptionName(voiceType)
C_TTSSettings.MarkCharacterSettingsSaved()
C_TTSSettings.SetChannelEnabled(channelInfo, newVal)
C_TTSSettings.SetChannelKeyEnabled("channelKey", newVal)
C_TTSSettings.SetChatTypeEnabled("chatName", newVal)
C_TTSSettings.SetDefaultSettings()
C_TTSSettings.SetSetting(setting, newVal)
C_TTSSettings.SetSpeechRate(newVal)
C_TTSSettings.SetSpeechVolume(newVal)
C_TTSSettings.SetVoiceOption(voiceType, voiceID)
C_TTSSettings.SetVoiceOptionName(voiceType, "voiceName")
C_TTSSettings.ShouldOverrideMessage(language, "messageText")
Tutorial ✪
C_Tutorial.AbandonTutorialArea()
C_Tutorial.ReturnToTutorialArea()
LEAVING_TUTORIAL_AREA
NPE_TUTORIAL_UPDATE
TUTORIAL_HIGHLIGHT_SPELL: spellID, "tutorialGlobalStringTag"
TUTORIAL_TRIGGER: tutorialIndex, forceShow
TUTORIAL_UNHIGHLIGHT_SPELL
UI ✪
C_UI.DoesAnyDisplayHaveNotch()
C_UI.GetTopLeftNotchSafeRegion()
C_UI.GetTopRightNotchSafeRegion()
C_UI.GetUIParent()
C_UI.GetWorldFrame()
C_UI.Reload()
C_UI.ShouldUIParentAvoidNotch()
NOTCHED_DISPLAY_MODE_CHANGED
UI_SCALE_CHANGED
UIActionHandlerSystem ✪
HANDLE_UI_ACTION: actionType
UIColor ✪
C_UIColor.GetColors()
UIEventToastManagerInfo ✪
C_EventToastManager.GetLevelUpDisplayToastsFromLevel(level)
C_EventToastManager.GetNextToastToDisplay()
C_EventToastManager.RemoveCurrentToast()
DISPLAY_EVENT_TOAST_LINK: "link"
DISPLAY_EVENT_TOASTS
UIFrameManager ✪
C_FrameManager.GetFrameVisibilityState(frameType)
FRAME_MANAGER_UPDATE_ALL
FRAME_MANAGER_UPDATE_FRAME: type, show
UIMacros ✪
C_Macro.GetMacroName(macroId)
C_Macro.GetSelectedMacroIcon(macroId)
C_Macro.RunMacroText("text", "button")
C_Macro.SetMacroExecuteLineCallback(cb)
UPDATE_MACROS
UIModifiedInstance ✪
C_ModifiedInstance.GetModifiedInstanceInfoFromMapID(mapID)
UISystemVisibilityManager ✪
C_SystemVisibilityManager.IsSystemVisible(system)
SYSTEM_VISIBILITY_CHANGED
UITimer ✪
C_Timer.After(seconds, callback)
C_Timer.NewTicker(seconds, callback, iterations)
C_Timer.NewTimer(seconds, callback)
UIWidgetManager ✪
C_UIWidgetManager.GetAllWidgetsBySetID(setID)
C_UIWidgetManager.GetBelowMinimapWidgetSetID()
C_UIWidgetManager.GetBulletTextListWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetCaptureBarWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetCaptureZoneVisualizationInfo(widgetID)
C_UIWidgetManager.GetDiscreteProgressStepsVisualizationInfo(widgetID)
C_UIWidgetManager.GetDoubleIconAndTextWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetDoubleStateIconRowVisualizationInfo(widgetID)
C_UIWidgetManager.GetDoubleStatusBarWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetFillUpFramesWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetHorizontalCurrenciesWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetIconAndTextWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetIconTextAndBackgroundWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetIconTextAndCurrenciesWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetItemDisplayVisualizationInfo(widgetID)
C_UIWidgetManager.GetMapPinAnimationWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetObjectiveTrackerWidgetSetID()
C_UIWidgetManager.GetPowerBarWidgetSetID()
C_UIWidgetManager.GetScenarioHeaderCurrenciesAndBackgroundWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetScenarioHeaderDelvesWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetScenarioHeaderTimerWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetSpacerVisualizationInfo(widgetID)
C_UIWidgetManager.GetSpellDisplayVisualizationInfo(widgetID)
C_UIWidgetManager.GetStackedResourceTrackerWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetStatusBarWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetTextColumnRowVisualizationInfo(widgetID)
C_UIWidgetManager.GetTextWithStateWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetTextWithSubtextWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetTextureAndTextRowVisualizationInfo(widgetID)
C_UIWidgetManager.GetTextureAndTextVisualizationInfo(widgetID)
C_UIWidgetManager.GetTextureWithAnimationVisualizationInfo(widgetID)
C_UIWidgetManager.GetTopCenterWidgetSetID()
C_UIWidgetManager.GetTugOfWarWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetUnitPowerBarWidgetVisualizationInfo(widgetID)
C_UIWidgetManager.GetWidgetSetInfo(widgetSetID)
C_UIWidgetManager.GetZoneControlVisualizationInfo(widgetID)
C_UIWidgetManager.RegisterUnitForWidgetUpdates("unitToken", isGuid)
C_UIWidgetManager.SetProcessingUnit(unit)
C_UIWidgetManager.SetProcessingUnitGuid(unit)
C_UIWidgetManager.UnregisterUnitForWidgetUpdates("unitToken", isGuid)
UPDATE_ALL_UI_WIDGETS
UPDATE_UI_WIDGET: widgetInfo
Unit ✪
CanEjectPassengerFromSeat(virtualSeatIndex)
CanSwitchVehicleSeat()
ClosestGameObjectPosition(gameObjectID)
ClosestUnitPosition(creatureID)
EjectPassengerFromSeat(virtualSeatIndex)
GetComboPoints(unit, target)
GetNegativeCorruptionEffectInfo()
GetUnitChargedPowerPoints(unit)
GetUnitEmpowerHoldAtMaxTime(unit)
GetUnitEmpowerMinHoldTime(unit)
GetUnitEmpowerStageDuration(unit, index)
GetUnitHealthModifier(unit)
GetUnitMaxHealthModifier(unit)
GetUnitPowerBarInfo(unitToken)
GetUnitPowerBarInfoByID(barID)
GetUnitPowerBarStrings(unitToken)
GetUnitPowerBarStringsByID(barID)
GetUnitPowerBarTextureInfo(unitToken, textureIndex, timerIndex)
GetUnitPowerBarTextureInfoByID(barID, textureIndex)
GetUnitPowerModifier(unit)
GetUnitSpeed(unit)
GetUnitTotalModifiedMaxHealthPercent(unit)
GetVehicleUIIndicator(vehicleIndicatorID)
GetVehicleUIIndicatorSeat(vehicleIndicatorID, indicatorSeatIndex)
IsFalling(unit)
IsFlying(unit)
IsPlayerInGuildFromGUID(playerGUID)
IsSubmerged(unit)
IsSwimming(unit)
IsUnitModelReadyForUI(unitToken)
PlayerIsPVPInactive(unit)
PlayerVehicleHasComboPoints()
ReportPlayerIsPVPAFK(unit)
ResistancePercent(resistance, casterLevel)
SetPortraitTexture(textureObject, unitToken, disableMasking)
SetPortraitTextureFromCreatureDisplayID(textureObject, creatureDisplayID)
SetUnitCursorTexture(textureObject, unit, style, includeLowPriority)
ShowBossFrameWhenUninteractable(unit)
UnitAffectingCombat(unit)
UnitAlliedRaceInfo(unit)
UnitArmor(unit)
UnitAttackPower(unit)
UnitAttackSpeed(unit)
UnitBattlePetLevel(unit)
UnitBattlePetSpeciesID(unit)
UnitBattlePetType(unit)
UnitCanAssist(unit, target)
UnitCanAttack(unit, target)
UnitCanCooperate(unit, target)
UnitCanPetBattle(unit, target)
UnitCastingInfo(unit)
UnitChannelInfo("unitToken")
UnitChromieTimeID(unit)
UnitClass(unit)
UnitClassBase(unit)
UnitClassification(unit)
UnitControllingVehicle(unit)
UnitCreatureFamily(unit)
UnitCreatureType(unit)
UnitDamage(unit)
UnitDetailedThreatSituation(unit, mobGUID)
UnitDistanceSquared(unit)
UnitEffectiveLevel("name")
UnitExists(unit)
UnitFactionGroup("unitName", checkDisplayRace)
UnitFullName("unit")
UnitGUID(unit)
UnitGetIncomingHeals(unit, healerGUID)
UnitGetTotalAbsorbs(unit)
UnitGetTotalHealAbsorbs(unit)
UnitGroupRolesAssigned(unit)
UnitGroupRolesAssignedEnum(unit)
UnitHPPerStamina(unit)
UnitHasRelicSlot(unit)
UnitHasVehiclePlayerFrameUI(unit)
UnitHasVehicleUI(unit)
UnitHealthMax(unit)
UnitHealth(unit, usePredicted)
UnitHonor(unit)
UnitHonorLevel(unit)
UnitHonorMax(unit)
UnitInAnyGroup(unit, partyIndex)
UnitInBattleground(unit, partyIndex)
UnitInParty(unit, partyIndex)
UnitInPartyIsAI(unit)
UnitInPartyShard(unit)
UnitInRaid(unit, partyIndex)
UnitInRange(unit)
UnitInSubgroup(unit, partyIndex)
UnitInVehicle(unit)
UnitInVehicleControlSeat(unit)
UnitInVehicleHidesPetFrame(unit)
UnitIsAFK(unit)
UnitIsBattlePet(unit)
UnitIsBattlePetCompanion(unit)
UnitIsBossMob(unit)
UnitIsCharmed(unit)
UnitIsConnected(unit)
UnitIsControlling(unit)
UnitIsCorpse(unit)
UnitIsDND(unit)
UnitIsDead(unit)
UnitIsDeadOrGhost(unit)
UnitIsEnemy(unit, target)
UnitIsFeignDeath(unit)
UnitIsFriend(unit, target)
UnitIsGameObject(unit)
UnitIsGhost(unit)
UnitIsInMyGuild("unit")
UnitIsInteractable(unit)
UnitIsMercenary("name")
UnitIsOtherPlayersBattlePet(unit)
UnitIsOtherPlayersPet(unit)
UnitIsOwnerOrControllerOfUnit(controllingUnit, controlledUnit)
UnitIsPVP(unit)
UnitIsPVPFreeForAll(unit)
UnitIsPVPSanctuary(unit)
UnitIsPlayer(unit, partyIndex)
UnitIsPossessed(unit)
UnitIsQuestBoss(unit)
UnitIsRaidOfficer(unit)
UnitIsSameServer("unitName")
UnitIsTapDenied(unit)
UnitIsTrivial(unit)
UnitIsUnconscious(unit)
UnitIsUnit("unitName1", "unitName2")
UnitIsVisible(unit)
UnitIsWildBattlePet(unit)
UnitLevel("name")
UnitName("unit")
UnitNameUnmodified("unit")
UnitNameplateShowsWidgetsOnly(unit)
UnitNumPowerBarTimers(unit)
UnitOnTaxi(unit)
UnitPVPName(unit)
UnitPartialPower(unitToken, powerType, unmodified)
UnitPercentHealthFromGUID(unitGUID)
UnitPhaseReason(unit)
UnitPlayerControlled(unit)
UnitPlayerOrPetInParty(unit, partyIndex)
UnitPlayerOrPetInRaid(unit, partyIndex)
UnitPosition(unit)
UnitPower(unitToken, powerType, unmodified)
UnitPowerBarID(unitToken)
UnitPowerBarTimerInfo(unit, index)
UnitPowerDisplayMod(powerType)
UnitPowerMax(unitToken, powerType, unmodified)
UnitPowerType(unit, index)
UnitPvpClassification(unit)
UnitQuestTrivialLevelRange(unit)
UnitQuestTrivialLevelRangeScaling(unit)
UnitRace("name")
UnitRangedAttackPower(unit)
UnitRangedDamage(unit)
UnitReaction(unit, target)
UnitRealmRelationship(unit)
UnitSelectionColor(unit, useExtendedColors)
UnitSelectionType(unit, useExtendedColors)
UnitSex(unit)
UnitShouldDisplayName(unit)
UnitSpellHaste(unit)
UnitStagger(unit)
UnitStat(unit, index)
UnitSwitchToVehicleSeat(unit, virtualSeatIndex)
UnitTargetsVehicleInRaidUI(unit)
UnitThreatPercentageOfLead(unit, mobGUID)
UnitThreatSituation(unit, mobGUID)
UnitTokenFromGUID(unitGUID)
UnitTreatAsPlayerForDisplay(unit)
UnitTrialBankedLevels(unit)
UnitTrialXP(unit)
UnitUsingVehicle(unit)
UnitVehicleSeatCount(unit)
UnitVehicleSeatInfo(unit, virtualSeatIndex)
UnitVehicleSkin(unit)
UnitWeaponAttackPower(unit)
UnitWidgetSet(unit)
UnitXP(unit)
UnitXPMax(unit)
WorldLootObjectExists(unit)
ACTIVE_PLAYER_SPECIALIZATION_CHANGED
ARENA_COOLDOWNS_UPDATE: unitTarget
ARENA_CROWD_CONTROL_SPELL_UPDATE: unitTarget, spellID
AUTOFOLLOW_BEGIN: "name"
AUTOFOLLOW_END
CANCEL_SUMMON
COMBO_TARGET_CHANGED
CONFIRM_BINDER: "areaName"
CONFIRM_SUMMON: summonReason, skippingStartExperience
ECLIPSE_DIRECTION_CHANGE: "direction"
HEARTHSTONE_BOUND
HONOR_XP_UPDATE: unitTarget
INCOMING_RESURRECT_CHANGED: unitTarget
INCOMING_SUMMON_CHANGED: unitTarget
KNOWN_TITLES_UPDATE: unitTarget
LOCALPLAYER_PET_RENAMED
MIRROR_TIMER_PAUSE: "timerName", paused
MIRROR_TIMER_START: "timerName", value, maxValue, scale, paused, "timerLabel"
MIRROR_TIMER_STOP: "timerName"
NEUTRAL_FACTION_SELECT_RESULT: success
OBJECT_ENTERED_AOI: guid
OBJECT_LEFT_AOI: guid
PET_BAR_UPDATE_USABLE
PET_UI_UPDATE
PLAYER_CAN_GLIDE_CHANGED: canGlide
PLAYER_DAMAGE_DONE_MODS: unitTarget
PLAYER_ENTER_COMBAT
PLAYER_FARSIGHT_FOCUS_CHANGED
PLAYER_FLAGS_CHANGED: unitTarget
PLAYER_FOCUS_CHANGED
PLAYER_IMPULSE_APPLIED
PLAYER_IS_GLIDING_CHANGED: isGliding
PLAYER_LEAVE_COMBAT
PLAYER_LEVEL_CHANGED: oldLevel, newLevel, real
PLAYER_LEVEL_UP: level, healthDelta, powerDelta, numNewTalents, numNewPvpTalentSlots, strengthDelta, agilityDelta, staminaDelta, intellectDelta
PLAYER_MOUNT_DISPLAY_CHANGED
PLAYER_PVP_KILLS_CHANGED: unitTarget
PLAYER_PVP_RANK_CHANGED: unitTarget
PLAYER_REGEN_DISABLED
PLAYER_REGEN_ENABLED
PLAYER_SOFT_ENEMY_CHANGED
PLAYER_SOFT_FRIEND_CHANGED
PLAYER_SOFT_INTERACT_CHANGED: oldTarget, newTarget
PLAYER_SOFT_TARGET_INTERACTION
PLAYER_SPECIALIZATION_CHANGED: unitTarget
PLAYER_STARTED_LOOKING
PLAYER_STARTED_MOVING
PLAYER_STARTED_TURNING
PLAYER_STOPPED_LOOKING
PLAYER_STOPPED_MOVING
PLAYER_STOPPED_TURNING
PLAYER_TARGET_CHANGED
PLAYER_TRIAL_XP_UPDATE: unitTarget
PLAYER_UPDATE_RESTING
PLAYER_XP_UPDATE: unitTarget
PORTRAITS_UPDATED
PROVING_GROUNDS_SCORE_UPDATE: points
PVP_TIMER_UPDATE: unitTarget
RUNE_POWER_UPDATE: runeIndex, added
RUNE_TYPE_UPDATE: runeIndex
SHOW_FACTION_SELECT_UI
SPELL_CONFIRMATION_PROMPT: spellID, effectValue, "message", duration, currencyTypesID, currencyCost, currentDifficulty
SPELL_CONFIRMATION_TIMEOUT: spellID, effectValue
UNIT_ABSORB_AMOUNT_CHANGED: unitTarget
UNIT_AREA_CHANGED: unitTarget
UNIT_ATTACK: unitTarget
UNIT_ATTACK_POWER: unitTarget
UNIT_ATTACK_SPEED: unitTarget
UNIT_CHEAT_TOGGLE_EVENT
UNIT_CLASSIFICATION_CHANGED: unitTarget
UNIT_COMBAT: unitTarget, "event", "flagText", amount, schoolMask
UNIT_CONNECTION: unitTarget, isConnected
UNIT_CTR_OPTIONS: unitTarget
UNIT_DAMAGE: unitTarget
UNIT_DEFENSE: unitTarget
UNIT_DISPLAYPOWER: unitTarget
UNIT_DISTANCE_CHECK_UPDATE: unitTarget, isInDistance
UNIT_FACTION: unitTarget
UNIT_FLAGS: unitTarget
UNIT_FORM_CHANGED: unitTarget
UNIT_HEAL_ABSORB_AMOUNT_CHANGED: unitTarget
UNIT_HEAL_PREDICTION: unitTarget
UNIT_HEALTH: unitTarget
UNIT_IN_RANGE_UPDATE: unitTarget, isInRange
UNIT_INVENTORY_CHANGED: unitTarget
UNIT_LEVEL: unitTarget
UNIT_MANA: unitTarget
UNIT_MAX_HEALTH_MODIFIERS_CHANGED: unitTarget, percentMaxHealthAdjusted
UNIT_MAXHEALTH: unitTarget
UNIT_MAXPOWER: unitTarget, "powerType"
UNIT_MODEL_CHANGED: unitTarget
UNIT_NAME_UPDATE: unitTarget
UNIT_OTHER_PARTY_CHANGED: unitTarget
UNIT_PET: unitTarget
UNIT_PET_EXPERIENCE: unitTarget
UNIT_PHASE: unitTarget
UNIT_PORTRAIT_UPDATE: unitTarget
UNIT_POWER_BAR_HIDE: unitTarget
UNIT_POWER_BAR_SHOW: unitTarget
UNIT_POWER_BAR_TIMER_UPDATE: unitTarget
UNIT_POWER_FREQUENT: unitTarget, "powerType"
UNIT_POWER_POINT_CHARGE: unitTarget
UNIT_POWER_UPDATE: unitTarget, "powerType"
UNIT_QUEST_LOG_CHANGED: unitTarget
UNIT_RANGED_ATTACK_POWER: unitTarget
UNIT_RANGEDDAMAGE: unitTarget
UNIT_RESISTANCES: unitTarget
UNIT_SPELL_HASTE: unitTarget
UNIT_SPELLCAST_CHANNEL_START: unitTarget, castGUID, spellID
UNIT_SPELLCAST_CHANNEL_STOP: unitTarget, castGUID, spellID
UNIT_SPELLCAST_CHANNEL_UPDATE: unitTarget, castGUID, spellID
UNIT_SPELLCAST_DELAYED: unitTarget, castGUID, spellID
UNIT_SPELLCAST_EMPOWER_START: unitTarget, castGUID, spellID
UNIT_SPELLCAST_EMPOWER_STOP: unitTarget, castGUID, spellID, complete
UNIT_SPELLCAST_EMPOWER_UPDATE: unitTarget, castGUID, spellID
UNIT_SPELLCAST_FAILED: unitTarget, castGUID, spellID
UNIT_SPELLCAST_FAILED_QUIET: unitTarget, castGUID, spellID
UNIT_SPELLCAST_INTERRUPTED: unitTarget, castGUID, spellID
UNIT_SPELLCAST_INTERRUPTIBLE: unitTarget
UNIT_SPELLCAST_NOT_INTERRUPTIBLE: unitTarget
UNIT_SPELLCAST_RETICLE_CLEAR: unitTarget, castGUID, spellID
UNIT_SPELLCAST_RETICLE_TARGET: unitTarget, castGUID, spellID
UNIT_SPELLCAST_START: unitTarget, castGUID, spellID
UNIT_SPELLCAST_STOP: unitTarget, castGUID, spellID
UNIT_SPELLCAST_SUCCEEDED: unitTarget, castGUID, spellID
UNIT_STATS: unitTarget
UNIT_TARGET: unitTarget
UNIT_TARGETABLE_CHANGED: unitTarget
UNIT_THREAT_LIST_UPDATE: unitTarget
UNIT_THREAT_SITUATION_UPDATE: unitTarget
UPDATE_EXHAUSTION
UPDATE_MOUSEOVER_UNIT
UPDATE_STEALTH
VEHICLE_ANGLE_UPDATE: normalizedPitch, radians
UnitAuras ✪
C_UnitAuras.AddPrivateAuraAnchor(args)
C_UnitAuras.AddPrivateAuraAppliedSound(sound)
C_UnitAuras.AuraIsPrivate(spellID)
C_UnitAuras.GetAuraDataByAuraInstanceID("unitToken", auraInstanceID)
C_UnitAuras.GetAuraDataByIndex("unitToken", index, "filter")
C_UnitAuras.GetAuraDataBySlot("unitToken", slot)
C_UnitAuras.GetAuraDataBySpellName("unitToken", "spellName", "filter")
C_UnitAuras.GetAuraSlots(unitToken, "filter", maxSlots, continuationToken)
C_UnitAuras.GetBuffDataByIndex("unitToken", index, "filter")
C_UnitAuras.GetCooldownAuraBySpellID(spellID)
C_UnitAuras.GetDebuffDataByIndex("unitToken", index, "filter")
C_UnitAuras.GetPlayerAuraBySpellID(spellID)
C_UnitAuras.IsAuraFilteredOutByInstanceID("unitToken", auraInstanceID, "filterFlags")
C_UnitAuras.RemovePrivateAuraAnchor(anchorID)
C_UnitAuras.RemovePrivateAuraAppliedSound(privateAuraSoundID)
C_UnitAuras.SetPrivateWarningTextAnchor(parent, anchor)
C_UnitAuras.WantsAlteredForm("unitToken")
UNIT_AURA: unitTarget, updateInfo
UnitRole ✪
AreClassRolesSoftSuggestions()
CanShowSetRoleButton()
InitiateRolePoll()
UnitGetAvailableRoles(unit)
UnitSetRole(unit, "roleStr")
UnitSetRoleEnum(unit, role)
ROLE_CHANGED_INFORM: "changedName", "fromName", "oldRole", "newRole"
ROLE_POLL_BEGIN: "fromName"
URL ✪
LaunchURL("url")
LoadURLIndex(index, param)
UserFeedback ✪
C_UserFeedback.SubmitBug("bugInfo", suppressNotification)
C_UserFeedback.SubmitSuggestion("suggestion")
Vehicle ✪
PLAYER_GAINS_VEHICLE_DATA: unitTarget, vehicleUIIndicatorID
PLAYER_LOSES_VEHICLE_DATA: unitTarget
UNIT_ENTERED_VEHICLE: unitTarget, showVehicleFrame, isControlSeat, vehicleUIIndicatorID, vehicleGUID, mayChooseExit, hasPitch
UNIT_ENTERING_VEHICLE: unitTarget, showVehicleFrame, isControlSeat, vehicleUIIndicatorID, vehicleGUID, mayChooseExit, hasPitch
UNIT_EXITED_VEHICLE: unitTarget
UNIT_EXITING_VEHICLE: unitTarget
VEHICLE_ANGLE_SHOW: shouldShow
VEHICLE_PASSENGERS_CHANGED
VEHICLE_POWER_SHOW: shouldShow
VEHICLE_UPDATE
Video ✪
C_VideoOptions.GetCurrentGameWindowSize()
C_VideoOptions.GetDefaultGameWindowSize(monitor)
C_VideoOptions.GetGameWindowSizes(monitor, fullscreen)
C_VideoOptions.GetGxAdapterInfo()
C_VideoOptions.SetGameWindowSize(x, y)
ADAPTER_LIST_CHANGED
DISPLAY_SIZE_CHANGED
GLUE_SCREENSHOT_FAILED
GLUE_SCREENSHOT_STARTED
GLUE_SCREENSHOT_SUCCEEDED
GX_RESTARTED
SCREENSHOT_FAILED
SCREENSHOT_STARTED
SCREENSHOT_SUCCEEDED
Vignette ✪
C_VignetteInfo.FindBestUniqueVignette(vignetteGUIDs)
C_VignetteInfo.GetHealthPercent(vignetteGUID)
C_VignetteInfo.GetRecommendedGroupSize(vignetteGUID)
C_VignetteInfo.GetVignetteInfo(vignetteGUID)
C_VignetteInfo.GetVignettePosition(vignetteGUID, uiMapID)
C_VignetteInfo.GetVignettes()
VIGNETTE_MINIMAP_UPDATED: vignetteGUID, onMinimap
VIGNETTES_UPDATED
VoiceChat ✪
C_VoiceChat.ActivateChannel(channelID)
C_VoiceChat.ActivateChannelTranscription(channelID)
C_VoiceChat.BeginLocalCapture(listenToLocalUser)
C_VoiceChat.CanAccessSettings()
C_VoiceChat.CanPlayerUseVoiceChat()
C_VoiceChat.CreateChannel("channelDisplayName")
C_VoiceChat.DeactivateChannel(channelID)
C_VoiceChat.DeactivateChannelTranscription(channelID)
C_VoiceChat.EndLocalCapture()
C_VoiceChat.GetActiveChannelID()
C_VoiceChat.GetActiveChannelType()
C_VoiceChat.GetAvailableInputDevices()
C_VoiceChat.GetAvailableOutputDevices()
C_VoiceChat.GetChannel(channelID)
C_VoiceChat.GetChannelForChannelType(channelType)
C_VoiceChat.GetChannelForCommunityStream(clubId, streamId)
C_VoiceChat.GetCommunicationMode()
C_VoiceChat.GetCurrentVoiceChatConnectionStatusCode()
C_VoiceChat.GetInputVolume()
C_VoiceChat.GetJoinClubVoiceChannelError(clubId)
C_VoiceChat.GetLocalPlayerActiveChannelMemberInfo()
C_VoiceChat.GetLocalPlayerMemberID(channelID)
C_VoiceChat.GetMasterVolumeScale()
C_VoiceChat.GetMemberGUID(memberID, channelID)
C_VoiceChat.GetMemberID(channelID, memberGUID)
C_VoiceChat.GetMemberInfo(memberID, channelID)
C_VoiceChat.GetMemberName(memberID, channelID)
C_VoiceChat.GetMemberVolume(playerLocation)
C_VoiceChat.GetOutputVolume()
C_VoiceChat.GetPTTButtonPressedState()
C_VoiceChat.GetProcesses()
C_VoiceChat.GetPushToTalkBinding()
C_VoiceChat.GetRemoteTtsVoices()
C_VoiceChat.GetTtsVoices()
C_VoiceChat.GetVADSensitivity()
C_VoiceChat.IsChannelJoinPending(channelType, clubId, streamId)
C_VoiceChat.IsDeafened()
C_VoiceChat.IsEnabled()
C_VoiceChat.IsLoggedIn()
C_VoiceChat.IsMemberLocalPlayer(memberID, channelID)
C_VoiceChat.IsMemberMuted(playerLocation)
C_VoiceChat.IsMemberMutedForAll(memberID, channelID)
C_VoiceChat.IsMemberSilenced(memberID, channelID)
C_VoiceChat.IsMuted()
C_VoiceChat.IsParentalDisabled()
C_VoiceChat.IsParentalMuted()
C_VoiceChat.IsPlayerUsingVoice(playerLocation)
C_VoiceChat.IsSilenced()
C_VoiceChat.IsSpeakForMeActive()
C_VoiceChat.IsSpeakForMeAllowed()
C_VoiceChat.IsTranscribing()
C_VoiceChat.IsTranscriptionAllowed()
C_VoiceChat.IsVoiceChatConnected()
C_VoiceChat.LeaveChannel(channelID)
C_VoiceChat.Login()
C_VoiceChat.Logout()
C_VoiceChat.MarkChannelsDiscovered()
C_VoiceChat.RequestJoinAndActivateCommunityStreamChannel(clubId, streamId)
C_VoiceChat.RequestJoinChannelByChannelType(channelType, autoActivate)
C_VoiceChat.SetCommunicationMode(communicationMode)
C_VoiceChat.SetDeafened(isDeafened)
C_VoiceChat.SetInputDevice("deviceID")
C_VoiceChat.SetInputVolume(volume)
C_VoiceChat.SetMasterVolumeScale(scale)
C_VoiceChat.SetMemberMuted(playerLocation, muted)
C_VoiceChat.SetMemberVolume(playerLocation, volume)
C_VoiceChat.SetMuted(isMuted)
C_VoiceChat.SetOutputDevice("deviceID")
C_VoiceChat.SetOutputVolume(volume)
C_VoiceChat.SetPortraitTexture(textureObject, memberID, channelID)
C_VoiceChat.SetPushToTalkBinding("keys")
C_VoiceChat.SetVADSensitivity(sensitivity)
C_VoiceChat.ShouldDiscoverChannels()
C_VoiceChat.SpeakRemoteTextSample("text")
C_VoiceChat.SpeakText(voiceID, "text", destination, rate, volume)
C_VoiceChat.StopSpeakingText()
C_VoiceChat.ToggleDeafened()
C_VoiceChat.ToggleMemberMuted(playerLocation)
C_VoiceChat.ToggleMuted()
VOICE_CHAT_ACTIVE_INPUT_DEVICE_UPDATED
VOICE_CHAT_ACTIVE_OUTPUT_DEVICE_UPDATED
VOICE_CHAT_AUDIO_CAPTURE_ENERGY: isSpeaking, energy
VOICE_CHAT_AUDIO_CAPTURE_STARTED
VOICE_CHAT_AUDIO_CAPTURE_STOPPED
VOICE_CHAT_CHANNEL_ACTIVATED: channelID
VOICE_CHAT_CHANNEL_DEACTIVATED: channelID
VOICE_CHAT_CHANNEL_DISPLAY_NAME_CHANGED: channelID, "channelDisplayName"
VOICE_CHAT_CHANNEL_JOINED: status, channelID, channelType, clubId, streamId
VOICE_CHAT_CHANNEL_MEMBER_ACTIVE_STATE_CHANGED: memberID, channelID, isActive
VOICE_CHAT_CHANNEL_MEMBER_ADDED: memberID, channelID
VOICE_CHAT_CHANNEL_MEMBER_ENERGY_CHANGED: memberID, channelID, speakingEnergy
VOICE_CHAT_CHANNEL_MEMBER_GUID_UPDATED: memberID, channelID
VOICE_CHAT_CHANNEL_MEMBER_MUTE_FOR_ALL_CHANGED: memberID, channelID, isMutedForAll
VOICE_CHAT_CHANNEL_MEMBER_MUTE_FOR_ME_CHANGED: memberID, channelID, isMutedForMe
VOICE_CHAT_CHANNEL_MEMBER_REMOVED: memberID, channelID
VOICE_CHAT_CHANNEL_MEMBER_SILENCED_CHANGED: memberID, channelID, isSilenced
VOICE_CHAT_CHANNEL_MEMBER_SPEAKING_STATE_CHANGED: memberID, channelID, isSpeaking
VOICE_CHAT_CHANNEL_MEMBER_STT_MESSAGE: memberID, channelID, "message", "language"
VOICE_CHAT_CHANNEL_MEMBER_VOLUME_CHANGED: memberID, channelID, volume
VOICE_CHAT_CHANNEL_MUTE_STATE_CHANGED: channelID, isMuted
VOICE_CHAT_CHANNEL_PTT_CHANGED: channelID, "pushToTalkSetting"
VOICE_CHAT_CHANNEL_REMOVED: channelID
VOICE_CHAT_CHANNEL_TRANSCRIBING_CHANGED: channelID, isTranscribing
VOICE_CHAT_CHANNEL_TRANSMIT_CHANGED: channelID, isTransmitting
VOICE_CHAT_CHANNEL_VOLUME_CHANGED: channelID, volume
VOICE_CHAT_COMMUNICATION_MODE_CHANGED: communicationMode
VOICE_CHAT_CONNECTION_SUCCESS
VOICE_CHAT_DEAFENED_CHANGED: isDeafened
VOICE_CHAT_ERROR: platformCode, statusCode
VOICE_CHAT_INPUT_DEVICES_UPDATED
VOICE_CHAT_LOGIN: status
VOICE_CHAT_LOGOUT: status
VOICE_CHAT_MUTED_CHANGED: isMuted
VOICE_CHAT_OUTPUT_DEVICES_UPDATED
VOICE_CHAT_PENDING_CHANNEL_JOIN_STATE: channelType, clubId, streamId, pendingJoin
VOICE_CHAT_PTT_BUTTON_PRESSED_STATE_CHANGED: isPressed
VOICE_CHAT_SILENCED_CHANGED: isSilenced
VOICE_CHAT_SPEAK_FOR_ME_ACTIVE_STATUS_UPDATED
VOICE_CHAT_SPEAK_FOR_ME_FEATURE_STATUS_UPDATED
VOICE_CHAT_TTS_PLAYBACK_FAILED: status, utteranceID, destination
VOICE_CHAT_TTS_PLAYBACK_FINISHED: numConsumers, utteranceID, destination
VOICE_CHAT_TTS_PLAYBACK_STARTED: numConsumers, utteranceID, durationMS, destination
VOICE_CHAT_TTS_SPEAK_TEXT_UPDATE: status, utteranceID
VOICE_CHAT_TTS_VOICES_UPDATE
VOICE_CHAT_VAD_SETTINGS_UPDATED
VoidStorageInfo ✪
VOID_DEPOSIT_WARNING: slot, "link"
VOID_STORAGE_CONTENTS_UPDATE
VOID_STORAGE_DEPOSIT_UPDATE: slot
VOID_STORAGE_UPDATE
VOID_TRANSFER_DONE
VOID_TRANSFER_SUCCESS
WarbandSceneInfo ✪
C_WarbandScene.GetRandomEntryID()
C_WarbandScene.GetWarbandSceneEntry(warbandSceneID)
C_WarbandScene.HasWarbandScene(warbandSceneID)
C_WarbandScene.IsFavorite(warbandSceneID)
C_WarbandScene.SearchWarbandSceneEntries(searchParams)
C_WarbandScene.SetFavorite(warbandSceneID, favorite)
NEW_WARBAND_SCENE_ADDED: warbandScenID
WARBAND_SCENE_FAVORITES_UPDATED
WarCampaign ✪
C_CampaignInfo.GetAvailableCampaigns()
C_CampaignInfo.GetCampaignChapterInfo(campaignChapterID)
C_CampaignInfo.GetCampaignID(questID)
C_CampaignInfo.GetCampaignInfo(campaignID)
C_CampaignInfo.GetChapterIDs(campaignID)
C_CampaignInfo.GetCurrentChapterID(campaignID)
C_CampaignInfo.GetFailureReason(campaignID)
C_CampaignInfo.GetState(campaignID)
C_CampaignInfo.IsCampaignQuest(questID)
C_CampaignInfo.SortAsNormalQuest(campaignID)
WeeklyRewards ✪
C_WeeklyRewards.AreRewardsForCurrentRewardPeriod()
C_WeeklyRewards.CanClaimRewards()
C_WeeklyRewards.ClaimReward(id)
C_WeeklyRewards.CloseInteraction()
C_WeeklyRewards.GetActivities(type)
C_WeeklyRewards.GetActivityEncounterInfo(type, index)
C_WeeklyRewards.GetConquestWeeklyProgress()
C_WeeklyRewards.GetDifficultyIDForActivityTier(activityTierID)
C_WeeklyRewards.GetExampleRewardItemHyperlinks(id)
C_WeeklyRewards.GetItemHyperlink(itemDBID)
C_WeeklyRewards.GetNextActivitiesIncrease(activityTierID, level)
C_WeeklyRewards.GetNextMythicPlusIncrease(mythicPlusLevel)
C_WeeklyRewards.GetNumCompletedDungeonRuns()
C_WeeklyRewards.HasAvailableRewards()
C_WeeklyRewards.HasGeneratedRewards()
C_WeeklyRewards.HasInteraction()
C_WeeklyRewards.IsWeeklyChestRetired()
C_WeeklyRewards.OnUIInteract()
C_WeeklyRewards.ShouldShowFinalRetirementMessage()
C_WeeklyRewards.ShouldShowRetirementMessage()
WEEKLY_REWARDS_ITEM_CHANGED
WEEKLY_REWARDS_UPDATE
WorldLootObject ✪
C_WorldLootObject.DoesSlotMatchInventoryType(slot, inventoryType)
C_WorldLootObject.GetWorldLootObjectDistanceSquared(unitToken)
C_WorldLootObject.GetWorldLootObjectInfo(unitToken)
C_WorldLootObject.GetWorldLootObjectInfoByGUID(objectGUID)
C_WorldLootObject.IsWorldLootObject(unitToken)
C_WorldLootObject.IsWorldLootObjectByGUID(guid)
C_WorldLootObject.IsWorldLootObjectInRange(unitToken)
C_WorldLootObject.OnWorldLootObjectClick(unitToken, isLeftClick)
WORLD_LOOT_OBJECT_INFO_UPDATED: guid
WorldSafeLocsUIInternal ✪
C_WorldSafeLocsUIInternal.GetWorldSafeLocs()
WorldStateInfo ✪
CANCEL_PLAYER_COUNTDOWN: initiatedBy, informChat, "initiatedByName"
START_PLAYER_COUNTDOWN: initiatedBy, timeRemaining, totalTime, informChat, "initiatedByName"
START_TIMER: timerType, timeRemaining, totalTime
STOP_TIMER_OF_TYPE: timerType
WORLD_STATE_TIMER_START: timerID
WORLD_STATE_TIMER_STOP: timerID
WowEntitlementInfo ✪
ENTITLEMENT_DELIVERED: entitlementType, textureID, "name", payloadID, showFancyToast
RAF_ENTITLEMENT_DELIVERED: entitlementType, textureID, "name", payloadID, showFancyToast, rafVersion
WowTokenUI ✪
C_WowTokenUI.StartTokenSell(tokenGUID)
TOKEN_AUCTION_SOLD
TOKEN_BUY_CONFIRM_REQUIRED
TOKEN_BUY_RESULT: result
TOKEN_CAN_VETERAN_BUY_UPDATE: result
TOKEN_DISTRIBUTIONS_UPDATED: result
TOKEN_MARKET_PRICE_UPDATED: result
TOKEN_REDEEM_BALANCE_UPDATED
TOKEN_REDEEM_CONFIRM_REQUIRED: choiceType
TOKEN_REDEEM_FRAME_SHOW
TOKEN_REDEEM_GAME_TIME_UPDATED
TOKEN_REDEEM_RESULT: result, choiceType
TOKEN_SELL_CONFIRM_REQUIRED
TOKEN_SELL_CONFIRMED
TOKEN_SELL_RESULT: result
TOKEN_STATUS_CHANGED
XMLUtil ✪
C_XMLUtil.GetTemplateInfo("name")
C_XMLUtil.GetTemplates()
ZoneAbility ✪
C_ZoneAbility.GetActiveAbilities()
C_ZoneAbility.GetZoneAbilityIcon(zoneAbilitySpellID)
ZoneScript ✪
GetAreaText()
GetMinimapZoneText()
GetRealZoneText(mapID)
GetSubZoneText()
GetZoneText()
FrameAPIBlob ✪
:DrawAll()
:DrawBlob(questID, draw)
:DrawNone()
:EnableMerging(enable)
:EnableSmoothing(enable)
:GetMapID()
:SetBorderAlpha(alpha)
:SetBorderScalar(scalar)
:SetBorderTexture(asset)
:SetFillAlpha(alpha)
:SetFillTexture(asset)
:SetMapID(uiMapID)
:SetMergeThreshold(threshold)
:SetNumSplinePoints(numSplinePoints)
FrameAPICharacterModelBase ✪
:ApplySpellVisualKit(spellVisualKitID, oneShot)
:CanSetUnit(unit)
:FreezeAnimation(anim, variation, frame)
:GetDisplayInfo()
:GetDoBlend()
:GetKeepModelOnHide()
:HasAnimation(anim)
:PlayAnimKit(animKit, loop)
:RefreshCamera()
:RefreshUnit()
:SetAnimation(anim, variation)
:SetBarberShopAlternateForm()
:SetCamDistanceScale(scale)
:SetCreature(creatureID, displayID)
:SetDisplayInfo(displayID, mountDisplayID)
:SetDoBlend(doBlend)
:SetItem(itemID, appearanceModID, itemVisualID)
:SetItemAppearance(itemAppearanceID, itemVisualID, itemSubclass)
:SetKeepModelOnHide(keepModelOnHide)
:SetPortraitZoom(zoom)
:SetRotation(radians, animate)
:SetUnit(unit, blend, useNativeForm)
:StopAnimKit()
:ZeroCachedCenterXY()
FrameAPICinematicModel ✪
:EquipItem(itemID)
:InitializeCamera(scaleFactor)
:InitializePanCamera(scaleFactor)
:RefreshCamera()
:SetAnimOffset(offset)
:SetCameraPosition(positionX, positionY, positionZ)
:SetCameraTarget(positionX, positionY, positionZ)
:SetCreatureData(creatureID)
:SetFacingLeft(isFacingLeft)
:SetFadeTimes(fadeInSeconds, fadeOutSeconds)
:SetHeightFactor(factor)
:SetJumpInfo(jumpLength, jumpHeight)
:SetPanDistance(scale)
:SetSpellVisualKit(visualKitID)
:SetTargetDistance(scale)
:StartPan(panType, durationSeconds, doFade, visKitID, startPositionScale, speedMultiplier)
:StopPan()
:UnequipItems()
FrameAPICooldown ✪
:Clear()
:GetCooldownDisplayDuration()
:GetCooldownDuration()
:GetCooldownTimes()
:GetDrawBling()
:GetDrawEdge()
:GetDrawSwipe()
:GetEdgeScale()
:GetReverse()
:GetRotation()
:IsPaused()
:Pause()
:Resume()
:SetBlingTexture(texture, colorR, colorG, colorB, colorA)
:SetCooldown(start, duration, modRate)
:SetCooldownDuration(duration, modRate)
:SetCooldownUNIX(start, duration, modRate)
:SetCountdownAbbrevThreshold(seconds)
:SetCountdownFont("fontName")
:SetDrawBling(drawBling)
:SetDrawEdge(drawEdge)
:SetDrawSwipe(drawSwipe)
:SetEdgeScale(scale)
:SetEdgeTexture(texture, colorR, colorG, colorB, colorA)
:SetHideCountdownNumbers(hideNumbers)
:SetReverse(reverse)
:SetRotation(rotationRadians)
:SetSwipeColor(colorR, colorG, colorB, a)
:SetSwipeTexture(texture, colorR, colorG, colorB, colorA)
:SetTexCoordRange(low, high)
:SetUseCircularEdge(useCircularEdge)
FrameAPIDressUpModel ✪
:Dress()
:GetAutoDress()
:GetItemTransmogInfo(inventorySlot)
:GetItemTransmogInfoList()
:GetObeyHideInTransmogFlag()
:GetSheathed()
:GetUseTransmogChoices()
:GetUseTransmogSkin()
:IsGeoReady()
:IsSlotAllowed(slot)
:IsSlotVisible(slot)
:SetAutoDress(enabled)
:SetItemTransmogInfo(itemTransmogInfo, inventorySlot, ignoreChildItems)
:SetObeyHideInTransmogFlag(enabled)
:SetSheathed(sheathed, hideWeapons)
:SetUseTransmogChoices(enabled)
:SetUseTransmogSkin(enabled)
:TryOn(linkOrItemModifiedAppearanceID, "handSlotName", spellEnchantID)
:Undress()
:UndressSlot(inventorySlot)
FrameAPIFogOfWarFrame ✪
:GetFogOfWarBackgroundAtlas()
:GetFogOfWarBackgroundTexture()
:GetFogOfWarMaskAtlas()
:GetFogOfWarMaskTexture()
:GetMaskScalar()
:GetUiMapID()
:SetFogOfWarBackgroundAtlas(atlas)
:SetFogOfWarBackgroundTexture(asset, horizontalTile, verticalTile)
:SetFogOfWarMaskAtlas(atlas)
:SetFogOfWarMaskTexture(asset)
:SetMaskScalar(scalar)
:SetUiMapID(uiMapID)
FrameAPIModelSceneFrame ✪
:ClearFog()
:CreateActor("name", "template")
:GetActorAtIndex(index)
:GetCameraFarClip()
:GetCameraFieldOfView()
:GetCameraForward()
:GetCameraNearClip()
:GetCameraPosition()
:GetCameraRight()
:GetCameraUp()
:GetDrawLayer()
:GetFogColor()
:GetFogFar()
:GetFogNear()
:GetLightAmbientColor()
:GetLightDiffuseColor()
:GetLightDirection()
:GetLightPosition()
:GetLightType()
:GetNumActors()
:GetViewInsets()
:GetViewTranslation()
:IsLightVisible()
:Project3DPointTo2D(pointX, pointY, pointZ)
:SetCameraFarClip(farClip)
:SetCameraFieldOfView(fov)
:SetCameraNearClip(nearClip)
:SetCameraOrientationByAxisVectors(forwardX, forwardY, forwardZ, rightX, rightY, rightZ, upX, upY, upZ)
:SetCameraOrientationByYawPitchRoll(yaw, pitch, roll)
:SetCameraPosition(positionX, positionY, positionZ)
:SetDesaturation(strength)
:SetDrawLayer(layer)
:SetFogColor(colorR, colorG, colorB)
:SetFogFar(far)
:SetFogNear(near)
:SetLightAmbientColor(colorR, colorG, colorB)
:SetLightDiffuseColor(colorR, colorG, colorB)
:SetLightDirection(directionX, directionY, directionZ)
:SetLightPosition(positionX, positionY, positionZ)
:SetLightType(lightType)
:SetLightVisible(visible)
:SetPaused(paused, affectsGlobalPause)
:SetViewInsets(insets)
:SetViewTranslation(translationX, translationY)
:TakeActor()
FrameAPIModelSceneFrameActor ✪
:AttachToMount(rider, animation, spellKitVisualID)
:CalculateMountScale(rider)
:Dress()
:DressPlayerSlot(invSlot)
:GetAutoDress()
:GetItemTransmogInfo(inventorySlots)
:GetItemTransmogInfoList()
:GetObeyHideInTransmogFlag()
:GetPaused()
:GetSheathed()
:GetUseTransmogChoices()
:GetUseTransmogSkin()
:IsGeoReady()
:IsSlotAllowed(inventorySlots)
:IsSlotVisible(inventorySlots)
:ReleaseFrontEndCharacterDisplays()
:ResetNextHandSlot()
:SetAutoDress(autoDress)
:SetFrontEndLobbyModelFromDefaultCharacterDisplay(characterIndex)
:SetItemTransmogInfo(transmogInfo, inventorySlots, ignoreChildItems)
:SetModelByHyperlink("link")
:SetObeyHideInTransmogFlag(obey)
:SetPaused(paused, affectsGlobalPause)
:SetPlayerModelFromGlues(characterIndex, sheatheWeapons, autoDress, hideWeapons, usePlayerNativeForm)
:SetSheathed(sheathed, hidden)
:SetUseTransmogChoices(use)
:SetUseTransmogSkin(use)
:TryOn("itemLinkOrItemModifiedAppearanceID", "handSlotName", spellEnchantmentID)
:Undress(includeWeapons)
:UndressSlot(inventorySlots)
FrameAPIModelSceneFrameActorBase ✪
:ClearModel()
:GetActiveBoundingBox()
:GetAlpha()
:GetAnimation()
:GetAnimationBlendOperation()
:GetAnimationVariation()
:GetDesaturation()
:GetMaxBoundingBox()
:GetModelFileID()
:GetModelPath()
:GetModelUnitGUID()
:GetParticleOverrideScale()
:GetPitch()
:GetPosition()
:GetRoll()
:GetScale()
:GetSpellVisualKit()
:GetYaw()
:Hide()
:IsLoaded()
:IsShown()
:IsUsingCenterForOrigin()
:IsVisible()
:PlayAnimationKit(animationKit, isLooping)
:SetAlpha(alpha)
:SetAnimation(animation, variation, animSpeed, animOffsetSeconds)
:SetAnimationBlendOperation(blendOp)
:SetDesaturation(strength)
:SetModelByCreatureDisplayID(creatureDisplayID, useActivePlayerCustomizations)
:SetModelByFileID(asset, useMips)
:SetModelByPath(asset, useMips)
:SetModelByUnit(unit, sheatheWeapons, autoDress, hideWeapons, usePlayerNativeForm, holdBowString)
:SetParticleOverrideScale(scale)
:SetPitch(pitch)
:SetPosition(positionX, positionY, positionZ)
:SetRoll(roll)
:SetScale(scale)
:SetShown(show)
:SetSpellVisualKit(spellVisualKitID, oneShot)
:SetUseCenterForOrigin(x, y, z)
:SetYaw(yaw)
:Show()
:StopAnimationKit()
FrameAPIQuestPOI ✪
:GetNumTooltips()
:GetTooltipIndex(index)
:UpdateMouseOverTooltip(x, y)
FrameAPIScenarioPOI ✪
:GetScenarioTooltipText()
:UpdateMouseOverTooltip(x, y)
FrameAPISimpleCheckout ✪
:CancelOpenCheckout()
:ClearFocus()
:CloseCheckout()
:CopyExternalLink()
:OpenCheckout(checkoutID)
:OpenExternalLink()
:SetFocus()
:SetZoom(zoomLevel)
FrameAPITabardModel ✪
:GetLowerBackgroundFileName()
:GetLowerEmblemFile()
:GetUpperBackgroundFileName()
:GetUpperEmblemFile()
FrameAPITabardModelBase ✪
:CanSaveTabardNow()
:CycleVariation(variationIndex, delta)
:GetLowerEmblemTexture(texture)
:GetUpperEmblemTexture(texture)
:InitializeTabardColors()
:IsGuildTabard()
:Save()
FrameAPIUnitPositionFrame ✪
:AddUnit("unitTokenString", asset, width, height, r, g, b, a, sublayer, showFacing)
:ClearUnits()
:FinalizeUnits()
:GetMouseOverUnits()
:GetPlayerPingScale()
:GetUiMapID()
:SetPlayerPingScale(scale)
:SetPlayerPingTexture(textureType, asset, width, height)
:SetUiMapID(mapID)
:SetUnitColor("unit", colorR, colorG, colorB, colorA)
:StartPlayerPing(duration, fadeDuration)
:StopPlayerPing()
MinimapFrameAPI ✪
:GetPingPosition()
:GetZoom()
:GetZoomLevels()
:PingLocation(locationX, locationY)
:SetArchBlobInsideAlpha(alpha)
:SetArchBlobInsideTexture(asset)
:SetArchBlobOutsideAlpha(alpha)
:SetArchBlobOutsideTexture(asset)
:SetArchBlobRingAlpha(alpha)
:SetArchBlobRingScalar(scalar)
:SetArchBlobRingTexture(asset)
:SetBlipTexture(asset)
:SetCorpsePOIArrowTexture(asset)
:SetIconTexture(asset)
:SetMaskTexture(asset)
:SetPOIArrowTexture(asset)
:SetPlayerTexture(asset)
:SetQuestBlobInsideAlpha(alpha)
:SetQuestBlobInsideTexture(asset)
:SetQuestBlobOutsideAlpha(alpha)
:SetQuestBlobOutsideTexture(asset)
:SetQuestBlobRingAlpha(alpha)
:SetQuestBlobRingScalar(scalar)
:SetQuestBlobRingTexture(asset)
:SetStaticPOIArrowTexture(asset)
:SetTaskBlobInsideAlpha(alpha)
:SetTaskBlobInsideTexture(asset)
:SetTaskBlobOutsideAlpha(alpha)
:SetTaskBlobOutsideTexture(asset)
:SetTaskBlobRingAlpha(alpha)
:SetTaskBlobRingScalar(scalar)
:SetTaskBlobRingTexture(asset)
:SetZoom(zoomFactor)
:UpdateBlips()
SimpleAnimAlphaAPI ✪
:GetFromAlpha()
:GetToAlpha()
:SetFromAlpha(normalizedAlpha)
:SetToAlpha(normalizedAlpha)
SimpleAnimAPI ✪
:GetDuration()
:GetElapsed()
:GetEndDelay()
:GetOrder()
:GetProgress()
:GetRegionParent()
:GetScript("scriptTypeName", bindingType)
:GetSmoothProgress()
:GetSmoothing()
:GetStartDelay()
:GetTarget()
:HasScript("scriptName")
:HookScript("scriptTypeName", script, bindingType)
:IsDelaying()
:IsDone()
:IsPaused()
:IsPlaying()
:IsStopped()
:Pause()
:Play()
:Restart()
:SetChildKey("childKey")
:SetDuration(durationSec, recomputeGroupDuration)
:SetEndDelay(delaySec, recomputeGroupDuration)
:SetOrder(newOrder)
:SetParent(parent, order)
:SetPlaying(play)
:SetScript("scriptTypeName", script)
:SetSmoothProgress(durationSec)
:SetSmoothing(weights)
:SetStartDelay(delaySec, recomputeGroupDuration)
:SetTarget(target)
:SetTargetKey("key")
:SetTargetName("name")
:SetTargetParent()
:Stop()
SimpleAnimatableObjectAPI ✪
:CreateAnimationGroup("name", "templateName")
:GetAnimationGroups()
:StopAnimating()
SimpleAnimFlipBookAPI ✪
:GetFlipBookColumns()
:GetFlipBookFrameHeight()
:GetFlipBookFrameWidth()
:GetFlipBookFrames()
:GetFlipBookRows()
:SetFlipBookColumns(columns)
:SetFlipBookFrameHeight(height)
:SetFlipBookFrameWidth(width)
:SetFlipBookFrames(frames)
:SetFlipBookRows(rows)
SimpleAnimGroupAPI ✪
:CreateAnimation("animationType", "name", "templateName")
:Finish()
:GetAnimationSpeedMultiplier()
:GetAnimations()
:GetDuration()
:GetElapsed()
:GetLoopState()
:GetLooping()
:GetProgress()
:GetScript("scriptTypeName", bindingType)
:HasScript("scriptName")
:HookScript("scriptTypeName", script, bindingType)
:IsDone()
:IsPaused()
:IsPendingFinish()
:IsPlaying()
:IsReverse()
:IsSetToFinalAlpha()
:Pause()
:Play(reverse, offset)
:RemoveAnimations()
:Restart(reverse, offset)
:SetAnimationSpeedMultiplier(animationSpeedMultiplier)
:SetLooping(loopType)
:SetPlaying(play)
:SetScript("scriptTypeName", script)
:SetToFinalAlpha(setToFinalAlpha)
:Stop()
SimpleAnimPathAPI ✪
:CreateControlPoint("name", "templateName", order)
:GetControlPoints()
:GetCurveType()
:GetMaxControlPointOrder()
:SetCurveType(curveType)
SimpleAnimRotationAPI ✪
:GetDegrees()
:GetOrigin()
:GetRadians()
:SetDegrees(angle)
:SetOrigin(point, originX, originY)
:SetRadians(angle)
SimpleAnimScaleAPI ✪
:GetOrigin()
:GetScale()
:GetScaleFrom()
:GetScaleTo()
:SetOrigin(point, originX, originY)
:SetScale(scaleX, scaleY)
:SetScaleFrom(scaleX, scaleY)
:SetScaleTo(scaleX, scaleY)
SimpleAnimTextureCoordTranslationAPI ✪
:GetOffset()
:SetOffset(offsetU, offsetV)
SimpleAnimTranslationAPI ✪
:GetOffset()
:SetOffset(offsetX, offsetY)
SimpleAnimVertexColorAPI ✪
:GetEndColor()
:GetStartColor()
:SetEndColor(color)
:SetStartColor(color)
SimpleBrowserAPI ✪
:ClearFocus()
:CopyExternalLink()
:DeleteCookies()
:NavigateBack()
:NavigateForward()
:NavigateHome("urlType")
:NavigateReload()
:NavigateStop()
:NavigateTo("url")
:OpenExternalLink()
:OpenTicket(index)
:SetFocus()
:SetZoom(zoom)
SimpleButtonAPI ✪
:ClearDisabledTexture()
:ClearHighlightTexture()
:ClearNormalTexture()
:ClearPushedTexture()
:Click("button", isDown)
:Disable()
:Enable()
:GetButtonState()
:GetDisabledFontObject()
:GetDisabledTexture()
:GetFontString()
:GetHighlightFontObject()
:GetHighlightTexture()
:GetMotionScriptsWhileDisabled()
:GetNormalFontObject()
:GetNormalTexture()
:GetPushedTextOffset()
:GetPushedTexture()
:GetText()
:GetTextHeight()
:GetTextWidth()
:IsEnabled()
:RegisterForClicks(unpackedPrimitiveType...)
:RegisterForMouse(unpackedPrimitiveType...)
:SetButtonState(buttonState, lock)
:SetDisabledAtlas(atlas)
:SetDisabledFontObject(font)
:SetDisabledTexture(asset)
:SetEnabled(enabled)
:SetFontString(fontString)
:SetFormattedText("text")
:SetHighlightAtlas(atlas, blendMode)
:SetHighlightFontObject(font)
:SetHighlightTexture(asset, blendMode)
:SetMotionScriptsWhileDisabled(motionScriptsWhileDisabled)
:SetNormalAtlas(atlas)
:SetNormalFontObject(font)
:SetNormalTexture(asset)
:SetPushedAtlas(atlas)
:SetPushedTextOffset(offsetX, offsetY)
:SetPushedTexture(asset)
:SetText("text")
SimpleCheckboxAPI ✪
:GetChecked()
:GetCheckedTexture()
:GetDisabledCheckedTexture()
:SetChecked(checked)
:SetCheckedTexture(asset)
:SetDisabledCheckedTexture(asset)
SimpleColorSelectAPI ✪
:ClearColorWheelTexture()
:GetColorAlpha()
:GetColorAlphaTexture()
:GetColorAlphaThumbTexture()
:GetColorHSV()
:GetColorRGB()
:GetColorValueTexture()
:GetColorValueThumbTexture()
:GetColorWheelTexture()
:GetColorWheelThumbTexture()
:SetColorAlpha(alpha)
:SetColorAlphaTexture(texture)
:SetColorAlphaThumbTexture(texture)
:SetColorHSV(hsvX, hsvY, hsvZ)
:SetColorRGB(rgbR, rgbG, rgbB)
:SetColorValueTexture(texture)
:SetColorValueThumbTexture(texture)
:SetColorWheelTexture(texture)
:SetColorWheelThumbTexture(texture)
SimpleControlPointAPI ✪
:GetOffset()
:GetOrder()
:SetOffset(offsetX, offsetY)
:SetOrder(order)
:SetParent(parent, order)
SimpleEditBoxAPI ✪
:AddHistoryLine("text")
:ClearFocus()
:ClearHighlightText()
:ClearHistory()
:Disable()
:Enable()
:GetAltArrowKeyMode()
:GetBlinkSpeed()
:GetCursorPosition()
:GetDisplayText()
:GetFont()
:GetFontObject()
:GetHighlightColor()
:GetHistoryLines()
:GetIndentedWordWrap()
:GetInputLanguage()
:GetJustifyH()
:GetJustifyV()
:GetMaxBytes()
:GetMaxLetters()
:GetNumLetters()
:GetNumLines()
:GetNumber()
:GetShadowColor()
:GetShadowOffset()
:GetSpacing()
:GetText()
:GetTextColor()
:GetTextInsets()
:GetUTF8CursorPosition()
:GetVisibleTextByteLimit()
:HasFocus()
:HasText()
:HighlightText(start, stop)
:Insert("text")
:IsAlphabeticOnly()
:IsAutoFocus()
:IsCountInvisibleLetters()
:IsEnabled()
:IsInIMECompositionMode()
:IsMultiLine()
:IsNumeric()
:IsNumericFullRange()
:IsPassword()
:IsSecureText()
:ResetInputMode()
:SetAlphabeticOnly(enabled)
:SetAltArrowKeyMode(altMode)
:SetAutoFocus(autoFocus)
:SetBlinkSpeed(cursorBlinkSpeedSec)
:SetCountInvisibleLetters(countInvisibleLetters)
:SetCursorPosition(cursorPosition)
:SetEnabled(enabled)
:SetFocus()
:SetFont("fontFile", height, flags)
:SetFontObject(font)
:SetFontStringIgnoreParentAlpha(ignoreParentAlpha)
:SetHighlightColor(colorR, colorG, colorB, a)
:SetHistoryLines(numHistoryLines)
:SetIndentedWordWrap(isIndented)
:SetJustifyH(justifyH)
:SetJustifyV(justifyV)
:SetMaxBytes(maxBytes)
:SetMaxLetters(maxLetters)
:SetMultiLine(multiline)
:SetNumber(number)
:SetNumeric(isNumeric)
:SetNumericFullRange(isNumeric)
:SetPassword(isPassword)
:SetSecureText(isSecure)
:SetSecurityDisablePaste()
:SetSecurityDisableSetText()
:SetShadowColor(colorR, colorG, colorB, a)
:SetShadowOffset(offsetX, offsetY)
:SetSpacing(fontHeight)
:SetText("text")
:SetTextColor(colorR, colorG, colorB, a)
:SetTextInsets(left, right, top, bottom)
:SetVisibleTextByteLimit(maxVisibleBytes)
:ToggleInputLanguage()
SimpleFontAPI ✪
:CopyFontObject(sourceFont)
:GetAlpha()
:GetFont()
:GetFontObject()
:GetFontObjectForAlphabet(alphabet)
:GetIndentedWordWrap()
:GetJustifyH()
:GetJustifyV()
:GetShadowColor()
:GetShadowOffset()
:GetSpacing()
:GetTextColor()
:SetAlpha(alpha)
:SetFont("fontFile", height, flags)
:SetFontHeight(height)
:SetFontObject(font)
:SetIndentedWordWrap(wordWrap)
:SetJustifyH(justifyH)
:SetJustifyV(justifyV)
:SetShadowColor(colorR, colorG, colorB, a)
:SetShadowOffset(offsetX, offsetY)
:SetSpacing(spacing)
:SetTextColor(colorR, colorG, colorB, a)
SimpleFontStringAPI ✪
:CalculateScreenAreaFromCharacterSpan(leftIndex, rightIndex)
:CanNonSpaceWrap()
:CanWordWrap()
:FindCharacterIndexAtCoordinate(x, y)
:GetFieldSize()
:GetFont()
:GetFontObject()
:GetIndentedWordWrap()
:GetJustifyH()
:GetJustifyV()
:GetLineHeight()
:GetMaxLines()
:GetNumLines()
:GetRotation()
:GetShadowColor()
:GetShadowOffset()
:GetSpacing()
:GetStringHeight()
:GetStringWidth()
:GetText()
:GetTextColor()
:GetTextScale()
:GetUnboundedStringWidth()
:GetWrappedWidth()
:IsTruncated()
:SetAlphaGradient(start, length)
:SetFixedColor(fixedColor)
:SetFont("fontFile", fontHeight, flags)
:SetFontObject(font)
:SetFormattedText("text")
:SetIndentedWordWrap(wrap)
:SetJustifyH(justifyH)
:SetJustifyV(justifyV)
:SetMaxLines(maxLines)
:SetNonSpaceWrap(wrap)
:SetRotation(radians)
:SetShadowColor(colorR, colorG, colorB, a)
:SetShadowOffset(offsetX, offsetY)
:SetSpacing(spacing)
:SetText("text")
:SetTextColor(colorR, colorG, colorB, a)
:SetTextHeight(height)
:SetTextScale(textScale)
:SetTextToFit("text")
:SetWordWrap(wrap)
SimpleFrameAPI ✪
:AbortDrag()
:CanChangeAttribute()
:CreateFontString("name", drawLayer, "templateName")
:CreateLine("name", drawLayer, "templateName", subLevel)
:CreateMaskTexture("name", drawLayer, "templateName", subLevel)
:CreateTexture("name", drawLayer, "templateName", subLevel)
:DesaturateHierarchy(desaturation, excludeRoot)
:DisableDrawLayer(layer)
:DoesClipChildren()
:DoesHyperlinkPropagateToParent()
:EnableDrawLayer(layer)
:EnableGamePadButton(enable)
:EnableGamePadStick(enable)
:EnableKeyboard(enable)
:ExecuteAttribute("attributeName", "unpackedPrimitiveType...")
:GetAlpha()
:GetAttribute("attributeName")
:GetBoundsRect()
:GetChildren()
:GetClampRectInsets()
:GetDontSavePosition()
:GetEffectiveAlpha()
:GetEffectiveScale()
:GetEffectivelyFlattensRenderLayers()
:GetFlattensRenderLayers()
:GetFrameLevel()
:GetFrameStrata()
:GetHitRectInsets()
:GetHyperlinksEnabled()
:GetID()
:GetNumChildren()
:GetNumRegions()
:GetPropagateKeyboardInput()
:GetRaisedFrameLevel()
:GetRegions()
:GetResizeBounds()
:GetScale()
:GetWindow()
:HasFixedFrameLevel()
:HasFixedFrameStrata()
:Hide()
:InterceptStartDrag(delegate)
:IsClampedToScreen()
:IsDrawLayerEnabled(layer)
:IsEventRegistered("eventName")
:IsGamePadButtonEnabled()
:IsGamePadStickEnabled()
:IsIgnoringParentAlpha()
:IsIgnoringParentScale()
:IsKeyboardEnabled()
:IsMovable()
:IsObjectLoaded()
:IsResizable()
:IsShown()
:IsToplevel()
:IsUserPlaced()
:IsUsingParentLevel()
:IsVisible()
:LockHighlight()
:Lower()
:Raise()
:RegisterAllEvents()
:RegisterEvent("eventName")
:RegisterForDrag(unpackedPrimitiveType...)
:RegisterUnitEvent("eventName", "units...")
:RotateTextures(radians, x, y)
:SetAlpha(alpha)
:SetAttribute("attributeName", "value")
:SetAttributeNoHandler("attributeName", "value")
:SetClampRectInsets(left, right, top, bottom)
:SetClampedToScreen(clampedToScreen)
:SetClipsChildren(clipsChildren)
:SetDontSavePosition(dontSave)
:SetDrawLayerEnabled(layer, isEnabled)
:SetFixedFrameLevel(isFixed)
:SetFixedFrameStrata(isFixed)
:SetFlattensRenderLayers(flatten)
:SetFrameLevel(frameLevel)
:SetFrameStrata(strata)
:SetHighlightLocked(locked)
:SetHitRectInsets(left, right, top, bottom)
:SetHyperlinkPropagateToParent(canPropagate)
:SetHyperlinksEnabled(enabled)
:SetID(id)
:SetIgnoreParentAlpha(ignore)
:SetIgnoreParentScale(ignore)
:SetIsFrameBuffer(isFrameBuffer)
:SetMovable(movable)
:SetPropagateKeyboardInput(propagate)
:SetResizable(resizable)
:SetResizeBounds(minWidth, minHeight, maxWidth, maxHeight)
:SetScale(scale)
:SetShown(shown)
:SetToplevel(topLevel)
:SetUserPlaced(userPlaced)
:SetUsingParentLevel(usingParentLevel)
:SetWindow(window)
:Show()
:StartMoving(alwaysStartFromMouse)
:StartSizing(resizePoint, alwaysStartFromMouse)
:StopMovingOrSizing()
:UnlockHighlight()
:UnregisterAllEvents()
:UnregisterEvent("eventName")
SimpleFrameScriptObjectAPI ✪
:GetName()
:GetObjectType()
:IsForbidden()
:IsObjectType("objectType")
:SetForbidden()
SimpleHTMLAPI ✪
:GetContentHeight()
:GetFont(textType)
:GetFontObject(textType)
:GetHyperlinkFormat()
:GetIndentedWordWrap(textType)
:GetJustifyH(textType)
:GetJustifyV(textType)
:GetShadowColor(textType)
:GetShadowOffset(textType)
:GetSpacing(textType)
:GetTextColor(textType)
:GetTextData()
:SetFont(textType, "fontFile", height, flags)
:SetFontObject(textType, font)
:SetHyperlinkFormat("format")
:SetIndentedWordWrap(textType, wordWrap)
:SetJustifyH(textType, justifyH)
:SetJustifyV(textType, justifyV)
:SetShadowColor(textType, colorR, colorG, colorB, a)
:SetShadowOffset(textType, offsetX, offsetY)
:SetSpacing(textType, spacing)
:SetText("text", ignoreMarkup)
:SetTextColor(textType, colorR, colorG, colorB, a)
SimpleLineAPI ✪
:ClearAllPoints()
:GetEndPoint()
:GetHitRectThickness()
:GetStartPoint()
:GetThickness()
:SetEndPoint(relativePoint, relativeTo, offsetX, offsetY)
:SetHitRectThickness(thickness)
:SetStartPoint(relativePoint, relativeTo, offsetX, offsetY)
:SetThickness(thickness)
SimpleMapSceneAPI ✪
:GetMaxCharacterSlotCount()
:GetModelDrawLayer()
:GetViewInsets()
:SetModelDrawLayer(layer)
:SetViewInsets(left, right, top, bottom)
SimpleMessageFrameAPI ✪
:AddMessage("text", colorR, colorG, colorB, a, messageID)
:Clear()
:GetFadeDuration()
:GetFadePower()
:GetFading()
:GetFont()
:GetFontObject()
:GetFontStringByID(messageID)
:GetIndentedWordWrap()
:GetInsertMode()
:GetJustifyH()
:GetJustifyV()
:GetShadowColor()
:GetShadowOffset()
:GetSpacing()
:GetTextColor()
:GetTimeVisible()
:HasMessageByID(messageID)
:ResetMessageFadeByID(messageID)
:SetFadeDuration(fadeDurationSeconds)
:SetFadePower(fadePower)
:SetFading(fading)
:SetFont("fontFile", height, flags)
:SetFontObject(font)
:SetIndentedWordWrap(wordWrap)
:SetInsertMode(mode)
:SetJustifyH(justifyH)
:SetJustifyV(justifyV)
:SetShadowColor(colorR, colorG, colorB, a)
:SetShadowOffset(offsetX, offsetY)
:SetSpacing(spacing)
:SetTextColor(colorR, colorG, colorB, a)
:SetTimeVisible(timeVisibleSeconds)
SimpleModelAPI ✪
:AdvanceTime()
:ClearFog()
:ClearModel()
:ClearTransform()
:GetCameraDistance()
:GetCameraFacing()
:GetCameraPosition()
:GetCameraRoll()
:GetCameraTarget()
:GetDesaturation()
:GetFacing()
:GetFogColor()
:GetFogFar()
:GetFogNear()
:GetLight()
:GetModelAlpha()
:GetModelDrawLayer()
:GetModelFileID()
:GetModelScale()
:GetPaused()
:GetPitch()
:GetPosition()
:GetRoll()
:GetShadowEffect()
:GetViewInsets()
:GetViewTranslation()
:GetWorldScale()
:HasAttachmentPoints()
:HasCustomCamera()
:IsUsingModelCenterToTransform()
:MakeCurrentCameraCustom()
:ReplaceIconTexture(asset)
:SetCamera(cameraIndex)
:SetCameraDistance(distance)
:SetCameraFacing(radians)
:SetCameraPosition(positionX, positionY, positionZ)
:SetCameraRoll(radians)
:SetCameraTarget(targetX, targetY, targetZ)
:SetCustomCamera(cameraIndex)
:SetDesaturation(strength)
:SetFacing(facing)
:SetFogColor(colorR, colorG, colorB, a)
:SetFogFar(fogFar)
:SetFogNear(fogNear)
:SetGlow(glow)
:SetLight(enabled, light)
:SetModel(asset, noMip)
:SetModelAlpha(alpha)
:SetModelDrawLayer(layer)
:SetModelScale(scale)
:SetParticlesEnabled(enabled)
:SetPaused(paused)
:SetPitch(pitch)
:SetPosition(positionX, positionY, positionZ)
:SetRoll(roll)
:SetSequence(sequence)
:SetSequenceTime(sequence, timeOffset)
:SetShadowEffect(strength)
:SetTransform(translation, rotation, scale)
:SetViewInsets(left, right, top, bottom)
:SetViewTranslation(x, y)
:TransformCameraSpaceToModelSpace(cameraPosition)
:UseModelCenterToTransform(useCenter)
SimpleModelFFXAPI ✪
:AddCharacterLight(index, light)
:AddLight(index, light)
:AddPetLight(index, light)
:ResetLights()
SimpleMovieAPI ✪
:EnableSubtitles(enable)
:StartMovie(movieID, looping)
:StartMovieByName("movieName", looping, resolution)
:StopMovie()
SimpleObjectAPI ✪
:ClearParentKey()
:GetDebugName(preferParentKey)
:GetParent()
:GetParentKey()
:SetParentKey("parentKey", clearOtherKeys)
SimpleOffScreenFrameAPI ✪
:ApplySnapshot(texture, snapshotID)
:Flush()
:GetMaxSnapshots()
:IsSnapshotValid(snapshotID)
:SetMaxSnapshots(maxSnapshots)
:TakeSnapshot()
:TestPrintToFile(snapshotID, "filename")
:UsesNPOT()
SimpleRegionAPI ✪
:GetAlpha()
:GetDrawLayer()
:GetEffectiveScale()
:GetScale()
:GetVertexColor()
:IsIgnoringParentAlpha()
:IsIgnoringParentScale()
:IsObjectLoaded()
:SetAlpha(alpha)
:SetDrawLayer(layer, sublevel)
:SetIgnoreParentAlpha(ignore)
:SetIgnoreParentScale(ignore)
:SetScale(scale)
:SetVertexColor(colorR, colorG, colorB, a)
SimpleScriptRegionAPI ✪
:CanChangeProtectedState()
:CollapsesLayout()
:EnableMouse(enable)
:EnableMouseMotion(enable)
:EnableMouseWheel(enable)
:GetBottom()
:GetCenter()
:GetHeight(ignoreRect)
:GetLeft()
:GetRect()
:GetRight()
:GetScaledRect()
:GetScript("scriptTypeName", bindingType)
:GetSize(ignoreRect)
:GetSourceLocation()
:GetTop()
:GetWidth(ignoreRect)
:HasScript("scriptName")
:Hide()
:HookScript("scriptTypeName", script, bindingType)
:Intersects(region)
:IsAnchoringRestricted()
:IsCollapsed()
:IsDragging()
:IsMouseClickEnabled()
:IsMouseEnabled()
:IsMouseMotionEnabled()
:IsMouseMotionFocus()
:IsMouseOver(offsetTop, offsetBottom, offsetLeft, offsetRight)
:IsMouseWheelEnabled()
:IsProtected()
:IsRectValid()
:IsShown()
:IsVisible()
:SetCollapsesLayout(collapsesLayout)
:SetMouseClickEnabled(enabled)
:SetMouseMotionEnabled(enabled)
:SetParent(parent)
:SetPassThroughButtons(unpackedPrimitiveType...)
:SetPropagateMouseClicks(propagate)
:SetPropagateMouseMotion(propagate)
:SetScript("scriptTypeName", script)
:SetShown(show)
:Show()
SimpleScriptRegionResizingAPI ✪
:AdjustPointsOffset(x, y)
:ClearAllPoints()
:ClearPoint(point)
:ClearPointsOffset()
:GetNumPoints()
:GetPoint(anchorIndex, resolveCollapsed)
:GetPointByName(point, resolveCollapsed)
:SetAllPoints(relativeTo, doResize)
:SetHeight(height)
:SetPoint(point, relativeTo, relativePoint, offsetX, offsetY)
:SetSize(x, y)
:SetWidth(width)
SimpleScrollFrameAPI ✪
:GetHorizontalScroll()
:GetHorizontalScrollRange()
:GetScrollChild()
:GetVerticalScroll()
:GetVerticalScrollRange()
:SetHorizontalScroll(offset)
:SetScrollChild(scrollChild)
:SetVerticalScroll(offset)
:UpdateScrollChildRect()
SimpleSliderAPI ✪
:Disable()
:Enable()
:GetMinMaxValues()
:GetObeyStepOnDrag()
:GetOrientation()
:GetStepsPerPage()
:GetThumbTexture()
:GetValue()
:GetValueStep()
:IsDraggingThumb()
:IsEnabled()
:SetEnabled(enabled)
:SetMinMaxValues(minValue, maxValue)
:SetObeyStepOnDrag(obeyStepOnDrag)
:SetOrientation(orientation)
:SetStepsPerPage(stepsPerPage)
:SetThumbTexture(asset)
:SetValue(value, treatAsMouseEvent)
:SetValueStep(valueStep)
SimpleStatusBarAPI ✪
:GetFillStyle()
:GetMinMaxValues()
:GetOrientation()
:GetReverseFill()
:GetRotatesTexture()
:GetStatusBarColor()
:GetStatusBarDesaturation()
:GetStatusBarTexture()
:GetValue()
:IsStatusBarDesaturated()
:SetColorFill(colorR, colorG, colorB, a)
:SetFillStyle(fillStyle)
:SetMinMaxValues(minValue, maxValue)
:SetOrientation(orientation)
:SetReverseFill(isReverseFill)
:SetRotatesTexture(rotatesTexture)
:SetStatusBarColor(colorR, colorG, colorB, a)
:SetStatusBarDesaturated(desaturated)
:SetStatusBarDesaturation(desaturation)
:SetStatusBarTexture(asset)
:SetValue(value)
SimpleTextureAPI ✪
:AddMaskTexture(mask)
:GetMaskTexture(index)
:GetNumMaskTextures()
:RemoveMaskTexture(mask)
SimpleTextureBaseAPI ✪
:ClearTextureSlice()
:GetAtlas()
:GetBlendMode()
:GetDesaturation()
:GetHorizTile()
:GetRotation()
:GetTexCoord()
:GetTexelSnappingBias()
:GetTexture()
:GetTextureFileID()
:GetTextureFilePath()
:GetTextureSliceMargins()
:GetTextureSliceMode()
:GetVertTile()
:GetVertexOffset(vertexIndex)
:IsBlockingLoadRequested()
:IsDesaturated()
:IsSnappingToPixelGrid()
:SetAtlas(atlas, useAtlasSize, filterMode, resetTexCoords)
:SetBlendMode(blendMode)
:SetBlockingLoadsRequested(blocking)
:SetColorTexture(colorR, colorG, colorB, a)
:SetDesaturated(desaturated)
:SetDesaturation(desaturation)
:SetGradient(orientation, minColor, maxColor)
:SetHorizTile(tiling)
:SetMask("file")
:SetRotation(radians, normalizedRotationPoint)
:SetSnapToPixelGrid(snap)
:SetTexCoord(left, right, bottom, top)
:SetTexelSnappingBias(bias)
:SetTexture("textureAsset", "wrapModeHorizontal", "wrapModeVertical", "filterMode")
:SetTextureSliceMargins(left, top, right, bottom)
:SetTextureSliceMode(sliceMode)
:SetVertTile(tiling)
:SetVertexOffset(vertexIndex, offsetX, offsetY)
